{
  "type": "data",
  "keys": [
    {
      "name": "-",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "--",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "!",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "!=",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "?",
      "type": "key",
      "topics": [
        {
          "name": "if / else and Conditional Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm",
          "blurb": "A fundamental feature of most programming languages is the ability to ask a simple question that gives a boolean true or false answer, and in GML this is achieved using the if keyword. A simple if condition takes an expression and will perform one or more statements if the expression resolves as true, with the following basic form:"
        }
      ],
      "keys": []
    },
    {
      "name": "*",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "/",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\\\\\",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\a",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\b",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\f",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\r",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\t",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\u",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\v",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "\\\\x",
      "type": "key",
      "topics": [
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        },
        {
          "name": "Strings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/Strings.htm",
          "blurb": "At some time when making your game you will need to use text. Text in games is dealt with by using the string functions (a string is just another way of saying a line of text) and GameMaker has a complete set of functions that permit you to manipulate strings in many ways, including the insertion of one string in another, the copying of strings and the ability to parse strings for the digits or the letters that they contain. In general a string can only be created by adding text within double quotes \" \" and single quote strings are not accepted, nor can you split the string over multiple lines and expect GameMaker to render it as if the line breaks were newlines (unless a string literal @ identifier is used, as explained below)."
        }
      ],
      "keys": []
    },
    {
      "name": "&",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "&&",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "%",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "^",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "^^",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "+",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "++",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "<",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "<<",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "<=",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "=",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "==",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": ">",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": ">=",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": ">>",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "|",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "||",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "~",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "abs",
      "type": "key",
      "topics": [
        {
          "name": "abs",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/abs.htm",
          "blurb": "This function returns the absolute value of the input argument, so if it's a positive value then it will remain the same, but if it's negative it will be multiplied by -1 to make it positive.",
          "syntax": "abs(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "Accessors",
      "type": "key",
      "topics": [
        {
          "name": "Accessors",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Accessors.htm",
          "blurb": "The GameMaker Language (GML) also permits you to access certain Data Structures and Arrays through the use of logical expressions called accessors. This is structured in a similar way as when you are normally working with an array, only we use an identifier symbol before the first argument to tell GameMaker that you are working on a (previously created) data structure or the array literal."
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_filter_all_players",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_achievement_load_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_leaderboard.htm",
          "blurb": "This function will send a request to the server for information on the given leaderboard. The leaderboard must have been created previously on the developer dashboard for your game and the ID given is that which you must supply as the first argument of the function. It will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The id key of this DS Map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant xboxlive_achievement_leaderboard_info as well as a number of other key/value pairs for each player. The exact contents of the map are shown below:",
          "syntax": "xboxlive_achievement_load_leaderboard(ident, minindex, maxindex, filter)"
        },
        {
          "name": "xboxlive_read_player_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
          "blurb": "The function will return leaderboard information for the given user name. The leaderboard must have been created previously on the XDP dashboard for your game, and callin the function will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The \"id\" key of this DS map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and IT will be paired with the constant achievement_leaderboard_info as well as a number of other key/value pairs. The exact contents of the map are shown below:",
          "syntax": "xboxlive_read_player_leaderboard(leaderboard_name, user_name, num_items, friend_filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_filter_favorites_alt",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_read_player_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
          "blurb": "The function will return leaderboard information for the given user name. The leaderboard must have been created previously on the XDP dashboard for your game, and callin the function will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The \"id\" key of this DS map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and IT will be paired with the constant achievement_leaderboard_info as well as a number of other key/value pairs. The exact contents of the map are shown below:",
          "syntax": "xboxlive_read_player_leaderboard(leaderboard_name, user_name, num_items, friend_filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_filter_favorites_only",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_read_player_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
          "blurb": "The function will return leaderboard information for the given user name. The leaderboard must have been created previously on the XDP dashboard for your game, and callin the function will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The \"id\" key of this DS map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and IT will be paired with the constant achievement_leaderboard_info as well as a number of other key/value pairs. The exact contents of the map are shown below:",
          "syntax": "xboxlive_read_player_leaderboard(leaderboard_name, user_name, num_items, friend_filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_filter_friends_alt",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_read_player_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
          "blurb": "The function will return leaderboard information for the given user name. The leaderboard must have been created previously on the XDP dashboard for your game, and callin the function will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The \"id\" key of this DS map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and IT will be paired with the constant achievement_leaderboard_info as well as a number of other key/value pairs. The exact contents of the map are shown below:",
          "syntax": "xboxlive_read_player_leaderboard(leaderboard_name, user_name, num_items, friend_filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_filter_friends_only",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_achievement_load_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_leaderboard.htm",
          "blurb": "This function will send a request to the server for information on the given leaderboard. The leaderboard must have been created previously on the developer dashboard for your game and the ID given is that which you must supply as the first argument of the function. It will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The id key of this DS Map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant xboxlive_achievement_leaderboard_info as well as a number of other key/value pairs for each player. The exact contents of the map are shown below:",
          "syntax": "xboxlive_achievement_load_leaderboard(ident, minindex, maxindex, filter)"
        },
        {
          "name": "xboxlive_read_player_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
          "blurb": "The function will return leaderboard information for the given user name. The leaderboard must have been created previously on the XDP dashboard for your game, and callin the function will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The \"id\" key of this DS map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and IT will be paired with the constant achievement_leaderboard_info as well as a number of other key/value pairs. The exact contents of the map are shown below:",
          "syntax": "xboxlive_read_player_leaderboard(leaderboard_name, user_name, num_items, friend_filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_leaderboard_info",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_achievement_load_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_leaderboard.htm",
          "blurb": "This function will send a request to the server for information on the given leaderboard. The leaderboard must have been created previously on the developer dashboard for your game and the ID given is that which you must supply as the first argument of the function. It will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The id key of this DS Map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant xboxlive_achievement_leaderboard_info as well as a number of other key/value pairs for each player. The exact contents of the map are shown below:",
          "syntax": "xboxlive_achievement_load_leaderboard(ident, minindex, maxindex, filter)"
        },
        {
          "name": "xboxlive_read_player_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
          "blurb": "The function will return leaderboard information for the given user name. The leaderboard must have been created previously on the XDP dashboard for your game, and callin the function will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The \"id\" key of this DS map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and IT will be paired with the constant achievement_leaderboard_info as well as a number of other key/value pairs. The exact contents of the map are shown below:",
          "syntax": "xboxlive_read_player_leaderboard(leaderboard_name, user_name, num_items, friend_filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_load_friends",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_achievement_load_friends",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_friends.htm",
          "blurb": "This function will send a request to the server for information on all the logged in users friends and will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The id key of this DS Map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant xboxlive_achievement_friends_info as well as a number of other key/value pairs for each friend. The exact contents of the map are shown below:",
          "syntax": "xboxlive_achievement_load_friends()"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_load_leaderboard",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_achievement_load_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_leaderboard.htm",
          "blurb": "This function will send a request to the server for information on the given leaderboard. The leaderboard must have been created previously on the developer dashboard for your game and the ID given is that which you must supply as the first argument of the function. It will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The id key of this DS Map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the constant xboxlive_achievement_leaderboard_info as well as a number of other key/value pairs for each player. The exact contents of the map are shown below:",
          "syntax": "xboxlive_achievement_load_leaderboard(ident, minindex, maxindex, filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_show_achievements",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_achievement_show_achievements",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_show_achievements.htm",
          "blurb": "This function will open the achievements page for the chosen platform. Please note that this is an asynchronous function, ie: your game will continue to run in the background while the achievements page is being shown. As such, you should be careful where you use this and make sure to pause the game or only permit it to be shown in areas of your game where it will not interfere with the game-play.",
          "syntax": "xboxlive_achievement_show_achievements()"
        }
      ],
      "keys": []
    },
    {
      "name": "achievement_stat_event",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_add_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_add_user.htm",
          "blurb": "This function can be used to add a given user ID pointer to the statistics manager. This must be done before using any of the other stats functions to automatically sync the game with the XBox Live server and retrieve the latest values. You supply the user ID as returned by (for example) the function xboxlive_get_user(), and the function will will return -1 if there was an error or if the user ID is invalid, or any other value if the function was successfully called.",
          "syntax": "xboxlive_stats_add_user(user_id)"
        },
        {
          "name": "xboxlive_stats_flush_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_flush_user.htm",
          "blurb": "This function can be used to flush the stats data for a given user from the statistics manager, to the live server, ensuring that the server is up to date with the current values. According to XBox documentation, developers should be careful not to call this too often as the XBox will rate-limit the requests, and the XBox OS will also automatically flush stats approximately every 5 minutes automatically anyway.",
          "syntax": "xboxlive_stats_flush_user(user_id, priority)"
        },
        {
          "name": "xboxlive_stats_get_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_leaderboard.htm",
          "blurb": "This function can be used to retrieve a global leaderboard of ranks for a given statistic. You supply the user ID (as returned, for example, by the function xboxlive_get_user()), the stat string (as defined when you registered it as a \"Featured Stat\"), and then you specify a number of details about what leaderboard information you want to retrieve. Note that you can only retrieve a global leaderboard for int or real stats, but not for string stats.",
          "syntax": "xboxlive_stats_get_leaderboard(user_id, stat, num_entries, start_rank, start_at_user, ascending)"
        },
        {
          "name": "xboxlive_stats_get_social_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_social_leaderboard.htm",
          "blurb": "This function can be used to retrieve a social leaderboard of ranks for a given statistic. You supply the user ID (as returned, for example, by the function xboxlive_get_user()), the stat string (as defined when you created it using the xboxlive_stats_set_stat_* functions), and then you specify a number of details about what leaderboard information you want to retrieve. Note that you can only retrieve a social leaderboard for int or real stats, but not for string stats, and that if you flag the \"favourites_only\" argument as true, then the results will only contain data for those friends that are marked by the user as \"favourites\".",
          "syntax": "xboxlive_stats_get_social_leaderboard(user_id, stat, num_entries, start_rank, start_at_user, favourites_only)"
        },
        {
          "name": "xboxlive_stats_remove_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_remove_user.htm",
          "blurb": "This function can be used to remove (unregister) a given user from the statistics manager, performing a flush of the stat data to the live server. According to the XBox documentation the game does not have to remove the user from the stats manager, as the XBox OS will periodically flush the stats anyway. You supply the user ID as returned by (for example) the function xboxlive_get_user(), and the function will will return -1 if there was an error or if the user ID is invalid, or any other value if the function was successfully called.",
          "syntax": "xboxlive_stats_remove_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "Add Motion",
      "type": "key",
      "topics": [
        {
          "name": "Add Motion",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Add_Motion.htm",
          "blurb": "This action accelerates the instance with the given speed in the given direction."
        }
      ],
      "keys": []
    },
    {
      "name": "Additional IDE Tools",
      "type": "key",
      "topics": [
        {
          "name": "Additional IDE Tools",
          "type": "topic",
          "url": "IDE_Tools/Additional_IDE_Tools.htm",
          "blurb": "This section of the manual outlines additional IDE tools that are available to help you make your games and which aren't covered in other parts of the manual, as well as those tools that are helpful accessories to the other sections of the IDE. "
        }
      ],
      "keys": []
    },
    {
      "name": "Additional Information",
      "type": "key",
      "topics": [
        {
          "name": "Additional Information",
          "type": "topic",
          "url": "Additional_Information/Additional_Information.htm",
          "blurb": "This section of the manual contain a collection of miscellaneous articles related to programming and the way the GameMaker Language works. The following articles are designed as companion articles to further expand your understanding of how GameMaker works and how to get the most from the different language features available:"
        }
      ],
      "keys": []
    },
    {
      "name": "Addressing Variables In Other Instances",
      "type": "key",
      "topics": [
        {
          "name": "Addressing Variables In Other Instances",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Addressing_Variables_In_Other_Instances.htm",
          "blurb": "In the sections dedicated to variables you found out how to create and use variables within a single instance, or on a global scope, but what happens if you want one instance to access a variable in another, different instance? There are many cases when you may want to do this, for example in a collision with a bullet object, you may want to find out how much damage the bullet does by accessing a variable in the bullet, or you might want to stop the motion of all the balls in a puzzle, or you might want to move the main character to a particular position, or any number of other situations you typically come across in any game. Thankfully the GameMaker Language comes equipped with mechanisms to achieve this."
        }
      ],
      "keys": []
    },
    {
      "name": "alarm",
      "type": "key",
      "topics": [
        {
          "name": "alarm",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/alarm.htm",
          "blurb": "This 1 dimension array is used to get the current value for any alarms that the instance may have, or it can be used to set those alarms. There are twelve alarms built into each instance of an object, and each one has its own event that will run when this variable reaches 0.",
          "syntax": "alarm[val]"
        }
      ],
      "keys": []
    },
    {
      "name": "alarm_get",
      "type": "key",
      "topics": [
        {
          "name": "alarm_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/alarm_get.htm",
          "blurb": "This function can be used to get the current value of the given alarm. You supply the alarm number from 0 to 11 and this function will return the value that the alarm is currently on. This is an alternative method to getting the alarm array value directly.",
          "syntax": "alarm_get(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "alarm_set",
      "type": "key",
      "topics": [
        {
          "name": "alarm_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/alarm_set.htm",
          "blurb": "This function can be used to set an alarm. You supply the alarm number from 0 to 11, and then the value to set the alarm to. The value must be an integer value, and you can set it to -1 to stop the alarm (non integer values will be rounded to the nearest integer). This is an alternative method to setting the alarm array directly.",
          "syntax": "alarm_set(index, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "all",
      "type": "key",
      "topics": [
        {
          "name": "Instance Keywords",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Instance_Keywords.htm",
          "blurb": "To make certain things easier in GameMaker, you can use one of several instance keywords in your code (whether GML or GML Visual). These keywords are used primarily to identify instances - and in some cases structs - under different situations, and each one is explained in the text below."
        }
      ],
      "keys": []
    },
    {
      "name": "analytics_event",
      "type": "key",
      "topics": [
        {
          "name": "analytics_event",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/analytics_event.htm",
          "blurb": "This function will send the specified text to the analytics provider that you have set up through the HTML5 Game Options. This function can be used to create a custom analytic to track something outside of the scope of the provider being used.",
          "syntax": "analytics_event(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "analytics_event_ext",
      "type": "key",
      "topics": [
        {
          "name": "analytics_event_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/analytics_event_ext.htm",
          "blurb": "This function will send the specified text to the analytics provider that you have set up through the HTML5 Game Options. This function can be used to create a custom analytic to track something outside of the scope of the provider being used, and will also accept custom parameter/value pairs, where the parameter is a string and the value a real number. For Google Analytics, you can only add in one extra pair while Flurry will accept up to\n7.",
          "syntax": "analytics_event_ext(string, string_param, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "angle_difference",
      "type": "key",
      "topics": [
        {
          "name": "angle_difference",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/angle_difference.htm",
          "blurb": "This function will return the smallest difference between the two specified angles, where the difference is calculated from the source angle towards the destination angle. The returned value will be between -180 and 180 degrees (where a positive angle is anti-clockwise and a negative angle is clockwise).",
          "syntax": "angle_difference(dest, src)"
        }
      ],
      "keys": []
    },
    {
      "name": "Animation Curve Editor",
      "type": "key",
      "topics": [
        {
          "name": "Animation Curves",
          "type": "topic",
          "url": "The_Asset_Editors/Animation_Curves.htm",
          "blurb": "An animation curve is an asset that contains one or more curves that represent how a value changes over time, and can use linear interpolation, smooth interpolation or bezier interpolation to go between different points in the curve. The values you set on the vertical axis can be between any two values (between -1 and 1 by default) and the duration along the horizontal axis is always normalised from 0 to 1, making it easy to target different time ranges using multipliers in your game code or stretch them to fit a track in the Sequences Editor."
        },
        {
          "name": "The Animation Curve Library",
          "type": "topic",
          "url": "The_Asset_Editors/Animation_Curve_Properties/Animation_Curve_Library.htm",
          "blurb": "The Animation Curve Library window allows you to change the Curve Type for the Animation Curve, and apply a preset to the selected channel. It can be opened by  left-clicking on the  button in the Animation Curve Editor or Sequence Dope Sheet, or by  right-clicking\nanywhere in the Channel Editor."
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_channel_evaluate",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_channel_evaluate",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_channel_evaluate.htm",
          "blurb": "This function can be used to get the value at a specific point in time from a channel struct. You supply the struct pointer for the channel (as returned by the function animcurve_get_channel(), or as returned in the animation curve struct from the function animcurve_get()) and the \"x\" (time) position along the curve channel to evaluate. This position should be between 0 and 1, and the function will return the curve value at that position, or it will return 0 if the channel struct supplied is invalid.",
          "syntax": "animcurve_channel_evaluate(channel_struct, posx)"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_channel_new",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_channel_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_channel_new.htm",
          "blurb": "This function can be used to create a new animation curve channel struct. A channel struct has the following variables:",
          "syntax": "animcurve_channel_new()"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_create",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_create.htm",
          "blurb": "This function will create an empty animation curve struct, ready for you to populate with channel data. The function will return a pointer to the struct and this is then used to add channels and other data to the animation curve. You can also supply this to functions like animcurve_get() to later get the data from the curve.",
          "syntax": "animcurve_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_destroy",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_destroy.htm",
          "blurb": "This function can be used to destroy any animation curves that have been previously created with the function animcurve_create(). Calling this function will remove the animation curve from memory and clean up any channels or points that it contains as well (these never need to be cleaned up manually). Note that you cannot destroy any animation curves created in the asset browser, only those created at runtime.",
          "syntax": "animcurve_destroy(curve_struct)"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_exists",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_exists.htm",
          "blurb": "This function will return true if the given Animation Curve Asset or Animation Curve Struct exists and is a valid Animation Curve, or false if it isn't.",
          "syntax": "animcurve_exists(curve_struct_or_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_get",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_get.htm",
          "blurb": "This function will return a struct containing all the data for the given animation curve. You supply the animation curve asset ID (as defined in the Asset Browser), and the function will return a struct with the following variables:",
          "syntax": "animcurve_get(curve_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_get_channel",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_get_channel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_get_channel.htm",
          "blurb": "This function will return the struct containing the channel data for the channel specified in an animation curve asset. You supply the animation curve ID or struct as well as the channel name or index, and the function will return a struct with the following format:",
          "syntax": "animcurve_get_channel(curve_struct_or_id, channel_name_or_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_get_channel_index",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_get_channel_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_get_channel_index.htm",
          "blurb": "This function will return the index value for any given animation curve channel. You supply the animation curve ID or struct, where the curve ID is the name of the animation curve as it was defined in the Asset Browser, or the struct pointer as returned by the function animcurve_create(). You then supply the name of the channel, as a string, and the function will return the index value associated with that channel. Note that if the curve or channel does not exist then you will get an error.",
          "syntax": "animcurve_get_channel_index(curve_struct_or_id, channel_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurve_point_new",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_point_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_point_new.htm",
          "blurb": "This function can be used to create a new points struct to be added to an animation curve channel. When created a points struct is empty and you need to set the following variables to generate the point data:",
          "syntax": "animcurve_point_new()"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurvetype_catmullrom",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_channel_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_channel_new.htm",
          "blurb": "This function can be used to create a new animation curve channel struct. A channel struct has the following variables:",
          "syntax": "animcurve_channel_new()"
        }
      ],
      "keys": []
    },
    {
      "name": "animcurvetype_linear",
      "type": "key",
      "topics": [
        {
          "name": "animcurve_channel_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_channel_new.htm",
          "blurb": "This function can be used to create a new animation curve channel struct. A channel struct has the following variables:",
          "syntax": "animcurve_channel_new()"
        }
      ],
      "keys": []
    },
    {
      "name": "ansi_char",
      "type": "key",
      "topics": [
        {
          "name": "ansi_char",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/ansi_char.htm",
          "blurb": "This function returns a string containing the character with raw BYTE value set. This will not, and should not, be displayed, but it will save correctly to disk for use in encoding.",
          "syntax": "ansi_char(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "application_get_position",
      "type": "key",
      "topics": [
        {
          "name": "application_get_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/application_get_position.htm",
          "blurb": "When you have \"maintain aspect ratio\" ticked in the Game Options for a target platform, GameMaker will automatically set the draw position for the application surface so that it is displayed correctly centered and scaled on the given display. However if you are manipulating this surface and wish to draw it yourself, then this function gives you an easy way to find exactly where within the display or window that the surface was being drawn so that you can then\ndraw it there yourself, or align GUI images or post draw images to it.",
          "syntax": "application_get_position()"
        }
      ],
      "keys": []
    },
    {
      "name": "application_surface",
      "type": "key",
      "topics": [
        {
          "name": "application_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/application_surface.htm",
          "blurb": "This global, built-in variable can be used to access the application surface, for use in any of the surface functions. This surface is permanently available and is where the game is drawn by GameMaker.",
          "syntax": "application_surface"
        }
      ],
      "keys": []
    },
    {
      "name": "application_surface_draw_enable",
      "type": "key",
      "topics": [
        {
          "name": "application_surface_draw_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/application_surface_draw_enable.htm",
          "blurb": "You can use this function to enable or disable the automatic drawing of the application surface. By default this is enabled, but in many cases you will want to take over when and how the surface is drawn (when using shaders for example), in which case you would use this function to set it to false so that you can draw it yourself when and how you require. It's important to note that when you switch off automatic drawing and draw the application surface yourself, that you may see certain issues\nwith the alpha component of sprites and the surface itself. This is because GameMaker will draw the application surface without alpha blending when the automatic drawing is on. If you switch off automatic drawing then you need\nto handle this yourself, using the following code (for example):",
          "syntax": "application_surface_draw_enable(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "application_surface_enable",
      "type": "key",
      "topics": [
        {
          "name": "application_surface_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/application_surface_enable.htm",
          "blurb": "With this function you can enable or disable the application surface. By default the application surface is enabled and all drawing for the Draw events will be done to that and the surface drawn to the screen. However on some older devices and specific chipsets this may result in poorer performance. In those cases you can switch off drawing to the application surface and all Draw event drawing will then be done directly to the screen buffer.",
          "syntax": "application_surface_enable(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "application_surface_is_enabled",
      "type": "key",
      "topics": [
        {
          "name": "application_surface_is_enabled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/application_surface_is_enabled.htm",
          "blurb": "This function will return true if the application surface is being used for drawing, or false if the screen buffer is being used.",
          "syntax": "application_surface_is_enabled()"
        }
      ],
      "keys": []
    },
    {
      "name": "arccos",
      "type": "key",
      "topics": [
        {
          "name": "arccos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arccos.htm",
          "blurb": "Returns the inverse cosine of x, in that if cos(val)=n, arccos(n)=val, and the resulting number will be between pi and 0.",
          "syntax": "arccos(x)"
        }
      ],
      "keys": []
    },
    {
      "name": "arcsin",
      "type": "key",
      "topics": [
        {
          "name": "arcsin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arcsin.htm",
          "blurb": "Returns the inverse sine of x, in that if sin(x)=n, arcsin(n)=x, and the resulting number will be between -pi/2 and pi/2.",
          "syntax": "arcsin(x)"
        }
      ],
      "keys": []
    },
    {
      "name": "arctan",
      "type": "key",
      "topics": [
        {
          "name": "arctan",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arctan.htm",
          "blurb": "Returns the inverse tangent of x. This will accept any number as, unlike tan(), arctan() asymptotes are on the y axis so it just means you'll never get returned a number greater than pi/2 or less than -pi/2.",
          "syntax": "arctan(x)"
        }
      ],
      "keys": []
    },
    {
      "name": "arctan2",
      "type": "key",
      "topics": [
        {
          "name": "arctan2",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arctan2.htm",
          "blurb": "This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike arctan() the function arctan2(y, x) is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant.",
          "syntax": "arctan2(y, x)"
        }
      ],
      "keys": []
    },
    {
      "name": "argument_count",
      "type": "key",
      "topics": [
        {
          "name": "argument_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/argument_count.htm",
          "blurb": "This read-only variable returns the number of \"arguments\" that are passed through to a script function or a method. Normally used in conjunction with an argument array (argument[0...15]) to permit varying input arguments for a given function.",
          "syntax": "argument_count"
        }
      ],
      "keys": []
    },
    {
      "name": "argument[n]",
      "type": "key",
      "topics": [
        {
          "name": "argument",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/argument.htm",
          "blurb": "This variable holds an array that is used along with the read-only variable argument_count in script functions or methods. Each array position holds an input value for the function and is specifically for use with variable argument functions.",
          "syntax": "argument[n]\nargument1\nargument2\n...\nargument15"
        }
      ],
      "keys": []
    },
    {
      "name": "argument0 - argument15",
      "type": "key",
      "topics": [
        {
          "name": "argument",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/argument.htm",
          "blurb": "This variable holds an array that is used along with the read-only variable argument_count in script functions or methods. Each array position holds an input value for the function and is specifically for use with variable argument functions.",
          "syntax": "argument[n]\nargument1\nargument2\n...\nargument15"
        }
      ],
      "keys": []
    },
    {
      "name": "array_copy",
      "type": "key",
      "topics": [
        {
          "name": "array_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_copy.htm",
          "blurb": "With this function you can copy all or part of an array into another array at any position. You need to supply both the source and the destination arrays (both need to have been created previously), as well as a position within the source array to copy from and a position within the destination array to copy to. Finally you need to specify the length of the array (or the length of the part that you want) to copy. If the data being copied exceeds the length of the destination array, the array will be extended to accept the data.",
          "syntax": "array_copy(dest, dest_index, src, src_index, length)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_create",
      "type": "key",
      "topics": [
        {
          "name": "array_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm",
          "blurb": "With this function you can create a 1D array of a given size. You tell the function the length of the array to create, and it will return the \"handle\" for the array which you can then assign to a variable. Arrays created in this way will have each entry initialised to 0 unless you specify an (optional) initialisation value. If you do supply the extra value for initialising the array, then all indices within the new array will be set to that instead of 0, but note that the function will have a greater performance overhead in this case.",
          "syntax": "array_create(size, [value])"
        }
      ],
      "keys": []
    },
    {
      "name": "array_delete",
      "type": "key",
      "topics": [
        {
          "name": "array_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_delete.htm",
          "blurb": "With this function you can delete a value (or values) from an array at any given position. The function requires you to provide a variable that holds the array, the index (position) in the array to delete from, as well as the number of values to delete.",
          "syntax": "array_delete(variable, index, number)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_equals",
      "type": "key",
      "topics": [
        {
          "name": "array_equals",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_equals.htm",
          "blurb": "With this function you can check to see if two arrays are equal (equivalent or the same). You give the two arrays to check, and the function will return true if they are equal (either equivalent or the same) or false if they are not. Note that this is not the same as checking if two arrays are the same using ==, which will not check to see if the two arrays hold equivalent values, but only to see if the arrays are referencing the same initial array. For example:",
          "syntax": "array_equals(var1, var2)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_get",
      "type": "key",
      "topics": [
        {
          "name": "array_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_get.htm",
          "blurb": "With this function you can retrieve the value from an index in an array. The function requires you to provide a variable that holds the array and the index to get the value from within that array. Note that if the array index given is out of bounds then the game will crash with an error. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to get when you supply the array index, following this pattern:",
          "syntax": "array_get(variable, index)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_height_2d (Deprecated)",
      "type": "key",
      "topics": [
        {
          "name": "array_height_2d",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_height_2d.htm",
          "blurb": "WARNING! This function is deprecated (and replaced by array_length()) as arrays are no longer limited to only 1 or 2 dimensions, and as such this function is only supplied for support of legacy projects. All new projects should use the current way of creating and accessing multi-dimension arrays (see here for more information).",
          "syntax": "array_height_2d(array_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_insert",
      "type": "key",
      "topics": [
        {
          "name": "array_insert",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_insert.htm",
          "blurb": "With this function you can insert a value (or values) into an array at any given position. The function requires you to provide a variable that holds the array, the index (position) in the array to insert at, as well as at least one value to insert, although you can optionally provide further arguments and they will all be inserted into the array in consecutive order from the given index.",
          "syntax": "array_insert(variable, index, value, [value], [value], [etc...])"
        }
      ],
      "keys": []
    },
    {
      "name": "array_length",
      "type": "key",
      "topics": [
        {
          "name": "array_length",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_length.htm",
          "blurb": "With this function you can get the length (number of entries) of an array dimension. You supply the array index value and the function will return an integer value representing the number of entries the array contains. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to get the length of when you supply the array index, following this pattern:",
          "syntax": "array_length(array_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_length_1d (Deprecated)",
      "type": "key",
      "topics": [
        {
          "name": "array_length_1d",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_length_1d.htm",
          "blurb": "WARNING! This function is deprecated (and replaced by array_length()) as arrays are no longer limited to only 1 or 2 dimensions, and as such this function is only supplied for support of legacy projects. All new projects should use the current way of creating and accessing multi-dimension arrays (see here for more information).",
          "syntax": "array_length_1d(array_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_length_2d (Deprecated)",
      "type": "key",
      "topics": [
        {
          "name": "array_length_2d",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_length_2d.htm",
          "blurb": "WARNING! This function is deprecated (and replaced by array_length()) as arrays are no longer limited to only 1 or 2 dimensions, and as such this function is only supplied for support of legacy projects. All new projects should use the current way of creating and accessing multi-dimension arrays (see here for more information).",
          "syntax": "array_length_2d(array_index, n)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_pop",
      "type": "key",
      "topics": [
        {
          "name": "array_pop",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_pop.htm",
          "blurb": "This function will remove the last element in the given array, and return its value. If the array is empty, undefined is returned.",
          "syntax": "array_pop(array)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_push",
      "type": "key",
      "topics": [
        {
          "name": "array_push",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_push.htm",
          "blurb": "With this function you can push a value (or values) onto the end of an array without having to know the length of the array. The function requires you to provide a variable that holds the array as well as at least one value to push, although you can optionally provide further arguments and they will all be pushed onto the array in consecutive order.",
          "syntax": "array_push(variable, value, [value], [value], [etc...])"
        }
      ],
      "keys": []
    },
    {
      "name": "array_resize",
      "type": "key",
      "topics": [
        {
          "name": "array_resize",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_resize.htm",
          "blurb": "With this function you can resize an existing array dimension to a new size. You supply the array to be resized as well as the new number of indices for the array, and the function will resize that array. Note that this function is designed for resizing an array down to a smaller length as you can resize up by simply setting a new index in the array. That said, if you do use it to size up an array, any new indices will be set to the default value of 0.",
          "syntax": "array_resize(array_index, new_size)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_set",
      "type": "key",
      "topics": [
        {
          "name": "array_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_set.htm",
          "blurb": "With this function you can set the value of an index in an array to a value. The function requires you to provide a variable that holds the array as well as the index to set and the value to set it to. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to set when you supply the array index, following this pattern:",
          "syntax": "array_set(variable, index, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "array_sort",
      "type": "key",
      "topics": [
        {
          "name": "array_sort",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/array_sort.htm",
          "blurb": "With this function you can sort an array in ascending order or descending order or using a custom function to define the sort order. The function requires you to provide the array to sort, and then either of the following:",
          "syntax": "array_sort(variable, sorttype_or_function)"
        }
      ],
      "keys": []
    },
    {
      "name": "Arrays",
      "type": "key",
      "topics": [
        {
          "name": "Arrays",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Arrays.htm",
          "blurb": "Arrays can be extremely useful and are an essential part of making games. It is essentially a type of variable that can hold multiple values as a \"list\" -- consider the following code:"
        }
      ],
      "keys": []
    },
    {
      "name": "Asset Browser",
      "type": "key",
      "topics": [
        {
          "name": "The Asset Browser",
          "type": "topic",
          "url": "Introduction/The_Asset_Browser.htm",
          "blurb": "The core of your game will be created from assets added to the Asset Browser located by default on the right of the IDE. This is where you can add everything that your game requires to run, including a game room, sprites, objects, paths and a number of other things. A basic game in GameMaker will require a room to run in (new projects will always be created with a room asset already created), and usually at least one object and a sprite, although you'll likely use a lot more!"
        }
      ],
      "keys": []
    },
    {
      "name": "Asset Editors",
      "type": "key",
      "topics": [
        {
          "name": "The Asset Editors",
          "type": "topic",
          "url": "The_Asset_Editors/The_Asset_Editors.htm",
          "blurb": "GameMaker has a number of different editors which you can use to add, remove and edit the different assets that your game requires. In the course of development you will need to use some - or even all - of these editors, and remembering what everything does can sometimes be a bit daunting. To help out, you can find each of the different editors listed below, and clicking any of them will take you to a page that explains in detail what it is and how to use it."
        }
      ],
      "keys": []
    },
    {
      "name": "asset_add_tags",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_animationcurve",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_clear_tags",
      "type": "key",
      "topics": [
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_font",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_get_index",
      "type": "key",
      "topics": [
        {
          "name": "asset_get_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_index.htm",
          "blurb": "You can use this function to get the unique identifying index for a game asset from its name. If the asset is not found, the function will return a value of -1, otherwise it will return the unique index id for the asset being checked. This id can then be used in other functions as you would any other index value, like the sprite_index or the path_index, for example. Please note that although this function can be used to reference assets from strings (see example below) you should always make sure that the asset exists before using it otherwise you may get errors that will crash your game.",
          "syntax": "asset_get_index(name)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_get_tags",
      "type": "key",
      "topics": [
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_get_type",
      "type": "key",
      "topics": [
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_has_any_tag",
      "type": "key",
      "topics": [
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_has_tags",
      "type": "key",
      "topics": [
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_object",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_path",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_remove_tags",
      "type": "key",
      "topics": [
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_room",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_script",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_sequence",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_shader",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_sound",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_sprite",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_tiles",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_timeline",
      "type": "key",
      "topics": [
        {
          "name": "asset_add_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm",
          "blurb": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_add_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_clear_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm",
          "blurb": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_clear_tags(name,[asset_type])"
        },
        {
          "name": "asset_get_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm",
          "blurb": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_get_tags(name_or_index, [asset_type])"
        },
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        },
        {
          "name": "asset_has_any_tag",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_any_tag.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_any_tag(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_has_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm",
          "blurb": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_has_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "asset_remove_tags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm",
          "blurb": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
          "syntax": "asset_remove_tags(name_or_index, tags, [asset_type])"
        },
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "asset_unknown",
      "type": "key",
      "topics": [
        {
          "name": "asset_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
          "blurb": "With this function you can get the type of asset being referenced from its name (a string). One of the constants listed below will be returned.",
          "syntax": "asset_get_type(name)"
        }
      ],
      "keys": []
    },
    {
      "name": "async_load",
      "type": "key",
      "topics": [
        {
          "name": "async_load",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm",
          "blurb": "This variable is global in scope and is used to hold a DS map when used in the Asynchronous Events, and -1 at all other times. The actual contents of the DS map will depend on the type of asynchronous event callback, as well as the function that was used to trigger the event, so refer to the individual pages for those events for full details of all the possible DS map contents.",
          "syntax": "async_load"
        }
      ],
      "keys": []
    },
    {
      "name": "Audio Groups",
      "type": "key",
      "topics": [
        {
          "name": "Audio Groups",
          "type": "topic",
          "url": "Settings/Audio_Groups.htm",
          "blurb": "The Audio Group Manager is available from the Tools Menu in the IDE. Here you can add, delete and rename Audio Groups, as well as set their platform export options. GameMaker permits you to assign each of the audio resources (sound effects and music) to different audio groups\nto try and optimise the number of sounds that are being played at any one time, as well as give you further control over what platforms they are exported to."
        }
      ],
      "keys": []
    },
    {
      "name": "audio_3D",
      "type": "key",
      "topics": [
        {
          "name": "audio_create_play_queue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_play_queue.htm",
          "blurb": "This function prepares a buffer queue for audio. You pass data format (only buffer_u8 or buffer_s16 are currently supported), the sample rate (which can be between 1000hz and 48000hz), and the channels that the audio requires from one of the constants listed below:",
          "syntax": "audio_create_play_queue(queueFormat, queueRate, queueChannels)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_channel_num",
      "type": "key",
      "topics": [
        {
          "name": "audio_channel_num",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_channel_num.htm",
          "blurb": "With this function you can set how many audio channels are available for playing audio in GameMaker. What this basically means is that you give the number of simultaneous sounds that can be played at any one time, and if the number exceeds the amount, those sounds with a lower priority are stopped to free up a channel for the sounds with a higher priority. You can use this function to optimise your game for devices as the lower the number of channels for audio the better the performance, but bear in mind that this may also cause noticeable cut off of certain sounds if many are played at once.",
          "syntax": "audio_channel_num(num)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_create_buffer_sound",
      "type": "key",
      "topics": [
        {
          "name": "audio_create_buffer_sound",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_buffer_sound.htm",
          "blurb": "With this function you can create a new sound from the contents of a buffer.",
          "syntax": "audio_create_buffer_sound(bufferId, bufferFormat, bufferRate, bufferOffset, bufferLength, bufferChannels)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_create_play_queue",
      "type": "key",
      "topics": [
        {
          "name": "audio_create_play_queue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_play_queue.htm",
          "blurb": "This function prepares a buffer queue for audio. You pass data format (only buffer_u8 or buffer_s16 are currently supported), the sample rate (which can be between 1000hz and 48000hz), and the channels that the audio requires from one of the constants listed below:",
          "syntax": "audio_create_play_queue(queueFormat, queueRate, queueChannels)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_create_stream",
      "type": "key",
      "topics": [
        {
          "name": "audio_create_stream",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_create_stream.htm",
          "blurb": "With this function you can create a new sound index which can then be used in the regular audio functions to stream audio directly from an external OGG file source. The function requires the filename (which can be an included file, for example) and will return the new sound index for use. Note that after you no longer need the sound you should call the function audio_destroy_stream() with the sound index to remove it from memory otherwise you may get a memory leak which will slow down and eventually crash your game.",
          "syntax": "audio_create_stream(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_create_sync_group",
      "type": "key",
      "topics": [
        {
          "name": "audio_create_sync_group",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_create_sync_group.htm",
          "blurb": "Creates a sync group and returns a unique ID value for it which should then be used in all further audio function calls for this group. If you want the group to loop then pass in true, otherwise pass in false, but note that if you want them to loop, all the tracks added later need to be the same length. Note that when you create a sync group, you will need to free the memory and sounds associated with it when not in use using the audio_destroy_sync_group() function - for example, in the Room End or Destroy events.",
          "syntax": "audio_create_sync_group(loop)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_debug",
      "type": "key",
      "topics": [
        {
          "name": "audio_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_debug.htm",
          "blurb": "This function can be used to display debug information about the audio system, with true switching it on and false to switch it off. When you are debugging audio in this way, the overlay will show the following information:",
          "syntax": "audio_debug(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_destroy_stream",
      "type": "key",
      "topics": [
        {
          "name": "audio_destroy_stream",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_destroy_stream.htm",
          "blurb": "If you have previously created an audio stream from a file using the function audio_create_stream() and no longer need that sound, you can call this function to delete it from memory. Any further calls to the sound index after it has been destroyed will give an error. It should be noted that this will free up the stream but on the target platform this may not show up in a memory manager. This is because GameMaker pools memory resources to prevent memory allocation overhead, and so the memory will remain allocated until required for something else or re-used for a new stream.",
          "syntax": "audio_destroy_stream(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_destroy_sync_group",
      "type": "key",
      "topics": [
        {
          "name": "audio_destroy_sync_group",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_destroy_sync_group.htm",
          "blurb": "Audio sync groups need to be destroyed when not in use to free up the memory and sound resources associated with them using this function. It takes the group index as returned when the group was created using the function audio_create_sync_group(), and frees all resources used by the group.",
          "syntax": "audio_destroy_sync_group(group_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_create",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_create.htm",
          "blurb": "This function creates a new audio emitter and returns the index for it. This index should be stored in a variable for all further functions that relate to this emitter, and then when it is no longer needed it should be removed from memory using the function audio_emitter_free() to prevent memory leaks which may eventually crash your game.",
          "syntax": "audio_emitter_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_exists",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_exists.htm",
          "blurb": "This function returns whether an audio emitter exists (true) or not (false). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent indices.",
          "syntax": "audio_emitter_exists(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_falloff",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_falloff",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_falloff.htm",
          "blurb": "With this function you can set the fall-off distance for an emitter. This is the distance from the listener the emitter has to be before the sound will have \"fallen off\" to a volume of 0. The default value for this is 100, but beware of setting this to any value lower than 1 as that will make any sound played through this emitter inaudible to the listener, however any other value will cause the sound to fade away the further that the emitter is from the listener.",
          "syntax": "audio_emitter_falloff(emitter, falloff_ref, falloff_max, falloff_factor)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_free",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_free",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_free.htm",
          "blurb": "With this function you can remove the given emitter from memory. This should always be done whenever the emitter is not going to be used further in the room or the game, ie: in the Destroy Event of the instance or in the Room End Event, otherwise you may end up with a memory leak that will slow down and eventually crash your game.",
          "syntax": "audio_emitter_free(emitter)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_gain",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_gain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_gain.htm",
          "blurb": "This function sets the maximum gain (volume) for the sound. The perceived volume for a sound can change depending on the fall-off value and the position it has relative to the listener, but by setting the gain with this function, the full volume will never exceed the specified gain value. The image below illustrates how gain affects the volume of the emitter when fall-off is greater than 0:",
          "syntax": "audio_emitter_gain(emitter, gain)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_get_gain",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_get_gain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_gain.htm",
          "blurb": "This function returns the current gain (volume) set for the given audio emitter, normally between 0 and 1, where 0 is silent and 1 is full volume. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
          "syntax": "audio_emitter_get_gain(emitter)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_get_listener_mask",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_get_listener_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_listener_mask.htm",
          "blurb": "This function will return the bit-mask data that defines which audio listeners an emitter should play sounds from. For more information see the section on Audio Listeners.",
          "syntax": "audio_emitter_get_listener_mask(emitterID)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_get_pitch",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_get_pitch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_pitch.htm",
          "blurb": "This function returns the current pitch value set for the given audio emitter.",
          "syntax": "audio_emitter_get_pitch(emitter)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_get_vx",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_get_vx",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_vx.htm",
          "blurb": "This function returns the current velocity along the x axis for the given audio emitter.",
          "syntax": "audio_emitter_get_vx(emitter)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_get_vy",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_get_vy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_vy.htm",
          "blurb": "This function returns the current velocity along the y axis for the given audio emitter.",
          "syntax": "audio_emitter_get_vy(emitter)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_get_vz",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_get_vz",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_vz.htm",
          "blurb": "This function returns the current velocity along the z axis for the given audio emitter.",
          "syntax": "audio_emitter_get_vz(emitter)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_get_x",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_get_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_x.htm",
          "blurb": "This function returns the current x position of the given audio emitter.",
          "syntax": "audio_emitter_get_x(emitter)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_get_y",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_get_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_y.htm",
          "blurb": "This function returns the current y position of the given audio emitter.",
          "syntax": "audio_emitter_get_y(emitter)"
        },
        {
          "name": "audio_emitter_get_z",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_z.htm",
          "blurb": "This function returns the current z position of the given audio emitter.",
          "syntax": "audio_emitter_get_z(emitter)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_pitch",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_pitch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_pitch.htm",
          "blurb": "This function can be used to change the pitch of all sounds emitted from the given emitter. It is a pitch multiplier, in that the input value multiplies the current pitch by that amount, so the default value of 1 is no pitch change, while a value of less than 1 will lower the pitch and greater than 1 will raise the pitch. It is best to use small increments for this function as any value under 0 or over 5 may not be audible anyway.",
          "syntax": "audio_emitter_pitch(emitter, pitch)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_position",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_position.htm",
          "blurb": "With this function you can change the position of an audio emitter within the 3D audio space. The position will affect the sound in different ways depending on where the listener is positioned within the audio space too (default position is (0, 0, 0). See audio_listener_position() for more information), so for example if the emitter position is set to (100, 0, 0) and the current listener is at (200, 0, 0) the audio streamed from the emitter will appear to be on the left of the audio field. The image below shows a visual representation of emitters and their relative positions to the listener:",
          "syntax": "audio_emitter_position(emitter, x, y, z)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_set_listener_mask",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_set_listener_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_set_listener_mask.htm",
          "blurb": "This function can be used to set the the bit-mask for an emitter so that all sounds played through the emitter will play only from those listeners specified. You can create a bit-mask by using the audio_get_listener_info() and then using the bitwise or (\"|\") to create a custom mask with those listeners that you require the sound to play from, and then apply this custom mask to the emitter. This mask will over-ride the default mask or that which you may have set using the function audio_set_listener_mask().",
          "syntax": "audio_emitter_set_listener_mask(emitterID, mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_emitter_velocity",
      "type": "key",
      "topics": [
        {
          "name": "audio_emitter_velocity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_velocity.htm",
          "blurb": "This function can be used to give an emitter Doppler effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the emitter itself is not ever going to move you would normally not need to set these values, but, for example, if you are making a scrolling shooter game where the enemies come from the right and scroll to the left, you would set this to have a velocity of (hspeed, 0, 0) in the create event of the enemies (and update the emitter of each instance in the step event using audio_emitter_position()) to give any sounds emitted by the enemy instances the correct Doppler as they pass the player instance (which in turn would be using the function audio_listener_position() to set the listener to the correct position).",
          "syntax": "audio_emitter_velocity(emitter, vx, vy, vz)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_exists",
      "type": "key",
      "topics": [
        {
          "name": "audio_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_exists.htm",
          "blurb": "This function returns whether a sound exists (true) or not (false). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent asset indices. The sound to check can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset.",
          "syntax": "audio_exists(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_falloff_exponent_distance",
      "type": "key",
      "topics": [
        {
          "name": "audio_falloff_set_model",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
          "blurb": "To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at().",
          "syntax": "audio_falloff_set_model(model)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_falloff_exponent_distance_clamped",
      "type": "key",
      "topics": [
        {
          "name": "audio_falloff_set_model",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
          "blurb": "To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at().",
          "syntax": "audio_falloff_set_model(model)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_falloff_inverse_distance",
      "type": "key",
      "topics": [
        {
          "name": "audio_falloff_set_model",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
          "blurb": "To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at().",
          "syntax": "audio_falloff_set_model(model)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_falloff_inverse_distance_clamped",
      "type": "key",
      "topics": [
        {
          "name": "audio_falloff_set_model",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
          "blurb": "To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at().",
          "syntax": "audio_falloff_set_model(model)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_falloff_linear_distance",
      "type": "key",
      "topics": [
        {
          "name": "audio_falloff_set_model",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
          "blurb": "To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at().",
          "syntax": "audio_falloff_set_model(model)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_falloff_linear_distance_clamped",
      "type": "key",
      "topics": [
        {
          "name": "audio_falloff_set_model",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
          "blurb": "To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at().",
          "syntax": "audio_falloff_set_model(model)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_falloff_none",
      "type": "key",
      "topics": [
        {
          "name": "audio_falloff_set_model",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
          "blurb": "To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at().",
          "syntax": "audio_falloff_set_model(model)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_falloff_set_model",
      "type": "key",
      "topics": [
        {
          "name": "audio_falloff_set_model",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
          "blurb": "To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at().",
          "syntax": "audio_falloff_set_model(model)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_free_buffer_sound",
      "type": "key",
      "topics": [
        {
          "name": "audio_free_buffer_sound",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_free_buffer_sound.htm",
          "blurb": "With this function you can free up the pointer index value associated with the sound ID. Freed sounds will not be available for playing, and if multiple instances of the sound are being played they will all be stopped. Note that before you can delete the buffer itself, you must first free all sound ID's associated with it.",
          "syntax": "audio_free_buffer_sound(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_free_play_queue",
      "type": "key",
      "topics": [
        {
          "name": "audio_free_play_queue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_free_play_queue.htm",
          "blurb": "This function is used to free up the memory associated with the given audio queue. The queue index is the value returned when you created the queue using the function audio_create_play_queue(), and this function should be called when the queue is no longer required to prevent memory leaks. Freeing the queue will stop any sound that is be playing, and you cannot delete the buffer that a sound is being streamed from until the queue it is assigned to has been freed. This function will trigger an Audio Playback Asynchronous Event, and in this event a special DS map will be created in the variable async_load with the following key/value pairs:",
          "syntax": "audio_free_play_queue(queueIndex)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_get_listener_count",
      "type": "key",
      "topics": [
        {
          "name": "audio_get_listener_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_get_listener_count.htm",
          "blurb": "Certain target platforms permit more than one listener, so it is important that you know how many the target has before changing or using different listeners. This function will return the number of listeners available.",
          "syntax": "audio_get_listener_count()"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_get_listener_info",
      "type": "key",
      "topics": [
        {
          "name": "audio_get_listener_info",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_get_listener_info.htm",
          "blurb": "This function will create a DS map and populate it with information for the given listener.",
          "syntax": "audio_get_listener_info(num)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_get_listener_mask",
      "type": "key",
      "topics": [
        {
          "name": "audio_get_listener_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_get_listener_mask.htm",
          "blurb": "This function will return the bit-mask data that defines the current default (global) mask for the audio listeners.",
          "syntax": "audio_get_listener_mask()"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_get_master_gain",
      "type": "key",
      "topics": [
        {
          "name": "audio_get_master_gain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_get_master_gain.htm",
          "blurb": "With this function you can get the absolute value for the global volume of all sounds and music for a specific listener. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform. The gain value returned is based on a linear scale from 0 (silent) to 1 (full volume). Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
          "syntax": "audio_get_master_gain(listenerIndex)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_get_name",
      "type": "key",
      "topics": [
        {
          "name": "audio_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_get_name.htm",
          "blurb": "This function will return the name of a given audio resource as a string. The \"index\" value can be that of the resource itself (as seen in the Asset Browser) or the unique ID value that is given when you play the sound using, for example, audio_play_sound(). Note that the string returned is not the same as the resource ID and cannot be used to access the resource itself, so should only be used for displaying or error checking.",
          "syntax": "audio_get_name(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_get_recorder_count",
      "type": "key",
      "topics": [
        {
          "name": "audio_get_recorder_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_get_recorder_count.htm",
          "blurb": "This function will return the number of audio recording sources (like microphones, etc...) currently available to your game. So, if you have a return value of, for example, four, then you will have audio input on the sources 0, 1, 2 and 3, with one of these values being that which you use to start recording from using the function audio_start_recording(). This value can change at any time as people plug/unplug microphones or other input sources to the device. Note that you can use the function audio_get_recorder_info() to get information on each device connected.",
          "syntax": "audio_get_recorder_count()"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_get_recorder_info",
      "type": "key",
      "topics": [
        {
          "name": "audio_get_recorder_info",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_get_recorder_info.htm",
          "blurb": "This function will return a DS Map with information about the given recorder source index. You can find out how many recorder sources are available using the function audio_get_recorder_count(), and the map returned will contain the following key/value pairs:",
          "syntax": "audio_get_recorder_info(recorder_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_get_type",
      "type": "key",
      "topics": [
        {
          "name": "audio_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_get_type.htm",
          "blurb": "When adding audio to GameMaker it can be either streamed or in memory. If you need to know whether a given sound index is for streamed audio or not you can use this function which will return 1 for streamed, 0 for sound in memory, and -1 if there is any error or the index does not point to a valid sound resource.",
          "syntax": "audio_get_type(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_group_is_loaded",
      "type": "key",
      "topics": [
        {
          "name": "audio_group_is_loaded",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_is_loaded.htm",
          "blurb": "This function will check a specific audio group to see if it has been loaded into memory, ready for use.",
          "syntax": "audio_group_is_loaded(groupID)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_group_load",
      "type": "key",
      "topics": [
        {
          "name": "audio_group_load",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_load.htm",
          "blurb": "This function will load all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return true if loading is initiated and false if the group ID is invalid, or it has already been flagged for loading. The function is asynchronous so your game will continue to run while the audio is loaded in the background. This means that it will also trigger an Asynchronous Load/Save Event to inform you that the whole group has been loaded into memory and the sounds can now be used.",
          "syntax": "audio_group_load(groupID)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_group_load_progress",
      "type": "key",
      "topics": [
        {
          "name": "audio_group_load_progress",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_load_progress.htm",
          "blurb": "This function will check the loading progress for an audio group and return an (approximate) value between 0 and 100.",
          "syntax": "audio_group_load_progress(groupID)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_group_name",
      "type": "key",
      "topics": [
        {
          "name": "audio_group_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_name.htm",
          "blurb": "This function will return a string containing the name of the given audio group for displaying or checking. When you define an audio group in the Game Options, you give it a unique \"name\" which is really a constant to use as an ID value for the group. All this function does is take the ID and return a string of the ID name you gave.",
          "syntax": "audio_group_name(groupID)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_group_set_gain",
      "type": "key",
      "topics": [
        {
          "name": "audio_group_set_gain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_set_gain.htm",
          "blurb": "With this function you can fade a group of sounds in or out over a given length of time, or it can be used to set the group gain instantly.",
          "syntax": "audio_group_set_gain(groupID, volume, time)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_group_stop_all",
      "type": "key",
      "topics": [
        {
          "name": "audio_group_stop_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_stop_all.htm",
          "blurb": "This function will stop all sounds from the given audio group that are currently playing.",
          "syntax": "audio_group_stop_all(groupID)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_group_unload",
      "type": "key",
      "topics": [
        {
          "name": "audio_group_unload",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_unload.htm",
          "blurb": "This function will unload all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return true if unloading is initiated and false if the group ID is invalid, or it has already been flagged for unloading. Note that any audio currently being played when this function is called will be stopped.",
          "syntax": "audio_group_unload(groupID)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_is_paused",
      "type": "key",
      "topics": [
        {
          "name": "audio_is_paused",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_is_paused.htm",
          "blurb": "This function will check the given sound to see if it is currently paused. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be checked and if any of them are paused the function will return true otherwise it will return false.",
          "syntax": "audio_is_paused(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_is_playing",
      "type": "key",
      "topics": [
        {
          "name": "audio_is_playing",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_is_playing.htm",
          "blurb": "This function will check the given sound to see if it is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be checked and if any of them are playing the function will return true otherwise it will return false. Note that this function will still return true if the sound being checked has previously been paused using the audio_pause_sound() function.",
          "syntax": "audio_is_playing(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_listener_get_data",
      "type": "key",
      "topics": [
        {
          "name": "audio_listener_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_get_data.htm",
          "blurb": "This function will create a DS map and populate it with the position, velocity and orientation values for the given listener. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform. If you provide an incorrect listener index then the function will return -1.",
          "syntax": "audio_listener_get_data(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_listener_orientation",
      "type": "key",
      "topics": [
        {
          "name": "audio_listener_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_orientation.htm",
          "blurb": "With this function you can change the orientation of the listener within the 3D audio space. The look at direction and up direction are based on the vectors that are resolved from the given relative x, y and z positions, and default to (0, 0, 1) for the look at direction and (0, 1, 0) for the up direction, as shown in the illustration below:",
          "syntax": "audio_listener_orientation(lookat_x, lookat_y, lookat_z, up_x, up_y, up_z)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_listener_position",
      "type": "key",
      "topics": [
        {
          "name": "audio_listener_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_position.htm",
          "blurb": "With this function you can change the position of the listener within the 3D audio space. The example image below shows the default position for the listener in the audio space:",
          "syntax": "audio_listener_position(x, y, z)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_listener_set_orientation",
      "type": "key",
      "topics": [
        {
          "name": "audio_listener_set_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_set_orientation.htm",
          "blurb": "With this function you can change the orientation of the given listener within the 3D audio space. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform.",
          "syntax": "audio_listener_set_orientation(index, lookat_x, lookat_y, lookat_z, up_x, up_y, up_z)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_listener_set_position",
      "type": "key",
      "topics": [
        {
          "name": "audio_listener_set_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_set_position.htm",
          "blurb": "With this function you can change the position of a given listener within the 3D audio space. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform. The example image below shows the default position for the listener in the audio space:",
          "syntax": "audio_listener_set_position(index, x, y, z)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_listener_set_velocity",
      "type": "key",
      "topics": [
        {
          "name": "audio_listener_set_velocity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_set_velocity.htm",
          "blurb": "This function can be used to give the given listener Doppler effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform.",
          "syntax": "audio_listener_set_velocity(index, x, y, z)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_listener_velocity",
      "type": "key",
      "topics": [
        {
          "name": "audio_listener_velocity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_velocity.htm",
          "blurb": "This function can be used to give the listener Doppler effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the listener itself is not ever going to move, or the movement is not a constant motion, you would normally not need to set these values, but, for example, if you are making a scrolling game where the player has a constant bottom to top movement and the enemies a constant top to bottom movement, you would set the listener and emitter velocities (for emitters you would use audio_emitter_velocity()) to the appropriate vectors to simulate the correct Doppler effect as they move past the player instance.",
          "syntax": "audio_listener_velocity(vx, vy, vz)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_master_gain",
      "type": "key",
      "topics": [
        {
          "name": "audio_master_gain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_master_gain.htm",
          "blurb": "With this function you can set the absolute value for the global volume of all sounds and music. It is based on a linear scale from 0 (silent) to any value greater than 0, although normally you'd consider the maximum volume as 1. Anything over 1 can be used but, depending on the sound used and the platform being compiled to, you may get distortion or clipping when the sound is played back. This function will affect the relative volume of all sounds and music played from within your game.",
          "syntax": "audio_master_gain(gain)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_mono",
      "type": "key",
      "topics": [
        {
          "name": "audio_create_play_queue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_play_queue.htm",
          "blurb": "This function prepares a buffer queue for audio. You pass data format (only buffer_u8 or buffer_s16 are currently supported), the sample rate (which can be between 1000hz and 48000hz), and the channels that the audio requires from one of the constants listed below:",
          "syntax": "audio_create_play_queue(queueFormat, queueRate, queueChannels)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_pause_all",
      "type": "key",
      "topics": [
        {
          "name": "audio_pause_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_pause_all.htm",
          "blurb": "With this function you can pause all sounds that are currently playing.",
          "syntax": "audio_pause_all()"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_pause_sound",
      "type": "key",
      "topics": [
        {
          "name": "audio_pause_sound",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_pause_sound.htm",
          "blurb": "With this function you can pause any sound that is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be paused.",
          "syntax": "audio_pause_sound(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_pause_sync_group",
      "type": "key",
      "topics": [
        {
          "name": "audio_pause_sync_group",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_pause_sync_group.htm",
          "blurb": "his function will pause the given sync group if it is playing, with the group index being the value returned when you created the group using the function audio_create_sync_group(). This does not stop the sound, and calling audio_resume_sync_group(), will start it playing from the same position it was paused at again.",
          "syntax": "audio_pause_sync_group(group_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_play_in_sync_group",
      "type": "key",
      "topics": [
        {
          "name": "audio_play_in_sync_group",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_play_in_sync_group.htm",
          "blurb": "With this function you can assign a sound to a previously created sync group. The group index is the value returned when you created the group using the function audio_create_sync_group(), and the sound index is the index of any compressed sound (*.ogg or *.mp3) from the Asset Browser. This function only adds the sound to the group, but it does not play the sound. The return value will be >= 0 if it succeeds and -1 if it fails, where a successful value indicates the sound's order in the sync group (so 0 would be the first sound added, 1 would be the second, etc...).",
          "syntax": "audio_play_in_sync_group(group_index, sound_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_play_sound",
      "type": "key",
      "topics": [
        {
          "name": "audio_play_sound",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_play_sound.htm",
          "blurb": "With this function you can play any sound asset in your game.",
          "syntax": "audio_play_sound(index, priority, loop, [gain], [offset], [pitch], [listener_mask])"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_play_sound_at",
      "type": "key",
      "topics": [
        {
          "name": "audio_play_sound_at",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_play_sound_at.htm",
          "blurb": "With this function you can play any sound asset at a given position within the audio space.",
          "syntax": "audio_play_sound_at(index, x, y, z, falloff_ref, falloff_max, falloff_factor, loop, priority, [gain], [offset], [pitch], [listener_mask])"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_play_sound_on",
      "type": "key",
      "topics": [
        {
          "name": "audio_play_sound_on",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_play_sound_on.htm",
          "blurb": "With this function you can play any sound resource through an emitter, with any changes to the emitter's gain, position, pitch or velocity affecting how the user hears the final sound being played.",
          "syntax": "audio_play_sound_on(emitter, sound, loop, priority, [gain], [offset], [pitch], [listener_mask])"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_queue_sound",
      "type": "key",
      "topics": [
        {
          "name": "audio_queue_sound",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_queue_sound.htm",
          "blurb": "This function will add the data from a buffer into the audio queue that you previously created using the function audio_create_play_queue(). You specify the queue index to add to, and the buffer ID to get the data from as well as the position (offset) within the buffer and the number of bytes to add. Once you have added audio from a buffer to a queue, the buffer cannot be deleted until you have first freed the queue using the function audio_free_play_queue(), and the buffer properties should match those of the the queue that you are adding the sound to.",
          "syntax": "audio_queue_sound(queueIndex, bufferId, bufferOffset, bufferLength)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_resume_all",
      "type": "key",
      "topics": [
        {
          "name": "audio_resume_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_resume_all.htm",
          "blurb": "With this function you can resume all sounds that have been paused previously.",
          "syntax": "audio_resume_all()"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_resume_sound",
      "type": "key",
      "topics": [
        {
          "name": "audio_resume_sound",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_resume_sound.htm",
          "blurb": "With this function you can resume any sound that is currently paused (after using the function audio_pause_sound()). The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be re-started.",
          "syntax": "audio_resume_sound(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_resume_sync_group",
      "type": "key",
      "topics": [
        {
          "name": "audio_resume_sync_group",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_resume_sync_group.htm",
          "blurb": "This function will resume the given sync group if it is playing and has previously been paused (using the function audio_pause_sync_group). The group index is the value returned when you created the group using the function audio_create_sync_group().",
          "syntax": "audio_resume_sync_group(group_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_set_listener_mask",
      "type": "key",
      "topics": [
        {
          "name": "audio_set_listener_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_set_listener_mask.htm",
          "blurb": "When using multiple listeners on a system, you can set the bit-mask for a sound and have it heard from the flagged listener only. However, you can also set the global mask using this function and all sounds played normally will be heard from the listeners flagged by this mask, without the need to set the mask for each sound individually.",
          "syntax": "audio_set_listener_mask(mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_set_master_gain",
      "type": "key",
      "topics": [
        {
          "name": "audio_set_master_gain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_set_master_gain.htm",
          "blurb": "With this function you can set the absolute value for the global volume of all sounds and music for a specific listener. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform. The gain value is based on a linear scale from 0 (silent) to 1 (full volume) and will affect the relative volume of all sounds and music played from within your game through that listener.",
          "syntax": "audio_set_master_gain(listenerIndex, gain)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_gain",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_gain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_gain.htm",
          "blurb": "With this function you can fade a sound in or out over a given length of time, or it can be used to set the sound gain instantly.",
          "syntax": "audio_sound_gain(index, volume, time)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_get_gain",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_get_gain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_get_gain.htm",
          "blurb": "This function will return the current gain value for the given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions, or an actual sound asset from the Asset Browser. Gain is usually calculated as a value from 0 to 1, but on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
          "syntax": "audio_sound_get_gain(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_get_listener_mask",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_get_listener_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_get_listener_mask.htm",
          "blurb": "This function will return the bit-mask data that defines which audio listeners a sound should be played from. See the section on Audio Listeners for more information.",
          "syntax": "audio_sound_get_listener_mask(soundID)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_get_pitch",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_get_pitch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_get_pitch.htm",
          "blurb": "This function can be used to get the get pitch of a given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions, or an actual sound asset from the Asset Browser.",
          "syntax": "audio_sound_get_pitch(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_get_track_position",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_get_track_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_get_track_position.htm",
          "blurb": "This function will get the position (in seconds) within the sound file for the sound to play from. The sound can only be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions).",
          "syntax": "audio_sound_get_track_position(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_is_playable",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_is_playable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_is_playable.htm",
          "blurb": "This function can be used to check if the given sound index can be played currently. This is needed due to the different ways streamed and unstreamed sound playback is handled on the HTML5 target platform, and will return true if the sound can be played and false if it can't. Note that on all other platforms other than HTML5, the function will always return true.",
          "syntax": "audio_sound_is_playable(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_length",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_length",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_length.htm",
          "blurb": "This function will return the length of the given sound in seconds. The sound can either be a referenced from index for an individual sound being played which has been stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions, or an actual sound asset from the Asset Browser.",
          "syntax": "audio_sound_length(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_pitch",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_pitch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_pitch.htm",
          "blurb": "This function can be used to change the pitch of a given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions, or an actual sound asset from the Asset Browser. If it is an index of a playing sound, then only that instance will be changed, however when using a sound asset from the Asset Browser, all instances of that sound asset being played will be changed.",
          "syntax": "audio_sound_pitch(index, pitch)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_set_listener_mask",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_set_listener_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_set_listener_mask.htm",
          "blurb": "This function can be used to set the the bit-mask for a sound so that it will play only from those listeners specified. You can create a bit-mask by using the audio_get_listener_info() and then using the bitwise or (\"|\") to create a custom mask with those listeners that you require the sound to play from, and then apply this custom mask to the sound after you have played it. This mask will over-ride the default mask or that which you may have set using the function audio_set_listener_mask().",
          "syntax": "audio_sound_set_listener_mask(soundID, mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sound_set_track_position",
      "type": "key",
      "topics": [
        {
          "name": "audio_sound_set_track_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_set_track_position.htm",
          "blurb": "This function will set the position (in seconds) for the given sound ID or asset.",
          "syntax": "audio_sound_set_track_position(index, time)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_start_recording",
      "type": "key",
      "topics": [
        {
          "name": "audio_start_recording",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_start_recording.htm",
          "blurb": "This function will start recording audio from the recorder source indexed. You can get the number of recorder sources using the function audio_get_recorder_count(), and once you start recording the audio will be stored in a temporary buffer and start triggering an Audio Recording Asynchronous Event. This event is triggered every step that recording takes place and will create the special DS map in the variable async_load with the following key/value pairs:",
          "syntax": "audio_start_recording(recorder_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_start_sync_group",
      "type": "key",
      "topics": [
        {
          "name": "audio_start_sync_group",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_start_sync_group.htm",
          "blurb": "With this function you can start playing a previously created sync group. You need to supply the group index which is the value returned when you created the group using the function audio_create_sync_group().",
          "syntax": "audio_start_sync_group(group_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_stereo",
      "type": "key",
      "topics": [
        {
          "name": "audio_create_play_queue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_play_queue.htm",
          "blurb": "This function prepares a buffer queue for audio. You pass data format (only buffer_u8 or buffer_s16 are currently supported), the sample rate (which can be between 1000hz and 48000hz), and the channels that the audio requires from one of the constants listed below:",
          "syntax": "audio_create_play_queue(queueFormat, queueRate, queueChannels)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_stop_all",
      "type": "key",
      "topics": [
        {
          "name": "audio_stop_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_stop_all.htm",
          "blurb": "This function will stop all sounds that are currently playing.",
          "syntax": "audio_stop_all()"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_stop_recording",
      "type": "key",
      "topics": [
        {
          "name": "audio_stop_recording",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_stop_recording.htm",
          "blurb": "This function will stop recording on the given recorder channel (the channel index is returned when you call the function audio_start_recording()). When you stop recording, no further Audio Recording Asynchronous Events will be triggered for the given recorder channel, so you would normally use this function in the actual asynchronous event to ensure that you have captured all the data.",
          "syntax": "audio_stop_recording(channel_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_stop_sound",
      "type": "key",
      "topics": [
        {
          "name": "audio_stop_sound",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_stop_sound.htm",
          "blurb": "This function will stop the given sound if it is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be stopped.",
          "syntax": "audio_stop_sound(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_stop_sync_group",
      "type": "key",
      "topics": [
        {
          "name": "audio_stop_sync_group",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_stop_sync_group.htm",
          "blurb": "This function will stop the given sync group if it is playing, with the group index being the value returned when you created the group using the function audio_create_sync_group().",
          "syntax": "audio_stop_sync_group(group_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sync_group_debug",
      "type": "key",
      "topics": [
        {
          "name": "audio_sync_group_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_sync_group_debug.htm",
          "blurb": "his function can be used to display debug information about any given sync group (the group index is the value returned when the group was created using the function audio_create_sync_group()). You can call the function with a value of -1 to switch off the overlay.",
          "syntax": "audio_sync_group_debug(group_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sync_group_get_track_pos",
      "type": "key",
      "topics": [
        {
          "name": "audio_sync_group_get_track_pos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_sync_group_get_track_pos.htm",
          "blurb": "This function returns the current play position of the given sync group. The group index is the value returned when you created the group using the function audio_create_sync_group(), and the return value is the time in seconds that the tracks have been playing.",
          "syntax": "audio_sync_group_get_track_pos(group_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_sync_group_is_playing",
      "type": "key",
      "topics": [
        {
          "name": "audio_sync_group_is_playing",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_sync_group_is_playing.htm",
          "blurb": "This function can be used to check if any audio in a synchronised group is playing. You are required to supply the sync group ID as returned by the function audio_create_sync_group().",
          "syntax": "audio_sync_group_is_playing(group_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "audio_system_is_available",
      "type": "key",
      "topics": [
        {
          "name": "audio_system_is_available",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_system_is_available.htm",
          "blurb": "This function can be used to check and see if the audio system has been initialised, or if the audio context is running. On all platforms, this function will return true immediately after Game Start when the audio engine is initialised, except on the HTML5 target. On HTML5, the audio context status can change at any time depending on user input, the browser being used, and its version, so this function can be used to check and see if audio can be played or not. If the function returns false (ie: the audio context status is not running), then only unstreamed sounds may play (but it's not guaranteed, and you should assume that no audio can be played), while if it returns true then all audio will play.",
          "syntax": "audio_system_is_available()"
        }
      ],
      "keys": []
    },
    {
      "name": "base64_decode",
      "type": "key",
      "topics": [
        {
          "name": "base64_decode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/base64_decode.htm",
          "blurb": "This function will convert a string encoded previously using base64 format, into standard text. Base64 is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye.",
          "syntax": "base64_decode(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "base64_encode",
      "type": "key",
      "topics": [
        {
          "name": "base64_encode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/base64_encode.htm",
          "blurb": "This function will convert a string into a base64 format encoded string. This is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye.",
          "syntax": "base64_encode(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "bbox_bottom",
      "type": "key",
      "topics": [
        {
          "name": "bbox_bottom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/bbox_bottom.htm",
          "blurb": "This read only variable returns the y position (within the room) of the bottom of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the sprite_index or by the mask_index). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance Y position.",
          "syntax": "bbox_bottom"
        }
      ],
      "keys": []
    },
    {
      "name": "bbox_left",
      "type": "key",
      "topics": [
        {
          "name": "bbox_left",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/bbox_left.htm",
          "blurb": "This read only variable returns the position (along the x-axis) within the room of the left hand bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the sprite_index or by the mask_index). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance X position.",
          "syntax": "bbox_left"
        }
      ],
      "keys": []
    },
    {
      "name": "bbox_right",
      "type": "key",
      "topics": [
        {
          "name": "bbox_right",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/bbox_right.htm",
          "blurb": "This read only variable returns the position within the room (along the x-axis) of the right hand side of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the sprite_index or by the mask_index). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance X position.",
          "syntax": "bbox_right"
        }
      ],
      "keys": []
    },
    {
      "name": "bbox_top",
      "type": "key",
      "topics": [
        {
          "name": "bbox_top",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/bbox_top.htm",
          "blurb": "This read only variable returns the position within the room (along the y-axis) of the top of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the sprite_index or by the mask_index). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance Y position.",
          "syntax": "bbox_top"
        }
      ],
      "keys": []
    },
    {
      "name": "bboxmode_automatic",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_bbox_mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_mode.htm",
          "blurb": "This function will return the current \"mode\" for the bounding box calculations. You supply the sprite index of the sprite to check, and the function will return one of the constants shown below.",
          "syntax": "sprite_get_bbox_mode(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "bboxmode_fullimage",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_bbox_mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_mode.htm",
          "blurb": "This function will return the current \"mode\" for the bounding box calculations. You supply the sprite index of the sprite to check, and the function will return one of the constants shown below.",
          "syntax": "sprite_get_bbox_mode(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "bboxmode_manual",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_bbox_mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_mode.htm",
          "blurb": "This function will return the current \"mode\" for the bounding box calculations. You supply the sprite index of the sprite to check, and the function will return one of the constants shown below.",
          "syntax": "sprite_get_bbox_mode(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "begin",
      "type": "key",
      "topics": [
        {
          "name": "begin / end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/begin_end.htm",
          "blurb": "The GameMaker Language permits you to use the keywords begin and end instead of the more usual curly brackets {} when creating code blocks. The code example below shows how this works:"
        }
      ],
      "keys": []
    },
    {
      "name": "Best Practices When Programming",
      "type": "key",
      "topics": [
        {
          "name": "Best Practices When Programming",
          "type": "topic",
          "url": "Additional_Information/Best_Practices_When_Programming.htm",
          "blurb": "On this page we are going to cover some \"best practices\" when programming your game, and at the same time explain a little bit about the inner workings of GameMaker. Before continuing, however, it is worth noting two very important points:"
        }
      ],
      "keys": []
    },
    {
      "name": "Bitwise Operators",
      "type": "key",
      "topics": [
        {
          "name": "Bitwise Operators",
          "type": "topic",
          "url": "Additional_Information/Bitwise_Operators.htm",
          "blurb": "At the beginning of the computer era, binary and hex (hexadecimal) were a way of life, probably because high level languages (such as BASIC) were simply too slow to run. For example, multiplying 32 x 32 might have taken various CPU cycles to achieve using BASIC, but with binary it is done as a single operation in a single CPU cycle."
        }
      ],
      "keys": []
    },
    {
      "name": "blendmodes",
      "type": "key",
      "topics": [
        {
          "name": "Guide To Using Blendmodes",
          "type": "topic",
          "url": "Additional_Information/Guide_To_Using_Blendmodes.htm",
          "blurb": "If you've been using GameMaker for any length of time, you will almost certainly have come across blend modes, and probably even used them in your games. Blend modes are a great way to change how something is drawn to give interesting and specific graphical effects, but do you know how they work and how do you use them? This is a subject that can confuse people and so in this section we hope to dispel some of the mystery surrounding blend modes and enable you to use them to their fullest extent in your games."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_add",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
          "blurb": "This function can be used to retrieve the current blend mode being used for drawing. The returned value will be one of the following constants (the default value is bm_normal):",
          "syntax": "gpu_get_blendmode()"
        },
        {
          "name": "gpu_set_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
          "syntax": "gpu_set_blendmode(mode)"
        }
      ],
      "keys": []
    },
    {
      "name": "bm_dest_alpha",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_dest_color",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_dest_colour",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_inv_dest_alpha",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_inv_dest_colour",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_inv_src_alpha",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_inv_src_color",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_inv_src_colour",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_max",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
          "blurb": "This function can be used to retrieve the current blend mode being used for drawing. The returned value will be one of the following constants (the default value is bm_normal):",
          "syntax": "gpu_get_blendmode()"
        },
        {
          "name": "gpu_set_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
          "syntax": "gpu_set_blendmode(mode)"
        }
      ],
      "keys": []
    },
    {
      "name": "bm_normal",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
          "blurb": "This function can be used to retrieve the current blend mode being used for drawing. The returned value will be one of the following constants (the default value is bm_normal):",
          "syntax": "gpu_get_blendmode()"
        },
        {
          "name": "gpu_set_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
          "syntax": "gpu_set_blendmode(mode)"
        }
      ],
      "keys": []
    },
    {
      "name": "bm_one",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_src_alpha",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_src_alpha_sat",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_src_color",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_src_colour",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "bm_subtract",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
          "blurb": "This function can be used to retrieve the current blend mode being used for drawing. The returned value will be one of the following constants (the default value is bm_normal):",
          "syntax": "gpu_get_blendmode()"
        },
        {
          "name": "gpu_set_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
          "syntax": "gpu_set_blendmode(mode)"
        }
      ],
      "keys": []
    },
    {
      "name": "bm_zero",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        },
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        },
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        },
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        },
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        },
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        },
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        },
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "Bookmarks",
      "type": "key",
      "topics": [
        {
          "name": "Bookmarks",
          "type": "topic",
          "url": "IDE_Navigation/Bookmarks.htm",
          "blurb": "Another method for navigating the workspace is to use Bookmarks. You can add up to 9 \"bookmarks\" to IDE windows or sections of code/GML Visual in scripts or object events, and then you can quickly skip between them using the correct key combination."
        }
      ],
      "keys": []
    },
    {
      "name": "bool",
      "type": "key",
      "topics": [
        {
          "name": "bool",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/bool.htm",
          "blurb": "This function will attempt to convert a given value into a boolean data type, where the value will be returned as true if it is greater than or equal to 0.5, and false otherwise.",
          "syntax": "bool(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "break",
      "type": "key",
      "topics": [
        {
          "name": "break",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/break.htm",
          "blurb": "The break statement is used to end prematurely a for, repeat, while or do / until loop of some kind, or to tell a switch statement to end at that point, or to prematurely end a with call. Please see the individual pages for these different functions to get a more in-depth explanation of how it can be used under each circumstance. Note that if break is used outside of any of these contexts it will give an error."
        }
      ],
      "keys": []
    },
    {
      "name": "Breakpoints",
      "type": "key",
      "topics": [
        {
          "name": "The Output Window",
          "type": "topic",
          "url": "Introduction/The_Output_Window.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "browser_chrome",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_firefox",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_height",
      "type": "key",
      "topics": [
        {
          "name": "browser_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/browser_height.htm",
          "blurb": "This variable holds the height (in pixels) of the browser the game is being run in. If no browser is present then the window size is returned.",
          "syntax": "browser_height"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_ie",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_ie_mobile",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_input_capture",
      "type": "key",
      "topics": [
        {
          "name": "browser_input_capture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/browser_input_capture.htm",
          "blurb": "With this function you can set whether the browser window should capture all input (set it to false) or whether the game should capture the input (set it to true). Note that this function is for use with the HTML5 module only.",
          "syntax": "browser_input_capture(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_not_a_browser",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_opera",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_safari",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_safari_mobile",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_tizen",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_unknown",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_width",
      "type": "key",
      "topics": [
        {
          "name": "browser_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/browser_width.htm",
          "blurb": "This variable holds the width (in pixels) of the browser the game is being run in. If no browser is present then the window size is returned.",
          "syntax": "browser_width"
        }
      ],
      "keys": []
    },
    {
      "name": "browser_windows_store",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_async_group_begin",
      "type": "key",
      "topics": [
        {
          "name": "buffer_async_group_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_async_group_begin.htm",
          "blurb": "This function is called when you want to begin the saving out of multiple buffers to multiple files (or loading multiple buffers). The groupname is a string and will be used as the directory name for where the files are saved, and should be used as part of the file path when loading the files back into the IDE later (using any of the buffer_load() functions). This function is only for use with the buffer_save_async() and buffer_load_async() functions and you must also end the async group by calling buffer_async_group_end() function otherwise the files will not be saved/loaded.",
          "syntax": "buffer_async_group_begin(groupname)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_async_group_end",
      "type": "key",
      "topics": [
        {
          "name": "buffer_async_group_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_async_group_end.htm",
          "blurb": "This function finishes the definition of a buffer async group. You must have previously called the function buffer_async_group_begin() to initiate the group, then call the function buffer_save_async() for each file that you wish to save out (or buffer_load_async() to load buffers). Finally you call this function, which will start the saving of the files. The function will return a unique ID value for the save, which can then be used in the Asynchronous Save / Load event to parse the results from the async_load DS map.",
          "syntax": "buffer_async_group_end()"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_async_group_option",
      "type": "key",
      "topics": [
        {
          "name": "buffer_async_group_option",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_async_group_option.htm",
          "blurb": "With this function you can set some platform specific options for the buffer group being saved/loaded. The options available are as follows:",
          "syntax": "buffer_async_group_option(option, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_base64_decode",
      "type": "key",
      "topics": [
        {
          "name": "buffer_base64_decode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_base64_decode.htm",
          "blurb": "With this function you can decode a base64 encoded string (created using the buffer_base64_encode() function) into a buffer. This function will create the buffer (as a 1 byte aligned \"grow\" buffer\") and return the unique index for the buffer which should be used in all further function calls.",
          "syntax": "buffer_base64_decode(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_base64_decode_ext",
      "type": "key",
      "topics": [
        {
          "name": "buffer_base64_decode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_base64_decode_ext.htm",
          "blurb": "With this function you can decode a base64 encoded string (created using the buffer_base64_encode() function) into a buffer. Unlike the function buffer_base64_decode(), this will not create a buffer for you, but rather you should already have created the buffer (see buffer_create()), the id of which you would then use with this function. The \"offset\" is the\nposition within the buffer to decode the given string (in bytes).",
          "syntax": "buffer_base64_decode_ext(buffer, string, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_base64_encode",
      "type": "key",
      "topics": [
        {
          "name": "buffer_base64_encode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_base64_encode.htm",
          "blurb": "This function will convert the data from the given buffer into a base64 format encoded string. This is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye. To use this you need to specify an already created buffer, the offset value (which is the point within the buffer at which you wish to start encoding) as well as the size, in bytes, of the buffer memory to encode.",
          "syntax": "buffer_base64_encode(buffer, offset, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_bool",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_compress",
      "type": "key",
      "topics": [
        {
          "name": "buffer_compress",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_compress.htm",
          "blurb": "With this function you can compress part (or all) of a buffer using zlib compression. You supply the ID of the buffer to compress (as returned by buffer_create()), the offset within the buffer to use in bytes, and the size of the buffer data to compress (also in bytes). The function will return a new buffer ID value for the compressed buffer, or a value less than 0 if it has failed for any reason. This function will not alter the original buffer.",
          "syntax": "buffer_compress(buffer, offset, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_copy",
      "type": "key",
      "topics": [
        {
          "name": "buffer_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_copy.htm",
          "blurb": "This function can be used to copy a segment (or all) of the data stored in one buffer to another. When using two buffers and copying from one to the other, both buffers must have previously been created using the buffer_create() function (for example), and you can specify a data offset (in bytes) for the start point of the data to be copied from the source buffer relative to the start of the buffer, as well as another data offset to define the position to copy the data to in the destination buffer.",
          "syntax": "buffer_copy(src_buffer, src_offset, size, dest_buffer, dest_offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_copy_from_vertex_buffer",
      "type": "key",
      "topics": [
        {
          "name": "buffer_copy_from_vertex_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_copy_from_vertex_buffer.htm",
          "blurb": "This function can be used to copy some (or all) of the vertex data stored in one vertex buffer into a previously created regular buffer. When copying from a vertex buffer into a regular buffer with this function, both buffers must have previously been created (using the vertex_create_buffer() and buffer_create() functions, for example). You can specify the range of vertex data that you wish to copy into the buffer, where the start vertex can be anywhere between 0 and the number of vertices -1, and you can give the number of vertices from that point on to copy. You can use the function vertex_get_number() on the vertex buffer to get the total number of vertices stored. Finally you give the buffer index to copy the vertex data into, as well as a data offset to define the position to copy the vertex data to in the destination buffer.",
          "syntax": "buffer_copy_from_vertex_buffer(vertex_buffer, start_vertex, num_vertices, dest_buffer, dest_offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_crc32",
      "type": "key",
      "topics": [
        {
          "name": "buffer_crc32",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_crc32.htm",
          "blurb": "This function will take input data from a buffer and returns a crc32 checksum hash. You specify the buffer ID of the buffer to use, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed, and the function will return a 32 bit integer value for that region.",
          "syntax": "buffer_crc32(buffer, offset, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_create",
      "type": "key",
      "topics": [
        {
          "name": "buffer_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_create.htm",
          "blurb": "You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the buffer_write() function, with the following constants being used to define the buffer type:",
          "syntax": "buffer_create(size, type, alignment)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_create_from_vertex_buffer",
      "type": "key",
      "topics": [
        {
          "name": "buffer_create_from_vertex_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_create_from_vertex_buffer.htm",
          "blurb": "You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created vertex buffer. The function returns a unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function vertex_create_buffer(), for example) with the following constants being used to define the buffer type:",
          "syntax": "buffer_create_from_vertex_buffer(vertex_buffer, type, alignment)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_create_from_vertex_buffer_ext",
      "type": "key",
      "topics": [
        {
          "name": "buffer_create_from_vertex_buffer_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_create_from_vertex_buffer_ext.htm",
          "blurb": "You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created vertex buffer. The function returns a unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function vertex_create_buffer(), for example) with the following constants being used to define the buffer type:",
          "syntax": "buffer_create_from_vertex_buffer_ext(vertex_buffer, type, alignment, start_vertex, num_vertices)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_decompress",
      "type": "key",
      "topics": [
        {
          "name": "buffer_decompress",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_decompress.htm",
          "blurb": "With this function you can decompress a previously compressed buffer using zlib compression. You supply the buffer ID to decompress, and the function will return a new buffer ID that contains the uncompressed data. If the decompression has failed (for example, you are supplying a buffer that hasn't been compressed) then the function will instead return a value less than 0.",
          "syntax": "buffer_decompress(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_delete",
      "type": "key",
      "topics": [
        {
          "name": "buffer_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_delete.htm",
          "blurb": "With this function you can delete a buffer previously have created using the function buffer_create() from memory, releasing the resources used to create it and removing any data that it may currently contain.",
          "syntax": "buffer_delete(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_exists",
      "type": "key",
      "topics": [
        {
          "name": "buffer_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_exists.htm",
          "blurb": "This function can be used to check a variable to see if it holds a valid buffer ID value or not. If it does the function will return true otherwise it will return false.",
          "syntax": "buffer_exists(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_f16",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_f32",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_f64",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_fast",
      "type": "key",
      "topics": [
        {
          "name": "buffer_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_create.htm",
          "blurb": "You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the buffer_write() function, with the following constants being used to define the buffer type:",
          "syntax": "buffer_create(size, type, alignment)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_fill",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_fixed",
      "type": "key",
      "topics": [
        {
          "name": "buffer_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_create.htm",
          "blurb": "You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the buffer_write() function, with the following constants being used to define the buffer type:",
          "syntax": "buffer_create(size, type, alignment)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_get_address",
      "type": "key",
      "topics": [
        {
          "name": "buffer_get_address",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_get_address.htm",
          "blurb": "With this function you can get the a pointer to the raw, aligned buffer address. This is primarily for use with extensions as you can pass this value through to them, allowing them to access the buffer data. Note that there are a few things you cannot do with the buffer when accessing from an extension:",
          "syntax": "buffer_get_address(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_get_alignment",
      "type": "key",
      "topics": [
        {
          "name": "buffer_get_alignment",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_get_alignment.htm",
          "blurb": "With this function you can get the a byte alignment for the given buffer ID.",
          "syntax": "buffer_get_alignment(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_get_size",
      "type": "key",
      "topics": [
        {
          "name": "buffer_get_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_get_size.htm",
          "blurb": "With this function you can get the size of the given buffer in bytes.",
          "syntax": "buffer_get_size(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_get_surface",
      "type": "key",
      "topics": [
        {
          "name": "buffer_get_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_get_surface.htm",
          "blurb": "With this function you can write information from a surface to a given buffer. The buffer must have been created previously and should be a 1-byte aligned buffer large enough to store data for the surface you are going to write (if unsure, use a grow buffer or see the example at the bottom of this page).",
          "syntax": "buffer_get_surface(buffer, surface, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_get_type",
      "type": "key",
      "topics": [
        {
          "name": "buffer_get_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_get_type.htm",
          "blurb": "With this function you retrieve the type of buffer that is being referenced by a buffer ID value. The return value will be one of the following constants:",
          "syntax": "buffer_get_type(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_grow",
      "type": "key",
      "topics": [
        {
          "name": "buffer_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_create.htm",
          "blurb": "You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the buffer_write() function, with the following constants being used to define the buffer type:",
          "syntax": "buffer_create(size, type, alignment)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_load",
      "type": "key",
      "topics": [
        {
          "name": "buffer_load",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_load.htm",
          "blurb": "This function is used to load a buffer that was previously saved using the buffer_save() functions, as well as any Included Files or files loaded externally. It will return a new buffer's ID which is created by the function as a \"grow\" buffer (see here) with a byte alignment of 1. This ID should be stored in a variable and used in all further function calls to this buffer. If the load fails for whatever reason, the function will return -1 and a message will be shown in the compiler output window saying that the load has failed.",
          "syntax": "buffer_load(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_load_async",
      "type": "key",
      "topics": [
        {
          "name": "buffer_load_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_load_async.htm",
          "blurb": "With this function you can load a file that you have created previously using the buffer_save() function (or any of the other functions for saving buffers) into a buffer. The \"offset\" defines the start position within the buffer for loading (in bytes), and the \"size\" is the size of the buffer area to be loaded from that offset onwards (also in bytes). You can supply a value of -1 for the size argument and the entire buffer will be loaded. Note that the function will load from a \"default\" folder, which does not need to be included as part of the file path you provide. This folder will be created if it doesn't exist or when you save a file using buffer_save_async().",
          "syntax": "buffer_load_async(buffer, filename, offset, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_load_ext",
      "type": "key",
      "topics": [
        {
          "name": "buffer_load_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_load_ext.htm",
          "blurb": "This function will load the buffer data that was previously saved using the buffer_save() functions into an existing buffer. You give the ID of the previously created buffer to load into, then the saved buffer file to load, and finally the offset from the start of the buffer (in bytes) that you wish to load the data to.",
          "syntax": "buffer_load_ext(buffer, filename, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_load_partial",
      "type": "key",
      "topics": [
        {
          "name": "buffer_load_partial",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_load_partial.htm",
          "blurb": "This function will load some of the buffer data that was previously saved using the buffer_save() functions into an existing buffer. You give the id of the previously created buffer to load into, then the saved buffer file to load, and then the offset from the start of the buffer (in bytes) that you wish to load the data from. The following arguments are for setting the length of the buffer data (in bytes) from the initial offset point that you wish to load and the offset point to load the data to in the buffer (again, in bytes).",
          "syntax": "buffer_load_partial(buffer, filename, offset, src_len, dest_offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_md5",
      "type": "key",
      "topics": [
        {
          "name": "buffer_md5",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_md5.htm",
          "blurb": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hashing function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of data. This function will take the input data from a given buffer (or part of the buffer) and return the 32-character hexadecimal MD5 hash that is unique to that data. In this way you can generate\na secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example). When applying this to buffers using this function you must specify the buffer id of the buffer to\nuse, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed.",
          "syntax": "buffer_md5(buffer, offset, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_peek",
      "type": "key",
      "topics": [
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_poke",
      "type": "key",
      "topics": [
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_read",
      "type": "key",
      "topics": [
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_resize",
      "type": "key",
      "topics": [
        {
          "name": "buffer_resize",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_resize.htm",
          "blurb": "With this function you can resize a given buffer to be the size (in bytes) that you specify.",
          "syntax": "buffer_resize(buffer, newsize)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_s16",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_s32",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_s8",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_save",
      "type": "key",
      "topics": [
        {
          "name": "buffer_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_save.htm",
          "blurb": "With this function you can save the contents of a buffer to a file, ready to be read back into memory using the buffer_load() function.",
          "syntax": "buffer_save(buffer, filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_save_async",
      "type": "key",
      "topics": [
        {
          "name": "buffer_save_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_save_async.htm",
          "blurb": "With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the buffer_load() function (or any of the other functions for loading buffers). The \"offset\" defines the start position within the buffer for saving (in bytes), and the \"size\" is the size of the buffer area to be saved from that offset onwards (also in bytes). This function works asynchronously, and so the game will continue running while being saved, and all files saved using this function will be placed in a \"default\" folder. This folder does not need to be included in the filename as it is added automatically by GameMaker. For example the filename path \"Data\\Player_Save.sav\" would actually be saved to \"default\\Data\\Player_Save.sav\". However, if you then load the file using the function buffer_load_async(), you do not need to supply the \"default\" part of the path either (but any other file function will require it, except on consoles Xbox One, PS4 and Nintendo Switch).",
          "syntax": "buffer_save_async(buffer, filename, offset, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_save_ext",
      "type": "key",
      "topics": [
        {
          "name": "buffer_save_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_save_ext.htm",
          "blurb": "With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the buffer_load() function. The \"offset\" defines the start position within the buffer for saving (in bytes), and the \"size\" is the size of the buffer area to be saved from that offset onwards (also in bytes).",
          "syntax": "buffer_save_ext(buffer, filename, offset, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_seek",
      "type": "key",
      "topics": [
        {
          "name": "buffer_seek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm",
          "blurb": "This function can be used to move through a buffer, finding the start, the end, or a position relative to that which was last used when reading or writing data. The \"offset\" value is the offset (in bytes) to add to the given seek position, for example, if the base is relative and the offset is 4, then the buffer position will move along 4 bytes from its current position. Please note the following:",
          "syntax": "buffer_seek(buffer, base, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_seek_end",
      "type": "key",
      "topics": [
        {
          "name": "buffer_seek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm",
          "blurb": "This function can be used to move through a buffer, finding the start, the end, or a position relative to that which was last used when reading or writing data. The \"offset\" value is the offset (in bytes) to add to the given seek position, for example, if the base is relative and the offset is 4, then the buffer position will move along 4 bytes from its current position. Please note the following:",
          "syntax": "buffer_seek(buffer, base, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_seek_relative",
      "type": "key",
      "topics": [
        {
          "name": "buffer_seek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm",
          "blurb": "This function can be used to move through a buffer, finding the start, the end, or a position relative to that which was last used when reading or writing data. The \"offset\" value is the offset (in bytes) to add to the given seek position, for example, if the base is relative and the offset is 4, then the buffer position will move along 4 bytes from its current position. Please note the following:",
          "syntax": "buffer_seek(buffer, base, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_seek_start",
      "type": "key",
      "topics": [
        {
          "name": "buffer_seek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm",
          "blurb": "This function can be used to move through a buffer, finding the start, the end, or a position relative to that which was last used when reading or writing data. The \"offset\" value is the offset (in bytes) to add to the given seek position, for example, if the base is relative and the offset is 4, then the buffer position will move along 4 bytes from its current position. Please note the following:",
          "syntax": "buffer_seek(buffer, base, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_set_surface",
      "type": "key",
      "topics": [
        {
          "name": "buffer_set_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_set_surface.htm",
          "blurb": "With this function you can write information from a buffer to a given surface.",
          "syntax": "buffer_set_surface(buffer, surface, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_set_used_size",
      "type": "key",
      "topics": [
        {
          "name": "buffer_set_used_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_set_used_size.htm",
          "blurb": "This function is primarily for use within extensions, and allows you to set the \"used\" size of the given buffer, which is the number of bytes that have been written to it.",
          "syntax": "buffer_set_used_size(buffer, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_sha1",
      "type": "key",
      "topics": [
        {
          "name": "buffer_sha1",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_sha1.htm",
          "blurb": "In cryptography, SHA-1 is a cryptographic hashing function designed by the United States National Security Agency and is employed in several widely used applications and protocols like the popular Git where it is used to check for file changes. This function will take input data from a buffer and returns a 160 bit message digest in ASCII format. In this way you can generate a secure key which can be stored and used to check the integrity\nof the information being sent to (or received from) an external server (for example). When applying this to buffers using this function you must specify the buffer id of the buffer to use, then an offset value (in bytes) for where to begin, and then\na size (again in bytes) for the region to be hashed.",
          "syntax": "buffer_sha1(buffer, offset, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_sizeof",
      "type": "key",
      "topics": [
        {
          "name": "buffer_sizeof",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_sizeof.htm",
          "blurb": "This function will return the size (in bytes) of the given Buffer Data Type Constant (listed here).",
          "syntax": "buffer_sizeof(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_string",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_surface_copy (Deprecated)",
      "type": "key",
      "topics": [
        {
          "name": "buffer_get_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_get_surface.htm",
          "blurb": "With this function you can write information from a surface to a given buffer. The buffer must have been created previously and should be a 1-byte aligned buffer large enough to store data for the surface you are going to write (if unsure, use a grow buffer or see the example at the bottom of this page).",
          "syntax": "buffer_get_surface(buffer, surface, offset)"
        },
        {
          "name": "buffer_set_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_set_surface.htm",
          "blurb": "With this function you can write information from a buffer to a given surface.",
          "syntax": "buffer_set_surface(buffer, surface, offset)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_tell",
      "type": "key",
      "topics": [
        {
          "name": "buffer_tell",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_tell.htm",
          "blurb": "When you read or write data to a buffer using the buffer_read() or buffer_write() the current \"seek\" position is advanced by the bytes written or read, and with this function you can get the current \"seek\" position for use in other buffer functions. For example, if your buffer alignment is set to 4 bytes and you write a single piece of data which is 1 byte in size then do a buffer_tell(),\nyou'll get an return value of 1. However, if you write another piece of data, also 1 byte in size, then do a buffer_tell(), you'll get a return value of 5 as the alignment has \"padded\" the data to that position.",
          "syntax": "buffer_tell(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_text",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_u16",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_u32",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_u64",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_u8",
      "type": "key",
      "topics": [
        {
          "name": "buffer_fill",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm",
          "blurb": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The \"size\"\nis the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
          "syntax": "buffer_fill(buffer, offset, type, value, size)"
        },
        {
          "name": "buffer_peek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm",
          "blurb": "With the buffer_read() function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
          "syntax": "buffer_peek(buffer, offset, type)"
        },
        {
          "name": "buffer_poke",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm",
          "blurb": "With the buffer_write() function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
          "syntax": "buffer_poke(buffer, offset, type, value)"
        },
        {
          "name": "buffer_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_read.htm",
          "blurb": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
          "syntax": "buffer_read(buffer, type)"
        },
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_vbuffer",
      "type": "key",
      "topics": [
        {
          "name": "buffer_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_create.htm",
          "blurb": "You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the buffer_write() function, with the following constants being used to define the buffer type:",
          "syntax": "buffer_create(size, type, alignment)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_wrap",
      "type": "key",
      "topics": [
        {
          "name": "buffer_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_create.htm",
          "blurb": "You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the buffer_write() function, with the following constants being used to define the buffer type:",
          "syntax": "buffer_create(size, type, alignment)"
        }
      ],
      "keys": []
    },
    {
      "name": "buffer_write",
      "type": "key",
      "topics": [
        {
          "name": "buffer_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
          "blurb": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
          "syntax": "buffer_write(buffer, type, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "Building via Command Line",
      "type": "key",
      "topics": [
        {
          "name": "Building via Command Line",
          "type": "topic",
          "url": "Settings/Building_via_Command_Line.htm",
          "blurb": "NOTE Building executable packages via command line is only available on specific licences, so please look at this page to find out whether your licence supports that. For all other licences, you can run and debug your project through a command line without any restrictions."
        }
      ],
      "keys": []
    },
    {
      "name": "c_aqua",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_black",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_blue",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_dkgray",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_fuchsia",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_gray",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_green",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_lime",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_ltgray",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_maroon",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_navy",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_olive",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_orange",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_purple",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_red",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_silver",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_teal",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_white",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "c_yellow",
      "type": "key",
      "topics": [
        {
          "name": "Colour And Alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
          "blurb": "GameMaker has a comprehensive selection of functions to manipulate the colour and alpha of what is drawn on the screen. Using these functions you can separate colours into their component parts, create new colours and manipulate the draw alpha to change how different things in your game are drawn together."
        }
      ],
      "keys": []
    },
    {
      "name": "call_cancel",
      "type": "key",
      "topics": [
        {
          "name": "call_cancel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/call_cancel.htm",
          "blurb": "This function cancels a callback function that was started earlier by call_later.",
          "syntax": "call_cancel(handle)"
        }
      ],
      "keys": []
    },
    {
      "name": "call_later",
      "type": "key",
      "topics": [
        {
          "name": "call_later",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/call_later.htm",
          "blurb": "This function triggers a callback function after the specified time or after a certain interval. It does this by creating a Time Source (see Time Sources).",
          "syntax": "call_later(period, unit, callback, [loop=false])"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_apply",
      "type": "key",
      "topics": [
        {
          "name": "camera_apply",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_apply.htm",
          "blurb": "This function will apply the given camera settings to the current camera view being rendered immediately. While you can set any view camera using the specific camera_set_* functions, the new settings will not be used for rendering until the next game frame, but with this function you can make those changes immediately. If you are using multiple views then the function should be used in the Draw Event and you can use the variable view_current to selectively apply the given camera only to the camera view currently being rendered. Note that this does NOT change the camera ID value, only the settings for that camera, and that if you use this function on the default camera (ie: the internal camera GameMaker uses when no view cameras are active) the changes will be overwritten the very next game frame by the internal settings for drawing the room.",
          "syntax": "camera_apply(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_create",
      "type": "key",
      "topics": [
        {
          "name": "camera_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_create.htm",
          "blurb": "This function will create an \"empty\" camera, ie: a camera with no view or projection settings defined. Once you have created the camera you can then use the different matrix functions to set the view and projection matrices. You can also use this function to create the camera and then use the different camera_set_* functions to set up the view, however note that you must provide at least a position and view size, otherwise the resulting camera will not be valid and give odd results if applied to a view port (if you do not set the object following, borders or move speed these will be set to the default values for a view camera in the Room Editor).",
          "syntax": "camera_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_create_view",
      "type": "key",
      "topics": [
        {
          "name": "camera_create_view",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_create_view.htm",
          "blurb": "This function will create a new camera and then set its view into the room, before return the unique ID value to identify the camera in future function calls. The camera will be created using the values that you set in this function for position, size and other details which correlate to the values you set in the Room Editor (see here). Note that this function can take a variable number of arguments with only the x/y position and width/height arguments being obligatory. Any arguments not supplied will use their default arguments.",
          "syntax": "camera_create_view(room_x, room_y, width, height, [angle, object, x_speed, y_speed, x_border, y_border])"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_destroy",
      "type": "key",
      "topics": [
        {
          "name": "camera_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_destroy.htm",
          "blurb": "With this function you can destroy any camera. When calling the function you supply the unique camera ID value, which you get from the camera_create_* functions or from the view_camera array if using the Room Editor to set up the view port and view. You should never destroy a camera that is currently assigned to a visible view, unless you are assigning a new camera to that view in the same step, and you should always destroy any cameras that you have created through code when no longer required by your game to prevent memory leaks, and you can also destroy the default cameras if you have any assigned in the Room Editor, but you should assign a new camera to the view port (or disable it) otherwise you will get odd results.",
          "syntax": "camera_destroy(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_active",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_active",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_active.htm",
          "blurb": "This function can be used to retrieve the unique camera ID value of the currently active camera.",
          "syntax": "camera_get_active()"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_begin_script",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_begin_script",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_begin_script.htm",
          "blurb": "This function can be used to retrieve the ID of the script function assigned as the begin script for the given camera. If no script function is assigned then the function will return -1.",
          "syntax": "camera_get_begin_script(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_default",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_default",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_default.htm",
          "blurb": "This function can be used to retrieve the unique camera ID value of the default camera (the camera that GameMaker uses when no camera views or ports are active in a game room).",
          "syntax": "camera_get_default()"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_end_script",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_end_script",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_end_script.htm",
          "blurb": "This function can be used to retrieve the ID of the script function assigned as the end function for the given camera. If no script function is assigned then the function will return -1.",
          "syntax": "camera_get_end_script(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_proj_mat",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_proj_mat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_proj_mat.htm",
          "blurb": "This function can be used to retrieve the projection matrix. The function returns the matrix array which can then be used in other matrix functions or to set the projection matrix of another camera (using camera_set_proj_mat()).",
          "syntax": "camera_get_proj_mat(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_update_script",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_update_script",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_update_script.htm",
          "blurb": "This function can be used to retrieve the ID of the script function assigned as the update script for the given camera. If no script is assigned then the function will return -1.",
          "syntax": "camera_get_update_script(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_angle",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_angle.htm",
          "blurb": "This function can be used to retrieve the angle of the given camera. The return value will be between 0 and 360. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.",
          "syntax": "camera_get_view_angle(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_border_x",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_border_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_border_x.htm",
          "blurb": "This function can be used to retrieve the border value for object/instance following of the given camera along the x axis (horizontal border). The return value will be in pixels.",
          "syntax": "camera_get_view_border_x(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_border_y",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_border_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_border_y.htm",
          "blurb": "This function can be used to retrieve the border value for object/instance following of the given camera along the y axis (vertical border). The return value will be in pixels.",
          "syntax": "camera_get_view_border_y(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_height",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_height.htm",
          "blurb": "This function can be used to retrieve the height (in pixels) of the given camera. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.",
          "syntax": "camera_get_view_height(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_mat",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_mat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_mat.htm",
          "blurb": "This function can be used to retrieve the view matrix. The function returns the matrix array which can then be used in other matrix functions or to set the view matrix of another camera (using camera_set_view_mat()). Note that this function is generally for use with cameras created using camera_create(), but it can also be used on those created in the room editor (or with camera_create_view()) - in which case the returned matrix will only be valid after the given camera is used in a view port for the first time.",
          "syntax": "camera_get_view_mat(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_speed_x",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_speed_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_speed_x.htm",
          "blurb": "This function can be used to retrieve the movement speed of the given camera along the x axis (horizontal movement). The return value will be in pixels per game frame.",
          "syntax": "camera_get_view_speed_x(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_speed_y",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_speed_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_speed_y.htm",
          "blurb": "This function can be used to retrieve the movement speed of the given camera along the y axis (vertical movement). The return value will be in pixels per game frame.",
          "syntax": "camera_get_view_speed_y(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_target",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_target",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_target.htm",
          "blurb": "This function can be used to retrieve the follow target of the given camera. The return value can be an object index, an instance ID or -1 if no follow target has been set.",
          "syntax": "camera_get_view_target(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_width",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_width.htm",
          "blurb": "This function can be used to retrieve the width (in pixels) of the given camera. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.",
          "syntax": "camera_get_view_width(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_x",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_x.htm",
          "blurb": "This function can be used to retrieve the x position of the view for a given camera. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.",
          "syntax": "camera_get_view_x(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_get_view_y",
      "type": "key",
      "topics": [
        {
          "name": "camera_get_view_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_y.htm",
          "blurb": "This function can be used to retrieve the y position of the view for a given camera. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.",
          "syntax": "camera_get_view_y(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_begin_script",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_begin_script",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_begin_script.htm",
          "blurb": "This function can be used to set a script function that will be called at the beginning of every game frame that the camera is assigned to a visible and active view port. You give the unique camera ID value (as returned by the different camera_create() functions) and the ID of the function to be called. The order in which scripts attached to cameras and the actual rendering of the camera view is as follows:",
          "syntax": "camera_set_begin_script(camera_id, script)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_default",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_default",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_default.htm",
          "blurb": "This function can be used to set the default camera to use a custom camera that you have previously created using one of the camera_create() functions. When you create a room with no active view ports or view cameras, GameMaker still uses a camera to show the action in the game. This camera is called the default camera and can be set and manipulated (and even destroyed) just like any other camera.",
          "syntax": "camera_set_default(camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_end_script",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_end_script",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_end_script.htm",
          "blurb": "This function can be used to set a script function that will be called at the end of every game frame that the camera is assigned to a visible and active view port, after everything for that view camera has been rendered. You give the unique camera ID value (as returned by the different camera_create() functions) and the ID of the function to be called. The order in which functions attached to cameras and the actual rendering of the camera view is as follows:",
          "syntax": "camera_set_end_script(camera_id, script)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_proj_mat",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_proj_mat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_proj_mat.htm",
          "blurb": "This function will set the projection matrix for a given camera. You give the unique camera ID value (as returned by the different camera_create() functions) and a projection matrix to be applied. You can find out more about creating projection matrices from the section Matrix Functions, specifically matrix_build_projection_perspective() and matrix_build_projection_ortho().",
          "syntax": "camera_set_proj_mat(camera_id, matrix)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_update_script",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_update_script",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_update_script.htm",
          "blurb": "This function can be used to set a script function that will be called every game frame that the camera is assigned to a visible and active view port. You give the unique camera ID value (as returned by the different camera_create functions) and the ID of the function to be called. The order in which functions attached to cameras and the actual rendering of the camera view is as follows:",
          "syntax": "camera_set_update_script(camera_id, script)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_view_angle",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_view_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_angle.htm",
          "blurb": "You can use this function to update the angle of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the angle that you wish to set the camera view to. The default value is 0° with positive values rotating the camera counter-clockwise, ie: setting the value to 90 will rotate the camera 90° to the left.",
          "syntax": "camera_set_view_angle(camera_id, angle)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_view_border",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_view_border",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_border.htm",
          "blurb": "You can use this function to set the follow border of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create functions) and then give the x border size and the y border size (horizontal and vertical). These values will only be used when the view camera has been assigned an instance target to follow (either in the Room Editor or using the function camera_set_view_target()) and relate\nto how far from the border of the view the instance needs to be before the view will update its position to follow.",
          "syntax": "camera_set_view_border(camera_id, x_border, y_border)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_view_mat",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_view_mat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_mat.htm",
          "blurb": "This function will set the view matrix for a given camera. You give the unique camera ID value (as returned by the different camera_create() functions) and a view matrix to be applied. You can find out more about creating view matrices from the section Matrix Functions, specifically matrix_build_lookat().",
          "syntax": "camera_set_view_mat(camera_id, matrix)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_view_pos",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_view_pos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_pos.htm",
          "blurb": "You can use this function to update the position of the camera view within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the x and y positions to set the camera to.",
          "syntax": "camera_set_view_pos(camera_id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_view_size",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_view_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_size.htm",
          "blurb": "You can use this function to update the size of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the width and height (in pixels) to set the camera to.",
          "syntax": "camera_set_view_size(camera_id, width, height)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_view_speed",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_view_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_speed.htm",
          "blurb": "You can use this function to update the speed of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the x and y (horizontal and vertical) speed that it should move when set to follow a given instance. The speed is calculated as pixels per step and can be set to \"-1\" to make the camera move instantly, but if the camera is not set to follow any instance then the\nvalues set here will have no visible effect.",
          "syntax": "camera_set_view_speed(camera_id, xspeed, yspeed)"
        }
      ],
      "keys": []
    },
    {
      "name": "camera_set_view_target",
      "type": "key",
      "topics": [
        {
          "name": "camera_set_view_target",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_target.htm",
          "blurb": "You can use this function to set the follow target of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the target instance or object ID that you wish to set the camera view to. Note that if you choose an object ID and there is more than one instance of that object in the room, there is no way for GameMaker to know which instance you wish to follow and so it could be any of them.",
          "syntax": "camera_set_view_target(camera_id, instance_id/object_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "case",
      "type": "key",
      "topics": [
        {
          "name": "switch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/switch.htm",
          "blurb": "In a number of situations you want to let your instances perform different actions depending on a particular value. You can do this using a number of consecutive if / else statements, but when the possible choices gets above two or three it is usually easier to use the switch statement."
        }
      ],
      "keys": []
    },
    {
      "name": "catch",
      "type": "key",
      "topics": [
        {
          "name": "try / catch / finally",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/try_catch_finally.htm",
          "blurb": "The try, catch and finally statements can be used in your game for error checking and permit you to test out blocks of code and control what happens if any runtime exceptions occur. Using these will prevent the exception ending the game and showing the standard error message to the user, but this means that you will have to handle what happens next in that case, like saving out log files - for example - and ending the game gracefully (note that if you choose to do nothing, your game may become unstable and not perform correctly)."
        }
      ],
      "keys": []
    },
    {
      "name": "ceil",
      "type": "key",
      "topics": [
        {
          "name": "ceil",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/ceil.htm",
          "blurb": "This function takes any real number and rounds it up to the nearest integer. Care should be taken with this function as one common mistake is to use it round up a random value and expect it always to be greater than 1, ie:",
          "syntax": "ceil(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "choose",
      "type": "key",
      "topics": [
        {
          "name": "choose",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/choose.htm",
          "blurb": "Sometimes you want to specify something other than numbers for a random selection, or the numbers you want are not in any real order or within any set range. In these cases you would use choose() to generate a random result. For example, say you want to create an object with a random sprite at the start, then you could use this function to set the sprite index to one of a set of given sprites. Note that you can have as many as you require (note that more arguments will mean that the function will be slower to parse).",
          "syntax": "choose(val0, val1, val2... max_val)"
        }
      ],
      "keys": []
    },
    {
      "name": "chr",
      "type": "key",
      "topics": [
        {
          "name": "chr",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/chr.htm",
          "blurb": "This function returns a string containing the character which relates to the input Unicode code for displaying. This character depends on the current drawing fonts character set code page and if no font is set, it will use the default code page for the machine.",
          "syntax": "chr(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "clamp",
      "type": "key",
      "topics": [
        {
          "name": "clamp",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/clamp.htm",
          "blurb": "With this function you can maintain an input value between a specified range.",
          "syntax": "clamp(val, min, max)"
        }
      ],
      "keys": []
    },
    {
      "name": "clickable_add",
      "type": "key",
      "topics": [
        {
          "name": "clickable_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_add.htm",
          "blurb": "With this function you can create a custom, clickable, icon that acts as a \"button\" outside of the game canvas, but within the browser window itself. The function will return an ID value which must be stored in a variable to be used in all further button functions that reference the new clickable. This function is very useful to prevent the browser creating a pop-up window when clicking on the button as it is all done through GameMaker itself.",
          "syntax": "clickable_add(x, y, tpe, url, target, params)"
        }
      ],
      "keys": []
    },
    {
      "name": "clickable_add_ext",
      "type": "key",
      "topics": [
        {
          "name": "clickable_add_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_add_ext.htm",
          "blurb": "With this function you can create a custom, clickable, icon that acts as a \"button\" outside of the game canvas, but within the browser window itself. The function will return an ID value which must be stored in a variable to be used in all further button functions that reference the new clickable. This function is very useful to prevent the browser creating a pop-up window when clicking on the button as it is all done through GameMaker itself.",
          "syntax": "clickable_add_ext(x, y, tpe, url, target, params, alpha, scale)"
        }
      ],
      "keys": []
    },
    {
      "name": "clickable_change",
      "type": "key",
      "topics": [
        {
          "name": "clickable_change",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_change.htm",
          "blurb": "With this function you can change the sprite and position of a clickable icon previously created with clickable_add(). Please note that the position is based on the window, not the canvas, (0,0) position and that the sprite must be referenced directly from the texture page (see: sprite_get_tpe()).",
          "syntax": "clickable_change(index, tpe, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "clickable_change_ext",
      "type": "key",
      "topics": [
        {
          "name": "clickable_change_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_change_ext.htm",
          "blurb": "With this function you can change the sprite and position of a clickable icon previously created with clickable_add(). Bear in mind that the position is based on the window, not the canvas, (0,0) position and that the sprite must be referenced directly from the texture page (see: sprite_get_tpe()). This function also permits you to change the scale of the sprite used (as a multiplier so that 1 is the default, 0.5 would be half and 2 would be double) and the alpha value from 0 (fully transparent) to 1 (fully opaque) for the final icon on the screen.",
          "syntax": "clickable_change_ext(index, tpe, x, y, alpha, scale)"
        }
      ],
      "keys": []
    },
    {
      "name": "clickable_delete",
      "type": "key",
      "topics": [
        {
          "name": "clickable_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_delete.htm",
          "blurb": "This function must be used to remove a clickable icon previously created with clickable_add() from the game window.",
          "syntax": "clickable_delete(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "clickable_exists",
      "type": "key",
      "topics": [
        {
          "name": "clickable_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_exists.htm",
          "blurb": "This function returns whether a clickable DOM icon has been created with the specified index exists or not. Please note, that the value used for checking must have been initialised previously or else you will get an error causing GameMaker to close.",
          "syntax": "clickable_exists(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "clickable_set_style",
      "type": "key",
      "topics": [
        {
          "name": "clickable_set_style",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_set_style.htm",
          "blurb": "This function lets you set the CSS style properties for the given button via the key/value pairs in the provided DS Map. You need to have previously created the both the button element (using clickable_add()) and the DS Map and supply the stored indices to each as arguments.",
          "syntax": "clickable_set_style(index, map)"
        }
      ],
      "keys": []
    },
    {
      "name": "clipboard_get_text",
      "type": "key",
      "topics": [
        {
          "name": "clipboard_get_text",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/clipboard_get_text.htm",
          "blurb": "This function will return a string of the text contained on the clipboard. if no text is stored it will return an empty string \"\".",
          "syntax": "clipboard_get_text()"
        }
      ],
      "keys": []
    },
    {
      "name": "clipboard_has_text",
      "type": "key",
      "topics": [
        {
          "name": "clipboard_has_text",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/clipboard_has_text.htm",
          "blurb": "This function will return true if the clipboard contains text or false if it does not.",
          "syntax": "clipboard_has_text()"
        }
      ],
      "keys": []
    },
    {
      "name": "clipboard_set_text",
      "type": "key",
      "topics": [
        {
          "name": "clipboard_set_text",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/clipboard_set_text.htm",
          "blurb": "This function will set the clipboard to hold the defined string. You can set it to an empty string \"\" to effectively clear the clipboard of text.",
          "syntax": "clipboard_set_text(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "cloud_file_save",
      "type": "key",
      "topics": [
        {
          "name": "cloud_file_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Cloud_Saving/cloud_file_save.htm",
          "blurb": "This function will commit a file to the chosen cloud service for storage. The function will return a unique id value that should then be used in the appropriate asynchronous event to identify the DS map that is returned as a \"call back\" from the cloud service. The file should contain all the information that you need to save for your game as you can only store one single \"data blob\" to the cloud, and running this function again will overwrite any previously stored values (as will using the cloud_string_save() function). The description should be a short string of information that describes the save, eg: \"Level2, Stage2\".",
          "syntax": "cloud_file_save(file, description)"
        }
      ],
      "keys": []
    },
    {
      "name": "cloud_string_save",
      "type": "key",
      "topics": [
        {
          "name": "cloud_string_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Cloud_Saving/cloud_string_save.htm",
          "blurb": "This function will commit a string to the chosen cloud service for storage. The function will return a unique id value that should then be used in the appropriate asynchronous event to identify the DS map that is returned as a \"call back\" from the cloud service. The string should contain all the information that you need to save for your game as you can only store one single \"data blob\" to the cloud, and running this function again will overwrite any previously stored values (as will using the cloud_file_save() function). The description should be a short string of information that describes the save, eg: \"Level2, Stage2\".",
          "syntax": "cloud_string_save(string, description)"
        }
      ],
      "keys": []
    },
    {
      "name": "cloud_synchronise",
      "type": "key",
      "topics": [
        {
          "name": "cloud_synchronise",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Cloud_Saving/cloud_synchronise.htm",
          "blurb": "This function would normally be called at the start of a new game and is used to retrieve the current status of the cloud service at game start up. The function returns a unique id value which would then be used in the Asynchronous Cloud Event to retrieve the relevant information from the DS map that is created.",
          "syntax": "cloud_synchronise()"
        }
      ],
      "keys": []
    },
    {
      "name": "cmpfunc_always",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        },
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "cmpfunc_equal",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        },
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "cmpfunc_greater",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        },
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "cmpfunc_greaterequal",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        },
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "cmpfunc_less",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        },
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "cmpfunc_lessequal",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        },
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "cmpfunc_never",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        },
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "cmpfunc_notequal",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        },
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "Code Editor - Editing",
      "type": "key",
      "topics": [
        {
          "name": "Editing Code",
          "type": "topic",
          "url": "The_Asset_Editors/Code_Editor_Properties/Editing_Code.htm",
          "blurb": "When you start to use the script editor, it's simply a case of typing the code you want to have for the script asset or for the event, following the correct GML syntax. While you do this, you will get help from the auto-complete window:"
        }
      ],
      "keys": []
    },
    {
      "name": "Code Editor - JSDoc Comments",
      "type": "key",
      "topics": [
        {
          "name": "Feather Data Types",
          "type": "topic",
          "url": "The_Asset_Editors/Code_Editor_Properties/Feather_Data_Types.htm",
          "blurb": "Feather uses data types to provide smart syntax-checking when writing code, ensuring you don't use the wrong data type for a variable or function parameter."
        },
        {
          "name": "Feather Features",
          "type": "topic",
          "url": "The_Asset_Editors/Code_Editor_Properties/Feather_Features.htm",
          "blurb": "Feather provides intelligent code completion and improved syntax checking in your GML Code scripts, along with smart refactoring options."
        },
        {
          "name": "JSDoc Script Comments",
          "type": "topic",
          "url": "The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm",
          "blurb": "If you wish your custom functions to have code completion and to show the required arguments in a specific manner in the code editor, then you need to add some JSDoc style comments. These comments are used to tell the auto-complete feature how the function should be used and filled out in the script editor."
        }
      ],
      "keys": []
    },
    {
      "name": "Code Editor - Snippets",
      "type": "key",
      "topics": [
        {
          "name": "Code Snippets",
          "type": "topic",
          "url": "The_Asset_Editors/Code_Editor_Properties/Code_Snippets.htm",
          "blurb": "A very handy tool you have at your disposal when editing your code is the use of Code Snippets. When using the script editor, you can press F4 to open the code snippet pop-up, which permits you to select one of the commonly used code methods from a list:"
        }
      ],
      "keys": []
    },
    {
      "name": "Code Structure",
      "type": "key",
      "topics": [
        {
          "name": "Basic Code Structure",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Basic_Code_Structure.htm",
          "blurb": "Code is written in blocks and a typical code block consists of a set of instructions, called statements, that are then interpreted by GameMaker and used to make something happen within your game. That \"something\" can be as simple as adding 2 and 2 to get 4, or as complex as making an enemy run away when their health gets below a certain value. The actual structure of the program can vary greatly, depending on the functions it uses, but broken down to basics it just looks like this:"
        }
      ],
      "keys": []
    },
    {
      "name": "code_is_compiled",
      "type": "key",
      "topics": [
        {
          "name": "code_is_compiled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/code_is_compiled.htm",
          "blurb": "This function will return true if the platform compiles outside of the virtual machine, such as for the YYC and JS platforms.",
          "syntax": "code_is_compiled()"
        }
      ],
      "keys": []
    },
    {
      "name": "Collision Compatibility",
      "type": "key",
      "topics": [
        {
          "name": "Collision Compatibility Mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collision_Compatibility_Mode.htm",
          "blurb": "In the General Game Options for your project, you can enable \"Collision Compatibility Mode\" to switch to the legacy collision system. You would only need to do this if you noticed odd behaviour with collisions in your existing project(s) after upgrading to GameMaker 2022.1, which changed how collisions work."
        }
      ],
      "keys": []
    },
    {
      "name": "collision_circle",
      "type": "key",
      "topics": [
        {
          "name": "collision_circle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_circle.htm",
          "blurb": "Collision_circle creates a circular zone of the radius given by the user around the points x1,y1 and then checks that zone for a collision with any instance of the object specified by the argument \"obj\". This check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for must also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:",
          "syntax": "collision_circle(x1, y1, rad, obj, prec, notme)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_circle_list",
      "type": "key",
      "topics": [
        {
          "name": "collision_circle_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_circle_list.htm",
          "blurb": "This function is the same as the collision_circle() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y position of the center of the circular area to check along with the radius and the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.",
          "syntax": "collision_circle_list(x1, y1, rad, obj, prec, notme, list, ordered)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_ellipse",
      "type": "key",
      "topics": [
        {
          "name": "collision_ellipse",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_ellipse.htm",
          "blurb": "Collision_ellipse uses the first four arguments (x1,y1,x2,y2) to define the width and height of an ellipse within the current room and then checks to see if any object that is defined by the \"obj\" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:",
          "syntax": "collision_ellipse(x1, y1, x2, y2, obj, prec, notme)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_ellipse_list",
      "type": "key",
      "topics": [
        {
          "name": "collision_ellipse_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_ellipse_list.htm",
          "blurb": "This function is the same as the collision_ellipse() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the top left and bottom right of the elliptical area to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.",
          "syntax": "collision_ellipse_list(x1, y1, x2, y2, obj, prec, notme, list, ordered)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_line",
      "type": "key",
      "topics": [
        {
          "name": "collision_line",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_line.htm",
          "blurb": "Collision_line checks along a line from point x1,y1 to point x2,y2 for a collision with any instance of the object specified by the argument \"obj\". this check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for must also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:",
          "syntax": "collision_line(x1, y1, x2, y2, obj, prec, notme)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_line_list",
      "type": "key",
      "topics": [
        {
          "name": "collision_line_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_line_list.htm",
          "blurb": "This function is the same as the collision_line() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the start and end of the line to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.",
          "syntax": "collision_line_list(x1, y1, x2, y2, obj, prec, notme, list, ordered)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_point",
      "type": "key",
      "topics": [
        {
          "name": "collision_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_point.htm",
          "blurb": "Collision_point checks the point specified by the arguments x1,y1 for a collision with any instance of the object specified by the argument \"obj\". this check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for must also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:",
          "syntax": "collision_point(x, y, obj, prec, notme)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_point_list",
      "type": "key",
      "topics": [
        {
          "name": "collision_point_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_point_list.htm",
          "blurb": "This function is the same as the collision_point() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y position of the point to check and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.",
          "syntax": "collision_point_list(x, y, obj, prec, notme, list, ordered)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_rectangle",
      "type": "key",
      "topics": [
        {
          "name": "collision_rectangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_rectangle.htm",
          "blurb": "Collision_rectangle uses the first four arguments (x1,y1,x2,y2) to define an area within the current room and then checks to see if any object that is defined by the \"obj\" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:",
          "syntax": "collision_rectangle(x1, y1, x2, y2, obj, prec, notme)"
        }
      ],
      "keys": []
    },
    {
      "name": "collision_rectangle_list",
      "type": "key",
      "topics": [
        {
          "name": "collision_rectangle_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_rectangle_list.htm",
          "blurb": "This function is the same as the collision_rectangle() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the top left and bottom right of the area to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.",
          "syntax": "collision_rectangle_list(x1, y1, x2, y2, obj, prec, notme, list, ordered)"
        }
      ],
      "keys": []
    },
    {
      "name": "color_get_blue",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_blue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_blue.htm",
          "blurb": "This function returns the amount of blue used to make the given colour, with the value being between 0 and 255, where 0 is no blue and 255 is all blue. The following image illustrates this:",
          "syntax": "colour_get_blue(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "color_get_green",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_green",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_green.htm",
          "blurb": "This function returns the amount of green used to make the given colour, with the value being between 0 and 255, where 0 is no green and 255 is all green. The following image illustrates this:",
          "syntax": "colour_get_green(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "color_get_hue",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_hue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_hue.htm",
          "blurb": "This function will return the hue of the given colour. This is the \"pure\" colour tone which is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:",
          "syntax": "colour_get_hue(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "color_get_red",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_red",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_red.htm",
          "blurb": "This function returns the amount of red used to make the given colour, with the value being between 0 and 255, where 0 is no red and 255 is all red. The following image illustrates this:",
          "syntax": "colour_get_red(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "color_get_saturation",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_saturation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_saturation.htm",
          "blurb": "This function will return the saturation of the given colour. This is the amount of the colour tone that is mixed into the final colour and is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:",
          "syntax": "colour_get_saturation(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "color_get_value",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_value.htm",
          "blurb": "This function will return the value (luminosity) of the given colour. This is the amount of the \"light\" that is mixed into the final colour and is part of the hue, saturation and value method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:",
          "syntax": "colour_get_value(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "colour_get_blue",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_blue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_blue.htm",
          "blurb": "This function returns the amount of blue used to make the given colour, with the value being between 0 and 255, where 0 is no blue and 255 is all blue. The following image illustrates this:",
          "syntax": "colour_get_blue(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "colour_get_green",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_green",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_green.htm",
          "blurb": "This function returns the amount of green used to make the given colour, with the value being between 0 and 255, where 0 is no green and 255 is all green. The following image illustrates this:",
          "syntax": "colour_get_green(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "colour_get_hue",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_hue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_hue.htm",
          "blurb": "This function will return the hue of the given colour. This is the \"pure\" colour tone which is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:",
          "syntax": "colour_get_hue(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "colour_get_red",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_red",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_red.htm",
          "blurb": "This function returns the amount of red used to make the given colour, with the value being between 0 and 255, where 0 is no red and 255 is all red. The following image illustrates this:",
          "syntax": "colour_get_red(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "colour_get_saturation",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_saturation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_saturation.htm",
          "blurb": "This function will return the saturation of the given colour. This is the amount of the colour tone that is mixed into the final colour and is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:",
          "syntax": "colour_get_saturation(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "colour_get_value",
      "type": "key",
      "topics": [
        {
          "name": "colour_get_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_value.htm",
          "blurb": "This function will return the value (luminosity) of the given colour. This is the amount of the \"light\" that is mixed into the final colour and is part of the hue, saturation and value method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:",
          "syntax": "colour_get_value(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "Command Line Parameters",
      "type": "key",
      "topics": [
        {
          "name": "Command Line Parameters",
          "type": "topic",
          "url": "Settings/Command_Line_Parameters.htm",
          "blurb": "When creating games it is important that you play test the executable file to make sure that the final compile is correct and has no unforeseen errors or differences. However creating an executable means that, since you have no access to the debug console nor to the compiler window, it can be difficult to pin down and debug any problems that you may find. However there is a fix for this, and that is to use command line parameters to set certain properties when the executable version of the game is run, in turn permitting you to create output log files and test other special situations."
        }
      ],
      "keys": []
    },
    {
      "name": "Commenting Code",
      "type": "key",
      "topics": [
        {
          "name": "Commenting Code",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Commenting_Code.htm",
          "blurb": "When working in collaboration with other people, when dealing with a large project, or even just for your own reference and debugging, leaving comments in your event code and scripts is very important. In GameMaker you have various mechanisms to help you leave notes and comments about code sections and even whole blocks of code that can be seen in the event list of the object that you are currently editing. In this way you can leave notes to yourself and to your colleagues, or to explain a particularly tricky piece of code, or even just leave a reminder about what something does, or what you want something to do in the future."
        }
      ],
      "keys": []
    },
    {
      "name": "Compatibility Functions",
      "type": "key",
      "topics": [
        {
          "name": "Compatibility Functions",
          "type": "topic",
          "url": "Additional_Information/Compatibility_Functions.htm",
          "blurb": "When you are importing a project from a previous version of GameMaker you may see that the project has compatibility scripts added. In general, these scripts use the updated GameMaker Language (GML) functions to convert obsolete functions into the new way of doing things, and are a great way to learn how things should be done in GameMaker. However, there are a few functions that are used for compatibility only that should not be used\nanywhere else, and certainly not in your own projects. To help you identify these compatibility functions they are listed here, but we must stress that they should never be used outside of compatibility scripts:"
        }
      ],
      "keys": []
    },
    {
      "name": "Compatibility Scripts",
      "type": "key",
      "topics": [
        {
          "name": "Compatibility Scripts",
          "type": "topic",
          "url": "Additional_Information/Compatibility_Scripts.htm",
          "blurb": "For those users coming from previous versions of GameMaker,  it may be a bit confusing using GameMaker at first since there have been a number of changes made to the way that project assets, editing and coding are handled. These changes mean that the neither the IDE nor the GameMaker Language (GML) supports the items listed below. However, that does not mean that you\ncannot import games made with previous versions into GameMaker, as you can. GameMaker will automatically convert all legacy functions into compatibility scripts, which are scripts containing functions that convert\nthe legacy methods into the updated methods."
        }
      ],
      "keys": []
    },
    {
      "name": "Compile Errors",
      "type": "key",
      "topics": [
        {
          "name": "Compiler Errors",
          "type": "topic",
          "url": "Additional_Information/Errors/Compiler_Errors.htm",
          "blurb": "The second type of error that can be reported for your game is the compiler error. A compiler error happens when your game encounters some type of error that the syntax checker may not have been able to detect - it's very easy to forget to declare a variable or mistakenly type a string as a real, for example - or when an error is related to how you have set up the compile tools from the Platform Preferences for the target platform. These errors will be caught by GameMaker as the game is being compiled and this information will also be shown in the Compiler Error Output, as shown below:"
        }
      ],
      "keys": []
    },
    {
      "name": "Compiler Batch Files Scripts",
      "type": "key",
      "topics": [
        {
          "name": "Compiler Batch Files / Scripts",
          "type": "topic",
          "url": "Settings/Runner_Details/Compiler_Batch_Files.htm",
          "blurb": "The GameMaker compiler allows you to place Batch files (Windows) or Shell scripts (on macOS and Linux) in your project directory, and in the directory for each extension in your project."
        }
      ],
      "keys": []
    },
    {
      "name": "Compiling",
      "type": "key",
      "topics": [
        {
          "name": "Compiling",
          "type": "topic",
          "url": "Introduction/Compiling.htm",
          "blurb": "Compiling your game can mean one of two things: compiling it for testing, or compiling it to create a final executable package for a specific target platform. This page aims to explain both of those options in detail."
        }
      ],
      "keys": []
    },
    {
      "name": "Configurations",
      "type": "key",
      "topics": [
        {
          "name": "Configurations",
          "type": "topic",
          "url": "Settings/Configurations.htm",
          "blurb": "Due to the demands of cross platform development and the need for one product to be available and customised for different clients or devices or platforms, GameMaker includes configurations to make things simpler. Using this system, you can quickly switch between different splash screens, icons and included files and test or export only those that are relevant to the target platform or client at any time, all from the same base code."
        }
      ],
      "keys": []
    },
    {
      "name": "Constants",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        }
      ],
      "keys": []
    },
    {
      "name": "continue",
      "type": "key",
      "topics": [
        {
          "name": "continue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/continue.htm",
          "blurb": "The continue statement has the following basic syntax:"
        }
      ],
      "keys": []
    },
    {
      "name": "cos",
      "type": "key",
      "topics": [
        {
          "name": "cos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/cos.htm",
          "blurb": "In a right angled triangle cos(val) = Adjacent / Hypotenuse where val is one of the three angles. This function will always return a number between 1 and -1.",
          "syntax": "cos(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "cull_clockwise",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_cullmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_cullmode.htm",
          "blurb": "This function can be used to retrieve the backface culling mode. The returned value will be one of the following constants (the default value is cull_noculling):",
          "syntax": "gpu_get_cullmode()"
        },
        {
          "name": "gpu_set_cullmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_cullmode.htm",
          "blurb": "This function can be used to set the backface culling mode. A polygon (primitive) has a front and a back side. The front side is said to be the side where the vertices are defined in counter-clockwise order. Normally both sides are drawn, but if you make a closed shape (like a pyramid) then this is a waste of processing power because the back side of the triangle can never be seen. It's in these cases that you can switch on backface culling, as this saves about half the amount of drawing time, although it means you have the task of defining your polygons in the correct way to prevent issues.",
          "syntax": "gpu_set_cullmode(cullmode)"
        }
      ],
      "keys": []
    },
    {
      "name": "cull_counterclockwise",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_cullmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_cullmode.htm",
          "blurb": "This function can be used to retrieve the backface culling mode. The returned value will be one of the following constants (the default value is cull_noculling):",
          "syntax": "gpu_get_cullmode()"
        },
        {
          "name": "gpu_set_cullmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_cullmode.htm",
          "blurb": "This function can be used to set the backface culling mode. A polygon (primitive) has a front and a back side. The front side is said to be the side where the vertices are defined in counter-clockwise order. Normally both sides are drawn, but if you make a closed shape (like a pyramid) then this is a waste of processing power because the back side of the triangle can never be seen. It's in these cases that you can switch on backface culling, as this saves about half the amount of drawing time, although it means you have the task of defining your polygons in the correct way to prevent issues.",
          "syntax": "gpu_set_cullmode(cullmode)"
        }
      ],
      "keys": []
    },
    {
      "name": "cull_noculling",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_cullmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_cullmode.htm",
          "blurb": "This function can be used to retrieve the backface culling mode. The returned value will be one of the following constants (the default value is cull_noculling):",
          "syntax": "gpu_get_cullmode()"
        },
        {
          "name": "gpu_set_cullmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_cullmode.htm",
          "blurb": "This function can be used to set the backface culling mode. A polygon (primitive) has a front and a back side. The front side is said to be the side where the vertices are defined in counter-clockwise order. Normally both sides are drawn, but if you make a closed shape (like a pyramid) then this is a waste of processing power because the back side of the triangle can never be seen. It's in these cases that you can switch on backface culling, as this saves about half the amount of drawing time, although it means you have the task of defining your polygons in the correct way to prevent issues.",
          "syntax": "gpu_set_cullmode(cullmode)"
        }
      ],
      "keys": []
    },
    {
      "name": "current_day",
      "type": "key",
      "topics": [
        {
          "name": "current_day",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_day.htm",
          "blurb": "This read only variable will return the day as a value from 1 to 31, depending on the month.",
          "syntax": "current_day"
        }
      ],
      "keys": []
    },
    {
      "name": "current_hour",
      "type": "key",
      "topics": [
        {
          "name": "current_hour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_hour.htm",
          "blurb": "This read only variable will return the hour that corresponds to the current moment based on the default time zone for the system (ie: local time). You can change the base time zone to use with the function date_set_timezone().",
          "syntax": "current_hour"
        }
      ],
      "keys": []
    },
    {
      "name": "current_minute",
      "type": "key",
      "topics": [
        {
          "name": "current_minute",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_minute.htm",
          "blurb": "This read only variable will return the minutes that correspond to the current moment.",
          "syntax": "current_minute"
        }
      ],
      "keys": []
    },
    {
      "name": "current_month",
      "type": "key",
      "topics": [
        {
          "name": "current_month",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_month.htm",
          "blurb": "This read only variable returns the current month as a numeric value where 1 is January and 12 is December.",
          "syntax": "current_month"
        }
      ],
      "keys": []
    },
    {
      "name": "current_second",
      "type": "key",
      "topics": [
        {
          "name": "current_second",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_second.htm",
          "blurb": "This read only variable will return the seconds that correspond to the current moment.",
          "syntax": "current_second"
        }
      ],
      "keys": []
    },
    {
      "name": "current_time",
      "type": "key",
      "topics": [
        {
          "name": "current_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_time.htm",
          "blurb": "This read only variable will return the number of milliseconds that have passed since the game was started.",
          "syntax": "current_time"
        }
      ],
      "keys": []
    },
    {
      "name": "current_weekday",
      "type": "key",
      "topics": [
        {
          "name": "current_weekday",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_weekday.htm",
          "blurb": "This read only variable will return the weekday as a value, where Sunday is 0 and Saturday is 6.",
          "syntax": "current_weekday"
        }
      ],
      "keys": []
    },
    {
      "name": "current_year",
      "type": "key",
      "topics": [
        {
          "name": "current_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_year.htm",
          "blurb": "This read only variable will return the current year.",
          "syntax": "current_year"
        }
      ],
      "keys": []
    },
    {
      "name": "cursor_sprite",
      "type": "key",
      "topics": [
        {
          "name": "cursor_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/cursor_sprite.htm",
          "blurb": "Setting this variable will instruct GameMaker to use the designated sprite as a cursor (basically setting it to the current mouse x/y position every step). The default value is -1 which is no sprite for the cursor, but you can assign any sprite index from the game assets or that has been imported from an external resource. Please note that there is no way to control the animation speed or image_index, so if the sprite has sub-images, these will be cycled at the same speed as the room speed. To remove the cursor sprite, you can set this variable to -1 again.",
          "syntax": "cursor_sprite"
        }
      ],
      "keys": []
    },
    {
      "name": "darccos",
      "type": "key",
      "topics": [
        {
          "name": "darccos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/darccos.htm",
          "blurb": "Returns the inverse cosine of x, in that if dcos(val)=n, darccos(n)=val, and the resulting number will be between 180 and 0.",
          "syntax": "darccos(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "darcsin",
      "type": "key",
      "topics": [
        {
          "name": "darcsin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/darcsin.htm",
          "blurb": "Returns the inverse sine of x, in that if dsin(x)=n, darcsin(n)=x, and the resulting number will be between -90 and 90.",
          "syntax": "darcsin(x)"
        }
      ],
      "keys": []
    },
    {
      "name": "darctan",
      "type": "key",
      "topics": [
        {
          "name": "darctan",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/darctan.htm",
          "blurb": "Returns the inverse tangent of x. This will accept any number as, unlike dtan(), darctan() asymptotes are on the y axis so it just means you'll never get returned a number greater than 90 or less than -90.",
          "syntax": "darctan(x)"
        }
      ],
      "keys": []
    },
    {
      "name": "darctan2",
      "type": "key",
      "topics": [
        {
          "name": "darctan2",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/darctan2.htm",
          "blurb": "This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike darctan() the function darctan2() is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant.",
          "syntax": "darctan2(y, x)"
        }
      ],
      "keys": []
    },
    {
      "name": "Data Types",
      "type": "key",
      "topics": [
        {
          "name": "Data Types",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Data_Types.htm",
          "blurb": "In previous section we covered variables and their scoping rules but little has been said about the different data types that a variable can store. Therefore this section explains the different types and what they can be used for."
        }
      ],
      "keys": []
    },
    {
      "name": "date_compare_date",
      "type": "key",
      "topics": [
        {
          "name": "date_compare_date",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_compare_date.htm",
          "blurb": "With this function you can check two dates to see which one is the earlier or later than the other. The function returns -1 if date1 is earlier, 0 if both dates are the same, and 1 if date1 is later.",
          "syntax": "date_compare_date( date1, date2 )"
        }
      ],
      "keys": []
    },
    {
      "name": "date_compare_datetime",
      "type": "key",
      "topics": [
        {
          "name": "date_compare_datetime",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_compare_datetime.htm",
          "blurb": "With this function you can check two dates and times to see which one is the earlier or later than the other. The function returns -1 if date1 is earlier, 1 if date1 is later and 0 if they are the same, although since this takes time into account as well, a 0 for matching is very rare (it literally has to be the same second of the same day of the same month of the same year to return a 0).",
          "syntax": "date_compare_datetime(date1, date2)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_compare_time",
      "type": "key",
      "topics": [
        {
          "name": "date_compare_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_compare_time.htm",
          "blurb": "With this function you can check two dates and times to see which one has the time component earlier or later than the other. The function returns -1 if datetime1 is earlier, 1 if datetime1 is later and 0 if they are the same, and it ignores the date, so literally just which of the times is further through its given day.",
          "syntax": "date_compare_time(datetime1, datetime2)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_create_datetime",
      "type": "key",
      "topics": [
        {
          "name": "date_create_datetime",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_create_datetime.htm",
          "blurb": "This function will create a datetime value from the component given as the arguments.",
          "syntax": "date_create_datetime(year, month, day, hour, minute, second)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_current_datetime",
      "type": "key",
      "topics": [
        {
          "name": "date_current_datetime",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_current_datetime.htm",
          "blurb": "Returns the date-time value of the current moment. The time returned is based on the default time zone for the system (ie: local time). You can change the base time zone to use with the function date_set_timezone().",
          "syntax": "date_current_datetime()"
        }
      ],
      "keys": []
    },
    {
      "name": "date_date_of",
      "type": "key",
      "topics": [
        {
          "name": "date_date_of",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_date_of.htm",
          "blurb": "Returns the date value of the given datetime.",
          "syntax": "date_date_of(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_date_string",
      "type": "key",
      "topics": [
        {
          "name": "date_date_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_date_string.htm",
          "blurb": "With this function you can create a string containing the given date, formatted as day/month/year.",
          "syntax": "date_date_string(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_datetime_string",
      "type": "key",
      "topics": [
        {
          "name": "date_datetime_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_datetime_string.htm",
          "blurb": "With this function you can create a string containing the given datetime, formatted for the system or device that is running the game when the function is called.",
          "syntax": "date_datetime_string(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_day_span",
      "type": "key",
      "topics": [
        {
          "name": "date_day_span",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_day_span.htm",
          "blurb": "With this function you can get the number of days between two dates. This value is always positive, and incomplete days will be returned as a fraction.",
          "syntax": "date_day_span(date1, date2)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_days_in_month",
      "type": "key",
      "topics": [
        {
          "name": "date_days_in_month",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_days_in_month.htm",
          "blurb": "With this function you can get the number of days that the given month has, either 28, 29, 30 or 31.",
          "syntax": "date_days_in_month(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_days_in_year",
      "type": "key",
      "topics": [
        {
          "name": "date_days_in_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_days_in_year.htm",
          "blurb": "With this function you can get the number of days that the given year has, returning 365 for a normal year, and 366 for a leap year.",
          "syntax": "date_days_in_year(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_day",
      "type": "key",
      "topics": [
        {
          "name": "date_get_day",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_day.htm",
          "blurb": "This function returns the day (from 1 to 31) of the given datetime.",
          "syntax": "date_get_day(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_day_of_year",
      "type": "key",
      "topics": [
        {
          "name": "date_get_day_of_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_day_of_year.htm",
          "blurb": "This function returns the day (from 1 to 366) within the year of the given datetime.",
          "syntax": "date_get_day_of_year( date )"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_hour",
      "type": "key",
      "topics": [
        {
          "name": "date_get_hour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_hour.htm",
          "blurb": "This function returns the hour of the given datetime value.",
          "syntax": "date_get_hour(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_hour_of_year",
      "type": "key",
      "topics": [
        {
          "name": "date_get_hour_of_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_hour_of_year.htm",
          "blurb": "This function returns the hour of the given datetime value within the year (from the total number of hours for the year, taking into account leap years).",
          "syntax": "date_get_hour_of_year(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_minute",
      "type": "key",
      "topics": [
        {
          "name": "date_get_minute",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_minute.htm",
          "blurb": "This function returns the minute of the given datetime value.",
          "syntax": "date_get_minute(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_minute_of_year",
      "type": "key",
      "topics": [
        {
          "name": "date_get_minute_of_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_minute_of_year.htm",
          "blurb": "This function returns the minute of the given datetime value within the year (from the total number of minutes for the year, taking into account leap years).",
          "syntax": "date_get_minute_of_year(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_month",
      "type": "key",
      "topics": [
        {
          "name": "date_get_month",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_month.htm",
          "blurb": "This function returns the month of the given datetime value.",
          "syntax": "date_get_month(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_second",
      "type": "key",
      "topics": [
        {
          "name": "date_get_second",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_second.htm",
          "blurb": "This function returns the second of the given datetime value.",
          "syntax": "date_get_second(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_second_of_year",
      "type": "key",
      "topics": [
        {
          "name": "date_get_second_of_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_second_of_year.htm",
          "blurb": "This function returns the second of the given datetime value within the year (from the total number of seconds for the year, taking into account leap years).",
          "syntax": "date_get_second_of_year( date )"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_timezone",
      "type": "key",
      "topics": [
        {
          "name": "date_get_timezone",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_timezone.htm",
          "blurb": "This function gets the base time zone being used for all the rest of the date and time functions. This time zone can either be local (as set by the system) or UTC, and the function will return one of the following constants:",
          "syntax": "date_get_timezone()"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_week",
      "type": "key",
      "topics": [
        {
          "name": "date_get_week",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_week.htm",
          "blurb": "This function returns the week of the given datetime value within the year.",
          "syntax": "date_get_week(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_weekday",
      "type": "key",
      "topics": [
        {
          "name": "date_get_weekday",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_weekday.htm",
          "blurb": "This function returns the week day value of the given datetime. This will be a value from 0 to 6.",
          "syntax": "date_get_weekday(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_get_year",
      "type": "key",
      "topics": [
        {
          "name": "date_get_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_year.htm",
          "blurb": "This function returns the year of the given datetime.",
          "syntax": "date_get_year(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_hour_span",
      "type": "key",
      "topics": [
        {
          "name": "date_hour_span",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_hour_span.htm",
          "blurb": "With this function you can get the number of hours between two dates. This value is always positive, and incomplete hours will be returned as a fraction.",
          "syntax": "date_hour_span(date1, date2)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_inc_day",
      "type": "key",
      "topics": [
        {
          "name": "date_inc_day",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_day.htm",
          "blurb": "With this function you can increment a given datetime value by a specific number of days, and it will return the new datetime value.",
          "syntax": "date_inc_day(date, amount)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_inc_hour",
      "type": "key",
      "topics": [
        {
          "name": "date_inc_hour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_hour.htm",
          "blurb": "With this function you can increment a given datetime value by a specific number of hours, and it will return the new datetime value.",
          "syntax": "date_inc_hour(date, amount)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_inc_minute",
      "type": "key",
      "topics": [
        {
          "name": "date_inc_minute",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_minute.htm",
          "blurb": "With this function you can increment a given datetime value by a specific number of minutes, and it will return the new datetime value.",
          "syntax": "date_inc_minute( date, amount )"
        }
      ],
      "keys": []
    },
    {
      "name": "date_inc_month",
      "type": "key",
      "topics": [
        {
          "name": "date_inc_month",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_month.htm",
          "blurb": "With this function you can increment a given datetime value by a specific number of months, and it will return the new datetime value.",
          "syntax": "date_inc_month( date, amount )"
        }
      ],
      "keys": []
    },
    {
      "name": "date_inc_second",
      "type": "key",
      "topics": [
        {
          "name": "date_inc_second",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_second.htm",
          "blurb": "With this function you can increment a given datetime value by a specific number of seconds, and it will return the new datetime value.",
          "syntax": "date_inc_second(date, amount)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_inc_week",
      "type": "key",
      "topics": [
        {
          "name": "date_inc_week",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_week.htm",
          "blurb": "With this function you can increment a given datetime value by a specific number of weeks, and it will return the new datetime value.",
          "syntax": "date_inc_week(date, amount)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_inc_year",
      "type": "key",
      "topics": [
        {
          "name": "date_inc_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_year.htm",
          "blurb": "With this function you can increment a given datetime value by a specific number of years, and it will return the new datetime value.",
          "syntax": "date_inc_year(date, amount)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_is_today",
      "type": "key",
      "topics": [
        {
          "name": "date_is_today",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_is_today.htm",
          "blurb": "This function will return true if the given datetime value is the day it is being checked on (ie: today), or false otherwise. This can be a handy function for things like Easter Eggs in your games, or for unlocking seasonal content. Note that this function will be affected by the time zone set (default is local time) which you can change using the date_set_timezone() function.",
          "syntax": "date_is_today(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_leap_year",
      "type": "key",
      "topics": [
        {
          "name": "date_leap_year",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_leap_year.htm",
          "blurb": "This function will return true if the year component of the given datetime value is a leap year or false otherwise. This can be a handy function for things like Easter Eggs in your games, or for unlocking special content.",
          "syntax": "date_leap_year(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_minute_span",
      "type": "key",
      "topics": [
        {
          "name": "date_minute_span",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_minute_span.htm",
          "blurb": "With this function you can get the number of minutes between two dates. This value is always positive, and incomplete minutes will be returned as a fraction.",
          "syntax": "date_minute_span(date1, date2)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_month_span",
      "type": "key",
      "topics": [
        {
          "name": "date_month_span",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_month_span.htm",
          "blurb": "With this function you can get the number of months between two dates. This value is always positive, and incomplete months will be returned as a fraction.",
          "syntax": "date_month_span(date1, date2)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_second_span",
      "type": "key",
      "topics": [
        {
          "name": "date_second_span",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_second_span.htm",
          "blurb": "With this function you can get the number of seconds between two dates. The return value is always positive and will be a whole number.",
          "syntax": "date_second_span(date1, date2)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_set_timezone",
      "type": "key",
      "topics": [
        {
          "name": "date_set_timezone",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_set_timezone.htm",
          "blurb": "Sets the base time zone to use for all the rest of the date and time functions. This time zone can either be local (as set by the system) or UTC, and you would use one of the following constants to define which is being used (by default this is local time):",
          "syntax": "date_set_timezone(timezone)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_time_of",
      "type": "key",
      "topics": [
        {
          "name": "date_time_of",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_time_of.htm",
          "blurb": "Returns the time value of the given datetime. The time returned ignores Daylight Saving Time (and so is Universal Time) and would normally be used in conjunction with another date/time handling function.",
          "syntax": "date_time_of(date)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_time_string",
      "type": "key",
      "topics": [
        {
          "name": "date_time_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_time_string.htm",
          "blurb": "With this function you can create a string containing the given time, formatted for the system or device that is running the game when the function is called.",
          "syntax": "date_time_string( date )"
        }
      ],
      "keys": []
    },
    {
      "name": "date_valid_datetime",
      "type": "key",
      "topics": [
        {
          "name": "date_valid_datetime",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_valid_datetime.htm",
          "blurb": "With this function you can check a datetime value to see if it is valid (returns true) or not (returns false). Note that this function will only consider a valid datetime as being after 1/1/1970 and anything before that will return false, so the earliest you can check would be:",
          "syntax": "date_valid_datetime(year, month, day, hour, minute, second)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_week_span",
      "type": "key",
      "topics": [
        {
          "name": "date_week_span",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_week_span.htm",
          "blurb": "With this function you can get the number of weeks between two dates. This value is always positive, and incomplete weeks will be returned as a fraction.",
          "syntax": "date_week_span(date1, date2)"
        }
      ],
      "keys": []
    },
    {
      "name": "date_year_span",
      "type": "key",
      "topics": [
        {
          "name": "date_year_span",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_year_span.htm",
          "blurb": "With this function you can get the number of years between two dates. This value is always positive, and incomplete years will be returned as a fraction.",
          "syntax": "date_year_span(date1, date2)"
        }
      ],
      "keys": []
    },
    {
      "name": "dcos",
      "type": "key",
      "topics": [
        {
          "name": "dcos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dcos.htm",
          "blurb": "In a right angled triangle cos(val) = Adjacent / Hypotenuse where val is one of the three angles. This function will always return a number between 1 and -1.",
          "syntax": "dcos(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "debug_event",
      "type": "key",
      "topics": [
        {
          "name": "debug_event",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/debug_event.htm",
          "blurb": "This function generates a custom debug event that will be shown in the Graph View of the debugger when a game is being run in Debug Mode. If you require messages to be displayed when not in debug mode, use show_debug_message().",
          "syntax": "debug_event(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "debug_get_callstack",
      "type": "key",
      "topics": [
        {
          "name": "debug_get_callstack",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/debug_get_callstack.htm",
          "blurb": "This function generates an array of strings as the \"callstack\" where the current script is listed first, and then all the other scripts that were run in order for the current script to be executed. The exact string format will vary depending on the target platform chosen, but it will mostly have the script/event name, then a colon : and the line number, similar to this:",
          "syntax": "debug_get_callstack([maxdepth])"
        }
      ],
      "keys": []
    },
    {
      "name": "debug_mode",
      "type": "key",
      "topics": [
        {
          "name": "debug_mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/debug_mode.htm",
          "blurb": "This read only variable returns true when the game is being played in debug mode and false when being played as normal.",
          "syntax": "debug_mode"
        }
      ],
      "keys": []
    },
    {
      "name": "Debugger",
      "type": "key",
      "topics": [
        {
          "name": "The Debugger",
          "type": "topic",
          "url": "IDE_Tools/The_Debugger.htm",
          "blurb": "The Debugger is a powerful tool for checking your game, and is especially useful for tracking down errors and bugs in your code, as well as checking that scripts are run when they should be, and that variables and arrays contain the values you expect etc... You can start the Debugger by running your game from GameMaker IDE using the Debug button  at the top of the IDE, or by going to the Build menu and selecting \"Debug\"."
        }
      ],
      "keys": []
    },
    {
      "name": "Debugger - Profiling",
      "type": "key",
      "topics": [
        {
          "name": "The Profiler",
          "type": "topic",
          "url": "IDE_Tools/The_Debugger/The_Profiler.htm",
          "blurb": "The Debugger permits you to step through your code and find any issues with the code base, but sometimes you need to check for subtler details in order to properly optimise your games. The Profile option helps to do just that by giving you a performance overview, showing the time it takes to call functions, scripts, and even how long it took a specific event to complete."
        }
      ],
      "keys": []
    },
    {
      "name": "Debugger - Watches",
      "type": "key",
      "topics": [
        {
          "name": "Watches",
          "type": "topic",
          "url": "IDE_Tools/The_Debugger/Watches.htm",
          "blurb": "The whole idea of the Debugger is to permit you to \"watch\" every detail of your game. This is done using \"watch windows\" which, by default, are opened in the Output window docked at the bottom of the IDE. You can click on each of the different tabs to see the watches that they contain, some of which can be made to update in real time (when real time debugging  is enabled from the Debugger toolbar) while others will require the debugger to have paused the game."
        }
      ],
      "keys": []
    },
    {
      "name": "Debugging",
      "type": "key",
      "topics": [
        {
          "name": "Debugging",
          "type": "topic",
          "url": "Introduction/Debugging.htm",
          "blurb": "When programming your game, whether using GML Code or GML Visual, it can be very easy to make mistakes - using the wrong variables, passing the wrong arguments, or using the wrong functions are just some of the most common errors we all make - and these mistakes are not always detected by the syntax checker that is included with the script/action editor. That means that these mistakes will only become apparent when you actually run or compile your game, and even then it can sometimes be difficult to know exactly what is going wrong. It can therefore be of vital importance to know how your game is performing on the chosen device, as well as see what instances are in the room, what global variables have been created and a whole host of other details. Checking these things is called \"debugging your code\", and any errors or issues you may find are called \"bugs\"."
        },
        {
          "name": "The Debugger",
          "type": "topic",
          "url": "IDE_Tools/The_Debugger.htm",
          "blurb": "The Debugger is a powerful tool for checking your game, and is especially useful for tracking down errors and bugs in your code, as well as checking that scripts are run when they should be, and that variables and arrays contain the values you expect etc... You can start the Debugger by running your game from GameMaker IDE using the Debug button  at the top of the IDE, or by going to the Build menu and selecting \"Debug\"."
        }
      ],
      "keys": []
    },
    {
      "name": "degtorad",
      "type": "key",
      "topics": [
        {
          "name": "degtorad",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/degtorad.htm",
          "blurb": "In GM all the trigonometric functions work in radians, but most people work in degrees and this means that to convert your degrees into radians you need to use this function. For example, degtorad(180) returns 3.14159265 radians. This function translates degrees into radians using the formula:",
          "syntax": "degtorad(deg)"
        }
      ],
      "keys": []
    },
    {
      "name": "delete",
      "type": "key",
      "topics": [
        {
          "name": "delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/delete.htm",
          "blurb": "The delete operator is used to de-reference a struct, and has the following syntax:"
        }
      ],
      "keys": []
    },
    {
      "name": "delta_time",
      "type": "key",
      "topics": [
        {
          "name": "delta_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/delta_time.htm",
          "blurb": "This variable returns the frame delta time, which is the time difference between the previous frame and the current frame. This value is in microseconds, where 1 microsecond is 1,000,000th of a second.",
          "syntax": "delta_time"
        }
      ],
      "keys": []
    },
    {
      "name": "depth",
      "type": "key",
      "topics": [
        {
          "name": "depth",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/depth.htm",
          "blurb": "When you create an object you can assign it an initial depth which defines how the instances of that object will be drawn in the room when the game is being played and this variable can be used to get and to change that depth value while the game is running. You would normally not need to use this variable as you should be setting instances to be added to discreet layers, which in turn are set to a specific depth, but it may be that you want to change the depth of an instance using this value, in which case a \"temporary layer\" will be created specifically for the instance at the given depth. Note that when no instances are on the same depth then this temporary layer will be removed from memory (unlike regular layers which will remain even if they have nothing on them).",
          "syntax": "depth"
        }
      ],
      "keys": []
    },
    {
      "name": "development",
      "type": "key",
      "topics": [
        {
          "name": "GameMaker IDE",
          "type": "topic",
          "url": "The_IDE/The_IDE.htm",
          "blurb": "GameMaker's Integrated Development Environment (or IDE) is the main interface where you create your games and make use of all functionality provided by the software. Essentially, the program itself -- from the Start Screen to every editor window you use to make your game -- is known and referred to as the IDE throughout the manual and various tutorials."
        }
      ],
      "keys": []
    },
    {
      "name": "Device Manager",
      "type": "key",
      "topics": [
        {
          "name": "The Device Manager",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/The_Device_Manager.htm",
          "blurb": "The Device Manager is accessed by clicking  on the pencil button  within the Target List:"
        }
      ],
      "keys": []
    },
    {
      "name": "device_emulator",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_get_tilt_x",
      "type": "key",
      "topics": [
        {
          "name": "device_get_tilt_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_get_tilt_x.htm",
          "blurb": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90°. The image below shows how each if the available functions relates to the device:",
          "syntax": "device_get_tilt_x()"
        }
      ],
      "keys": []
    },
    {
      "name": "device_get_tilt_y",
      "type": "key",
      "topics": [
        {
          "name": "device_get_tilt_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_get_tilt_y.htm",
          "blurb": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90°. The image below shows how each if the available functions relates to the device:",
          "syntax": "device_get_tilt_y()"
        }
      ],
      "keys": []
    },
    {
      "name": "device_get_tilt_z",
      "type": "key",
      "topics": [
        {
          "name": "device_get_tilt_z",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_get_tilt_z.htm",
          "blurb": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90°. The image below shows how each if the available functions relates to the device:",
          "syntax": "device_get_tilt_z()"
        }
      ],
      "keys": []
    },
    {
      "name": "device_ios_ipad",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_ios_ipad_retina",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_ios_iphone",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_ios_iphone_retina",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_ios_iphone5",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_ios_iphone6",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_ios_iphone6plus",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_ios_unknown",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "device_is_keypad_open",
      "type": "key",
      "topics": [
        {
          "name": "device_is_keypad_open",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_is_keypad_open.htm",
          "blurb": "This does a check of the device for a keypad and if one is available it returns true otherwise it returns false. Please note that this function is mainly for use with Android devices",
          "syntax": "device_is_keypad_open"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_check_button",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_check_button",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_check_button.htm",
          "blurb": "This function returns true or false depending on whether the given mouse button is being held down on the given device. For the mouse button you can supply one of the constants listed on this page.",
          "syntax": "device_mouse_check_button(device, button)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_check_button_pressed",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_check_button_pressed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_check_button_pressed.htm",
          "blurb": "This function returns true or false depending on whether the device that you specify has been \"touched\" (clicked) or not. The device argument refers to the touch number, which can be from 0 to n and the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs (most devices will support at least 4 simultaneous touches). This function is only triggered once by the actual pressing action, and the constants listed on this page can be used to check for the mouse buttons. Note that mb_right will only be detected if a double tap touch is detected and held on the second tap (this behavior can be disabled using the function device_mouse_dbclick_enable()).",
          "syntax": "device_mouse_check_button_pressed(device, button)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_check_button_released",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_check_button_released",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_check_button_released.htm",
          "blurb": "This function returns true or false depending on whether the device touch that you specify has been released or not. The device argument refers to the device touch number, which can be from 0 to n and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs (most devices will support at least 4 simultaneous touches). This function is only triggered once by the actual releasing action, and the constants listed on this page can be used to check for the mouse buttons. Note that mb_right will only have been detected if a double tap touch is detected and held on the second tap before release (this behavior can be disabled using the function device_mouse_dbclick_enable()).",
          "syntax": "device_mouse_check_button_released(device, button)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_dbclick_enable",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_dbclick_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_dbclick_enable.htm",
          "blurb": "This function can be used to set the device to detect a double tap of the mb_left (left mouse button) as an mb_right (right mouse button) input.",
          "syntax": "device_mouse_dbclick_enable(bool)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_raw_x",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_raw_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_raw_x.htm",
          "blurb": "This function returns the raw x position of a touch on the device. What this means is that it returns the actual device definition of the x position that is being touched, not the GameMaker one, and as such will ignore things like view position and scaling. Note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs",
          "syntax": "device_mouse_raw_x(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_raw_y",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_raw_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_raw_y.htm",
          "blurb": "This function returns raw y position of the touch on a device. What this means is that it returns the actual device definition of the y position that is being touched, not the GameMaker one, and as such will ignore things like view position and scaling. Note that the maximum number of device touches that can be detected will depend very much on the device being used and the OS it runs",
          "syntax": "device_mouse_raw_y(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_x",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_x.htm",
          "blurb": "This function returns the x position of a touch on the device. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
          "syntax": "device_mouse_x(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_x_to_gui",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_x_to_gui",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_x_to_gui.htm",
          "blurb": "This function returns the x position of the touch on the device in relation to the GUI layer. Since the GUI layer can be set to be a different size independently of the screen resolution and the room size, it can sometimes be complicated to get the exact point on the GUI layer that a user has touched the screen. With this function you can get that position based on the actual GUI size, making GUI buttons and HUD elements easier to create and interact with. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched, and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
          "syntax": "device_mouse_x_to_gui(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_y",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_y.htm",
          "blurb": "This function returns the y position of a touch on the device. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
          "syntax": "device_mouse_y(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_mouse_y_to_gui",
      "type": "key",
      "topics": [
        {
          "name": "device_mouse_y_to_gui",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_y_to_gui.htm",
          "blurb": "This function returns the y position of the touch on the device in relation to the GUI layer. Since the GUI layer can be set to be a different size independently of the screen resolution and the room size, it can sometimes be complicated to get the exact point on the GUI layer that a user has touched the screen. With this function you can get that position based on the actual GUI size, making GUI buttons and HUD elements easier to create and interact with. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched, and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
          "syntax": "device_mouse_y_to_gui(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "device_tablet",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "direction",
      "type": "key",
      "topics": [
        {
          "name": "direction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/direction.htm",
          "blurb": "All instances in GameMaker have certain \"built in\" properties that you can use and set to govern how they look and behave. Direction is one of those properties and can be used to set the direction of movement of the instance when the instance has a speed other than 0. Note that directions in GameMaker are usually calculated as 0° being right, 90° being up, 180° being left and 270° being down, and that the gravity and\ngravity_direction variables can modify the direction value when they are used in your games.",
          "syntax": "direction"
        }
      ],
      "keys": []
    },
    {
      "name": "directory_create",
      "type": "key",
      "topics": [
        {
          "name": "directory_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_Directories/directory_create.htm",
          "blurb": "This function will creates a directory with the given name in the save area.",
          "syntax": "directory_create(dname)"
        }
      ],
      "keys": []
    },
    {
      "name": "directory_destroy",
      "type": "key",
      "topics": [
        {
          "name": "directory_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_Directories/directory_destroy.htm",
          "blurb": "This function will remove a directory with the given name in the save area.",
          "syntax": "directory_destroy(dname)"
        }
      ],
      "keys": []
    },
    {
      "name": "directory_exists",
      "type": "key",
      "topics": [
        {
          "name": "directory_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_Directories/directory_exists.htm",
          "blurb": "This function will return true if the indicated directory exists or false if it does not. The specified name must include the full path, not a relative path and by default you cannot access any directories from out-with the game bundle as all games are sandboxed (see the section on the File System for more information).",
          "syntax": "directory_exists(dname)"
        }
      ],
      "keys": []
    },
    {
      "name": "Disabling Extensions",
      "type": "key",
      "topics": [
        {
          "name": "How to Disable Extensions?",
          "type": "topic",
          "url": "The_Asset_Editors/Extension_Creation/Disabling_Extensions.htm",
          "blurb": "GameMaker has extensions for some target platforms, e.g. Steamworks and GDK."
        }
      ],
      "keys": []
    },
    {
      "name": "display_aa",
      "type": "key",
      "topics": [
        {
          "name": "display_reset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_reset.htm",
          "blurb": "This function Resets the display settings to the ones that were set when the game was started, but also allows you to change the current level of full screen anti-aliasing being used and whether to use vertical synchronisation. The available anti-aliasing levels are 0,2,4 and 8, with the default startup value being set to 0, and the default v-sync setting is false (off). Switching v-sync on may give a smoother gaming experience but it will also need more processing power and so its impact must be considered careful before use, and the same goes for the anti-aliasing where the higher the number the more processing that is required.",
          "syntax": "display_reset(aa, vsync)"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_dpi_x",
      "type": "key",
      "topics": [
        {
          "name": "display_get_dpi_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_dpi_x.htm",
          "blurb": "Dots per inch (DPI) is a measure of spatial printing or video dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm). When working on mobile devices (in particular Android devices) this is an important factor to take into consideration as what may be appropriate for one display resolution, may not be appropriate for another. For example, you may have two displays with the same resolution of 400 x 800, but display 1 has a dpi of 60 and display 2 has a dpi of 30. In this case, any text or image displayed on display 2 will appear much larger, even though the actual resolution is the same.",
          "syntax": "display_get_dpi_x()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_dpi_y",
      "type": "key",
      "topics": [
        {
          "name": "display_get_dpi_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_dpi_y.htm",
          "blurb": "Dots per inch (DPI) is a measure of spatial printing or video dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm). When working on mobile devices (in particular Android devices) this is an important factor to take into consideration as what may be appropriate for one display resolution, may not be appropriate for another. For example, you may have two displays with the same resolution of 400 x 800, but display 1 has a dpi of 60\nand display 2 has a dpi of 30. In this case, any text or image displayed on display 2 will appear much larger, even though the actual resolution is the same.",
          "syntax": "display_get_dpi_y()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_frequency",
      "type": "key",
      "topics": [
        {
          "name": "display_get_frequency",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_frequency.htm",
          "blurb": "This function returns the frequency (or refresh rate) of the display that the game is being played on. It will return a real value as frames-per-second, so for example if your monitor is 60hz you will get 60, if it's running at 144hz then you will get 144, and so on.",
          "syntax": "display_get_frequency()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_gui_height",
      "type": "key",
      "topics": [
        {
          "name": "display_get_gui_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_height.htm",
          "blurb": "With this function you can get the height (in pixels) of the GUI as used in the Draw GUI Event.",
          "syntax": "display_get_gui_height()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_gui_width",
      "type": "key",
      "topics": [
        {
          "name": "display_get_gui_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_width.htm",
          "blurb": "With this function you can get the width (in pixels) of the GUI as used in the Draw GUI Event.",
          "syntax": "display_get_gui_width()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_height",
      "type": "key",
      "topics": [
        {
          "name": "display_get_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_height.htm",
          "blurb": "This function will return the height of the display (in pixels). Note that on the HTML5 target, this value is the height of the browser window, rather than the physical display size.",
          "syntax": "display_get_height()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_orientation",
      "type": "key",
      "topics": [
        {
          "name": "display_get_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
          "blurb": "This function will return one of four constants GameMaker has to tell you whether the device running the game is being held in landscape or portrait mode (see the table below).",
          "syntax": "display_get_orientation()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_sleep_margin",
      "type": "key",
      "topics": [
        {
          "name": "display_get_sleep_margin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_sleep_margin.htm",
          "blurb": "This function can be used to get the current sleep margin value used for the render timing of your game, and will return a millisecond value. For more information on display timing, please see display_set_timing_method().",
          "syntax": "display_get_sleep_margin()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_timing_method",
      "type": "key",
      "topics": [
        {
          "name": "display_get_timing_method",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_timing_method.htm",
          "blurb": "This function can be used to retrieve the timing method to be used for rendering your game. The method can be one of the constants listed below.",
          "syntax": "display_get_timing_method()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_get_width",
      "type": "key",
      "topics": [
        {
          "name": "display_get_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_width.htm",
          "blurb": "This function will return the width of the display (in pixels). Note that on the HTML5 target, this value is the width of the browser window, rather than the physical display size.",
          "syntax": "display_get_width()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_landscape",
      "type": "key",
      "topics": [
        {
          "name": "display_get_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
          "blurb": "This function will return one of four constants GameMaker has to tell you whether the device running the game is being held in landscape or portrait mode (see the table below).",
          "syntax": "display_get_orientation()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_landscape_flipped",
      "type": "key",
      "topics": [
        {
          "name": "display_get_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
          "blurb": "This function will return one of four constants GameMaker has to tell you whether the device running the game is being held in landscape or portrait mode (see the table below).",
          "syntax": "display_get_orientation()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_mouse_get_x",
      "type": "key",
      "topics": [
        {
          "name": "display_mouse_get_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_mouse_get_x.htm",
          "blurb": "This function will return the mouse x position within the screen. It should be noted that this function only works properly when used on the Windows and macOS targets.",
          "syntax": "display_mouse_get_x()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_mouse_get_y",
      "type": "key",
      "topics": [
        {
          "name": "display_mouse_get_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_mouse_get_y.htm",
          "blurb": "This function will return the mouse y position within the screen. It should be noted that this function only works properly when used on the Windows and macOS targets.",
          "syntax": "display_mouse_get_y()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_mouse_set",
      "type": "key",
      "topics": [
        {
          "name": "display_mouse_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_mouse_set.htm",
          "blurb": "With this function you can change or set the position of the mouse within the game display which can be useful for FPS games, for example. The function will only work while the game is in focus and using ALT + Tab will unlock the mouse.",
          "syntax": "display_mouse_set(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "display_portrait",
      "type": "key",
      "topics": [
        {
          "name": "display_get_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
          "blurb": "This function will return one of four constants GameMaker has to tell you whether the device running the game is being held in landscape or portrait mode (see the table below).",
          "syntax": "display_get_orientation()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_portrait_flipped",
      "type": "key",
      "topics": [
        {
          "name": "display_get_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
          "blurb": "This function will return one of four constants GameMaker has to tell you whether the device running the game is being held in landscape or portrait mode (see the table below).",
          "syntax": "display_get_orientation()"
        }
      ],
      "keys": []
    },
    {
      "name": "display_reset",
      "type": "key",
      "topics": [
        {
          "name": "display_reset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_reset.htm",
          "blurb": "This function Resets the display settings to the ones that were set when the game was started, but also allows you to change the current level of full screen anti-aliasing being used and whether to use vertical synchronisation. The available anti-aliasing levels are 0,2,4 and 8, with the default startup value being set to 0, and the default v-sync setting is false (off). Switching v-sync on may give a smoother gaming experience but it will also need more processing power and so its impact must be considered careful before use, and the same goes for the anti-aliasing where the higher the number the more processing that is required.",
          "syntax": "display_reset(aa, vsync)"
        }
      ],
      "keys": []
    },
    {
      "name": "display_set_gui_maximise",
      "type": "key",
      "topics": [
        {
          "name": "display_set_gui_maximise",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_gui_maximise.htm",
          "blurb": "This function can be used to maximise the GUI layer and set it to be scaled and offset in relation to the screen dimensions, rather than the default application surface position and dimensions. By default, the GUI layer is 1:1 with the application surface resolution and drawn at the (0,0) position of the surface too. However this is not always what you want and so you can use this function to set it to be drawn relative to the absolute (0,0) position of the display or game window. What arguments you provide to this function will depend on the effect you wish it to have on the GUI layer. Simply calling the function with no arguments will set the GUI layer to be drawn at the (0,0) position of the screen or game window, with the width and height being scaled to fit the whole area:",
          "syntax": "display_set_gui_maximise(xscale, yscale, xoffset, yoffset)"
        }
      ],
      "keys": []
    },
    {
      "name": "display_set_gui_maximize",
      "type": "key",
      "topics": [
        {
          "name": "display_set_gui_maximise",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_gui_maximise.htm",
          "blurb": "This function can be used to maximise the GUI layer and set it to be scaled and offset in relation to the screen dimensions, rather than the default application surface position and dimensions. By default, the GUI layer is 1:1 with the application surface resolution and drawn at the (0,0) position of the surface too. However this is not always what you want and so you can use this function to set it to be drawn relative to the absolute (0,0) position of the display or game window. What arguments you provide to this function will depend on the effect you wish it to have on the GUI layer. Simply calling the function with no arguments will set the GUI layer to be drawn at the (0,0) position of the screen or game window, with the width and height being scaled to fit the whole area:",
          "syntax": "display_set_gui_maximise(xscale, yscale, xoffset, yoffset)"
        }
      ],
      "keys": []
    },
    {
      "name": "display_set_gui_size",
      "type": "key",
      "topics": [
        {
          "name": "display_set_gui_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_gui_size.htm",
          "blurb": "This function will only affect things drawn in the Draw GUI Event and can be used to set a specific width and height for all GUI components in that event, and no matter what size of display or window is used to display the GUI, it will be scaled to fit correctly. Where the GUI is positioned (ie: the (0,0) position) will depend on whether you have used the function display_set_gui_maximise() or not. If you do not use this function (the default setting) then the GUI layer will be positioned with its (0,0) point at the same position as that for the application surface (the area where your game is being drawn) and the width and height will\nbe stretched to fit the this surface, such that setting a GUI width of 256px with this function when the application surface is 512px would stretch those 256 pixels to fit, effectively making the pixels twice as large. This is ideal for those games\nthat have aspect ratio correction set in the global Game Settings.",
          "syntax": "display_set_gui_size(width, height)"
        }
      ],
      "keys": []
    },
    {
      "name": "display_set_sleep_margin",
      "type": "key",
      "topics": [
        {
          "name": "display_set_sleep_margin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_sleep_margin.htm",
          "blurb": "This function can be used to set the sleep margin value used for the render timing of your game, and requires a millisecond value. The default values are as follows:",
          "syntax": "display_set_sleep_margin(milliseconds)"
        }
      ],
      "keys": []
    },
    {
      "name": "display_set_timing_method",
      "type": "key",
      "topics": [
        {
          "name": "display_set_timing_method",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_timing_method.htm",
          "blurb": "This function can be used to set the timing method to be used for rendering your game. The method can be one of the following constants:",
          "syntax": "display_set_timing_method(method)"
        }
      ],
      "keys": []
    },
    {
      "name": "display_set_ui_visibility",
      "type": "key",
      "topics": [
        {
          "name": "display_set_ui_visibility",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_ui_visibility.htm",
          "blurb": "This function can be used to show or hide the system UI on Android only. The function requires you to supply one or more system flags as an integer value. When using more than a single flag, these need to be merged using the bitwise \"or\", as shown in the example below. You can find a list of Android system flags here.",
          "syntax": "display_set_ui_visibility(flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "distance_to_object",
      "type": "key",
      "topics": [
        {
          "name": "distance_to_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/distance_to_object.htm",
          "blurb": "This function calculates the distance from the edge of the bounding box of the calling instance to the nearest edge of the nearest instance of the object specified. The object can be an object index or a specific instance ID as well as the keyword other, and the distance is returned in pixels. Note that if either of the objects have no sprite or no mask defined, the results will be incorrect.",
          "syntax": "distance_to_object(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "distance_to_point",
      "type": "key",
      "topics": [
        {
          "name": "distance_to_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/distance_to_point.htm",
          "blurb": "This function calculates the distance from the edge of the bounding box of the calling instance to the specified x/y position in the room, with the return value being in pixels. Note that if the calling object have no sprite or no mask defined, the results will be incorrect.",
          "syntax": "distance_to_point(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "div",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "dll_cdecl",
      "type": "key",
      "topics": [
        {
          "name": "external_define",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
          "blurb": "This function can be used to define an external function call to a specific dll (for Windows) or dylib (for Mac). This file can be either an included file or part of an extension.",
          "syntax": "external_define(dll, name, calltype, restype, argnumb, argtype[0], argtype[1], ...argtype[10])"
        }
      ],
      "keys": []
    },
    {
      "name": "dll_stdcall",
      "type": "key",
      "topics": [
        {
          "name": "external_define",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
          "blurb": "This function can be used to define an external function call to a specific dll (for Windows) or dylib (for Mac). This file can be either an included file or part of an extension.",
          "syntax": "external_define(dll, name, calltype, restype, argnumb, argtype[0], argtype[1], ...argtype[10])"
        }
      ],
      "keys": []
    },
    {
      "name": "do",
      "type": "key",
      "topics": [
        {
          "name": "do / until",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/do___until.htm",
          "blurb": "A do function is another way of iterating over one or more statements multiple times, and is really a \"do... until\" statement as you cannot have one without the other since you are telling GameMaker to do something until a specific expression returns true. It has this form:"
        }
      ],
      "keys": []
    },
    {
      "name": "dot_product",
      "type": "key",
      "topics": [
        {
          "name": "dot_product",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product.htm",
          "blurb": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
          "syntax": "dot_product(x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "dot_product_3d",
      "type": "key",
      "topics": [
        {
          "name": "dot_product_3d",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product_3d.htm",
          "blurb": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
          "syntax": "dot_product_3d(x1, y1, z1, x2, y2, z2)"
        }
      ],
      "keys": []
    },
    {
      "name": "dot_product_3d_normalised",
      "type": "key",
      "topics": [
        {
          "name": "dot_product_3d_normalised",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product_3d_normalised.htm",
          "blurb": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
          "syntax": "dot_product_3d_normalised(x1, y1, z1, x2, y2, z2)"
        }
      ],
      "keys": []
    },
    {
      "name": "dot_product_3d_normalized",
      "type": "key",
      "topics": [
        {
          "name": "dot_product_3d_normalised",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product_3d_normalised.htm",
          "blurb": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
          "syntax": "dot_product_3d_normalised(x1, y1, z1, x2, y2, z2)"
        }
      ],
      "keys": []
    },
    {
      "name": "dot_product_normalised",
      "type": "key",
      "topics": [
        {
          "name": "dot_product_normalised",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product_normalised.htm",
          "blurb": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
          "syntax": "dot_product_normalised(x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "dot_product_normalized",
      "type": "key",
      "topics": [
        {
          "name": "dot_product_normalised",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product_normalised.htm",
          "blurb": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
          "syntax": "dot_product_normalised(x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_arrow",
      "type": "key",
      "topics": [
        {
          "name": "draw_arrow",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_arrow.htm",
          "blurb": "This function will draw an arrow from point (x1,y1) to point (x2,y2). The stem of the arrow is drawn along these points with the actual arrow head being drawn at the end, where the size of the arrowhead is defined by the argument \"size\" and is calculated as being part of the stem so that the end point is always aligned with the position defined by x2,y2. The width of the arrow head is calculated automatically in proportion to the length.",
          "syntax": "draw_arrow(x1, y1, x2, y2, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_button",
      "type": "key",
      "topics": [
        {
          "name": "draw_button",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_button.htm",
          "blurb": "This function will draw a very simple, rectangular \"button\" using the currently selected draw colour and alpha where the up argument defines how the beveled edge effect looks, as shown in the image below:",
          "syntax": "draw_button(x1, y1, x2, y2, up)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_circle",
      "type": "key",
      "topics": [
        {
          "name": "draw_circle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_circle.htm",
          "blurb": "With this function you can draw either an outline of a circle or a filled circle. You can define how precise the drawing is with the function draw_set_circle_precision().",
          "syntax": "draw_circle(x, y, r, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_circle_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_circle_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_circle_colour.htm",
          "blurb": "With this function you can draw either an outline of a circle or a filled circle, and if it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other and the colour settings will over-ride the base colour set with the function draw_set_colour(). You can define how precise the drawing is with the function draw_set_circle_precision().",
          "syntax": "draw_circle_colour(x, y, r, col1, col2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_circle_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_circle_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_circle_colour.htm",
          "blurb": "With this function you can draw either an outline of a circle or a filled circle, and if it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other and the colour settings will over-ride the base colour set with the function draw_set_colour(). You can define how precise the drawing is with the function draw_set_circle_precision().",
          "syntax": "draw_circle_colour(x, y, r, col1, col2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_clear",
      "type": "key",
      "topics": [
        {
          "name": "draw_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_clear.htm",
          "blurb": "This function can be used to clear the entire screen (with no alpha blend) to the given colour, and is only for use in the draw event of an instance (it will not show if used in any other event). It can also be useful for clearing surfaces when they are newly created.",
          "syntax": "draw_clear(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_clear_alpha",
      "type": "key",
      "topics": [
        {
          "name": "draw_clear_alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_clear_alpha.htm",
          "blurb": "This function can be used to clear the entire screen with a given colour and the alpha component of the destination is set to the value you have set - this function does not do any blending as it works but any subsequent blend operations can be set up to use the destination alpha that you have set. This is only for use in the draw event of an instance (it will not show if used in any other event), and it can also be very useful for clearing surfaces when they are newly created.",
          "syntax": "draw_clear_alpha(col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_ellipse",
      "type": "key",
      "topics": [
        {
          "name": "draw_ellipse",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_ellipse.htm",
          "blurb": "With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. You can define how precise the drawing is with the function draw_set_circle_precision().",
          "syntax": "draw_ellipse(x1, y1, x2, y2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_ellipse_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_ellipse_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_ellipse_colour.htm",
          "blurb": "With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. If it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()). You can define how precise the drawing is with the function draw_set_circle_precision().",
          "syntax": "draw_ellipse_colour(x1, y1, x2, y2, col1, col2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_ellipse_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_ellipse_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_ellipse_colour.htm",
          "blurb": "With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. If it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()). You can define how precise the drawing is with the function draw_set_circle_precision().",
          "syntax": "draw_ellipse_colour(x1, y1, x2, y2, col1, col2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_enable_drawevent",
      "type": "key",
      "topics": [
        {
          "name": "draw_enable_drawevent",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/draw_enable_drawevent.htm",
          "blurb": "With this function you can choose to enable (true) or disable (false) the draw event for all instances in the game, thus giving you control over how and when things are drawn, which is useful if you wish to implement a \"frame skip\" technique. Note that this doesn't just prevent instances drawing to the screen, it suppresses the draw event completely meaning that care should be taken since any game logic that is present in that event will not be run either.",
          "syntax": "draw_enable_drawevent(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_enable_skeleton_blendmodes",
      "type": "key",
      "topics": [
        {
          "name": "draw_enable_skeleton_blendmodes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_enable_skeleton_blendmodes.htm",
          "blurb": "This function is used to enable (true) or disable (false) per-slot blend modes for skeletal sprites.",
          "syntax": "draw_enable_skeleton_blendmodes(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_enable_swf_aa",
      "type": "key",
      "topics": [
        {
          "name": "draw_enable_swf_aa",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_enable_swf_aa.htm",
          "blurb": "With this function you can enable or disable anti-aliasing (AA) for SWF format vector sprites. AA simply smooths the edges of vector images to give them a nicer look. The amount of AA used will depend on the value set using the function draw_set_swf_aa_level(). By default this is disabled.",
          "syntax": "draw_enable_swf_aa(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_flush",
      "type": "key",
      "topics": [
        {
          "name": "draw_flush",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/draw_flush.htm",
          "blurb": "With this function you can flush the entire draw pipeline. This is a debug only function and in general it should not be used unless indicated by a member of the YoYo Games Support staff, as indiscriminate use will cause serious performance issues with your game.",
          "syntax": "draw_flush()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_alpha",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_get_alpha.htm",
          "blurb": "This function returns the current value of the draw alpha, which will range between 0 (fully transparent) and 1 (fully opaque). The draw alpha affects the transparency of all draw functions, and can be set with the draw_set_alpha() function.",
          "syntax": "draw_get_alpha()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_get_colour.htm",
          "blurb": "This function returns the current draw colour which is used for drawing forms, text, primitives and un-textured 3D models. This can be set with the draw_set_colour() function.",
          "syntax": "draw_get_colour()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_get_colour.htm",
          "blurb": "This function returns the current draw colour which is used for drawing forms, text, primitives and un-textured 3D models. This can be set with the draw_set_colour() function.",
          "syntax": "draw_get_colour()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_enable_skeleton_blendmodes",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_enable_skeleton_blendmodes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_get_enable_skeleton_blendmodes.htm",
          "blurb": "This function returns whether per-slot blend modes for skeletal sprites are enabled (true) or disabled (false).",
          "syntax": "draw_get_enable_skeleton_blendmodes()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_font",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_font",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_font.htm",
          "blurb": "This function will get the font currently assigned for drawing text. The function will return -1 if no font is set, or the ID value (a positive integer) for the font asset assigned.",
          "syntax": "draw_get_font()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_halign",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_halign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_halign.htm",
          "blurb": "This function is used to get the text alignment setting along the horizontal axis, and will return one of the constants listed below.",
          "syntax": "draw_get_halign()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_lighting",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_lighting",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Lighting/draw_get_lighting.htm",
          "blurb": "This function will return whether lighting is enabled (true) or not (false) for the whole scene.",
          "syntax": "draw_get_lighting()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_swf_aa_level",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_swf_aa_level",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_get_swf_aa_level.htm",
          "blurb": "This function can be used to get the anti-aliasing (AA) level for SWF format vector sprites. The return value will between 0 and 1 and shows how \"smooth\" the edges of these sprites will be drawn. You can set the AA level using the function draw_set_swf_aa_level().",
          "syntax": "draw_get_swf_aa_level()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_get_valign",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_valign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_valign.htm",
          "blurb": "This function is used to get the text alignment setting along the vertical axis, and will return one of the constants listed below.",
          "syntax": "draw_get_valign()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_getpixel",
      "type": "key",
      "topics": [
        {
          "name": "draw_getpixel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_getpixel.htm",
          "blurb": "With this function you can get the colour value of any pixel that is being drawn to the current render target. This means that the results will depend on the event in which the function is called, and also on the target surface being used. Note that this will not return any alpha values, for that you should use draw_getpixel_ext().",
          "syntax": "draw_getpixel(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_getpixel_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_getpixel_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_getpixel_ext.htm",
          "blurb": "With this function you can get the full AGBR 32-bit value of any pixel that is being drawn to the current render target. This means that the results will depend on the event in which the function is called, and also on the target surface being used.",
          "syntax": "draw_getpixel_ext(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_healthbar",
      "type": "key",
      "topics": [
        {
          "name": "draw_healthbar",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_healthbar.htm",
          "blurb": "With this function you can draw a coloured bar to show a constant value. Although the function uses the word \"healthbar\" you can use this to display anything you wish as long as the amount to be displayed is a percentage value between 0 and 100 (a percentage of any value can be calculated with the formula (CURRENT_Value / MAXIMUM_value) * 100), so, for example, you can use this to display power, health, mana, time or anything else that would benefit from a bar display.",
          "syntax": "draw_healthbar(x1, y1, x2, y2, amount, backcol, mincol, maxcol, direction, showback, showborder)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_highscore",
      "type": "key",
      "topics": [
        {
          "name": "draw_highscore",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_highscore.htm",
          "blurb": "This simple function will draw the current list of internally stored high scores using the currently set font, colour and alpha values within the specified rectangle. You provide the coordinates for the upper left corner and lower right corner of the rectangular area to draw the text, and GameMaker will take care of the rest, with spacing and position being done automatically.",
          "syntax": "draw_highscore( x1, y1, x2, y2 )"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_light_define_ambient",
      "type": "key",
      "topics": [
        {
          "name": "draw_light_define_ambient",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_define_ambient.htm",
          "blurb": "This function is used to control the ambient light of a scene, which is the light that you have in a scene even without having defined any point or directional light sources. It is effectively the overall colour and brightness (or darkness) of a scene. The default colour is c_black.",
          "syntax": "draw_light_define_ambient(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_light_define_direction",
      "type": "key",
      "topics": [
        {
          "name": "draw_light_define_direction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_define_direction.htm",
          "blurb": "This function is for defining a directional light, where the direction and intensity are set by the values input for the x, y and z unit vector (meaning that they must be between -1 and 1, where 1 or -1 is full intensity, and 0 is no intensity). The lights can also be given a colour, which will also affect the perceived intensity of the light as certain colours appear \"darker\" than others. You must also give the light an index number which what will be used in other functions to reference\nit.",
          "syntax": "draw_light_define_direction(ind, x, y, z, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_light_define_point",
      "type": "key",
      "topics": [
        {
          "name": "draw_light_define_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_define_point.htm",
          "blurb": "This function is for defining a positional light, where you can define the x, y and z position of the light, the light range and its colour (which will also affect the perceived intensity of the light as certain colours appear \"darker\" than others). You must also give the light an index number which what will be used in other functions to reference it.",
          "syntax": "draw_light_define_point(ind, x, y, z, range, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_light_enable",
      "type": "key",
      "topics": [
        {
          "name": "draw_light_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_enable.htm",
          "blurb": "This function is used to enable a defined light. When you define a positional or a directional light you must assign it an index number which is then used by this function to switch the light on or off. Default is disabled (false).",
          "syntax": "draw_light_enable(ind, enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_light_get",
      "type": "key",
      "topics": [
        {
          "name": "draw_light_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_get.htm",
          "blurb": "This function will get the specified light parameters as an array with the following 6 elements -",
          "syntax": "draw_light_get(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_light_get_ambient",
      "type": "key",
      "topics": [
        {
          "name": "draw_light_get_ambient",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_get_ambient.htm",
          "blurb": "This function will return the current colour used for ambient lighting.",
          "syntax": "draw_light_get_ambient()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_line",
      "type": "key",
      "topics": [
        {
          "name": "draw_line",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line.htm",
          "blurb": "With this function you can draw a 1 pixel wide line between any two points in the game room. Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_line(x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_line_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_line_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line_colour.htm",
          "blurb": "With this function you can draw a 1 pixel wide line with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function draw_set_colour(). Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_line_colour(x1, y1, x2, y2, col1, col2)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_line_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_line_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line_colour.htm",
          "blurb": "With this function you can draw a 1 pixel wide line with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function draw_set_colour(). Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_line_colour(x1, y1, x2, y2, col1, col2)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_line_width",
      "type": "key",
      "topics": [
        {
          "name": "draw_line_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line_width.htm",
          "blurb": "With this function you can draw a line of a specified width between any two points in the game room. Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_line_width(x1, y1, x2, y2, w)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_line_width_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_line_width_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line_width_colour.htm",
          "blurb": "With this function you can draw a line of a specific width with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function draw_set_colour(). Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_line_width_colour(x1, y1, x2, y2, w, col1, col2)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_line_width_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_line_width_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line_width_colour.htm",
          "blurb": "With this function you can draw a line of a specific width with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function draw_set_colour(). Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_line_width_colour(x1, y1, x2, y2, w, col1, col2)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_path",
      "type": "key",
      "topics": [
        {
          "name": "draw_path",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_path.htm",
          "blurb": "With this function you can get GameMaker to draw a path to the screen. The path will be drawn as a simple line, and can be either relative to the calling instance or at the absolute position it was created at in the path editor or through code. This function is extremely useful when debugging dynamic paths (for example, those created for instances with the mp_grid_path() function).",
          "syntax": "draw_path(path, x, y, absolute)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_point",
      "type": "key",
      "topics": [
        {
          "name": "draw_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_point.htm",
          "blurb": "With this function you can draw a single pixel anywhere on the screen, using the currently set draw colour and alpha.",
          "syntax": "draw_point(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_point_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_point_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_point_colour.htm",
          "blurb": "With this function you can draw a single pixel anywhere on the screen with a colour that you define. The colour settings will over-ride the base colour set with the function draw_set_colour().",
          "syntax": "draw_point_colour(x, y, col1)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_point_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_point_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_point_colour.htm",
          "blurb": "With this function you can draw a single pixel anywhere on the screen with a colour that you define. The colour settings will over-ride the base colour set with the function draw_set_colour().",
          "syntax": "draw_point_colour(x, y, col1)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_primitive_begin",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm",
          "blurb": "This function must be called before you can define any primitives. There are 6 types of primitives you can define as the following constants:",
          "syntax": "draw_primitive_begin(kind)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_primitive_begin_texture",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_begin_texture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin_texture.htm",
          "blurb": "This function must be called before you define the vertices of a textured primitive. You must give the kind of primitive to use (see draw_primitive_begin() for more information) and the id of a texture to use, which can be a sprite or background image asset. This asset id can be gotten from the functions sprite_get_texture(), for example (use -1 for no texture).",
          "syntax": "draw_primitive_begin_texture(kind, tex)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_primitive_end",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_end.htm",
          "blurb": "This function must be called when you have finished defining the points of your primitive. If you do not call this function, nothing will be drawn as this effectively tells GameMaker that you have finished and that it can now draw the defined primitive.",
          "syntax": "draw_primitive_end()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_rectangle",
      "type": "key",
      "topics": [
        {
          "name": "draw_rectangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_rectangle.htm",
          "blurb": "With this function you can draw either an outline of a rectangle or a filled rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_rectangle(x1, y1, x2, y2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_rectangle_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_rectangle_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_rectangle_colour.htm",
          "blurb": "With this function you can draw either an outline of a rectangle or a filled rectangle by defining an area where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_rectangle_colour(x1, y1, x2, y2, col1, col2, col3, col4, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_rectangle_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_rectangle_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_rectangle_colour.htm",
          "blurb": "With this function you can draw either an outline of a rectangle or a filled rectangle by defining an area where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_rectangle_colour(x1, y1, x2, y2, col1, col2, col3, col4, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_roundrect",
      "type": "key",
      "topics": [
        {
          "name": "draw_roundrect",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect.htm",
          "blurb": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. You can define how precise the drawing of the corners is with the function draw_set_circle_precision(), but this function uses a fixed radius for them (should you need to change the corner radius, use the function draw_roundrect_ext()). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_roundrect(x1, y1, x2, y2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_roundrect_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_roundrect_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect_colour.htm",
          "blurb": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for the centre and the edges, and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()).You can define how precise the drawing of the corners is with the function draw_set_circle_precision(), but the corners are always drawn with a fixed radius. Should you need to change the corner radius you should use the function draw_roundrect_colour_ext(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_roundrect_colour(x1, y1, x2, y2, col1, col2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_roundrect_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_roundrect_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect_colour.htm",
          "blurb": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for the centre and the edges, and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()).You can define how precise the drawing of the corners is with the function draw_set_circle_precision(), but the corners are always drawn with a fixed radius. Should you need to change the corner radius you should use the function draw_roundrect_colour_ext(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_roundrect_colour(x1, y1, x2, y2, col1, col2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_roundrect_colour_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_roundrect_colour_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect_colour_ext.htm",
          "blurb": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If the rectangle is filled, then the colour arguments will be used to generate a colour gradient from the centre to the edges, where colour 1 is the centre colour and colour 2 the edge colour. You must also supply radius values for the x and y axis (in pixels) and the corners will be rounded by these amounts. You can define how precise the drawing of the corners is with the function draw_set_circle_precision(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_roundrect_colour_ext(x1, y1, x2, y2, xrad, yrad, col1, col2, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_roundrect_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_roundrect_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect_ext.htm",
          "blurb": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. You must also supply radius values for the x and y axis (in pixels) and the corners will be rounded by these amounts. You can define how precise the drawing of the corners is with the function draw_set_circle_precision(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
          "syntax": "draw_roundrect_ext(x1, y1, x2, y2, xrad, yrad, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_self",
      "type": "key",
      "topics": [
        {
          "name": "draw_self",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_self.htm",
          "blurb": "This function draws the sprite assigned to the instance exactly as it would be drawn if the draw event held no code or actions, and will reflect and changes that have been made to the sprite variables in other events.",
          "syntax": "draw_self()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_alpha",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_set_alpha.htm",
          "blurb": "With this function you can set the base draw alpha for the game. This value can be set from 0 to 1 with 0 being fully transparent and 1 being fully opaque (the default value), and will affect all further drawing, including backgrounds, sprites, fonts, primitives and 3D.",
          "syntax": "draw_set_alpha(alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_circle_precision",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_circle_precision",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_set_circle_precision.htm",
          "blurb": "To optimise performance when drawing circles, GameMaker basically draws a polygon shape with enough sides to make it appear circular. However, depending on how big or small you need your circles to be, you may find that changing this value can help increase the performance of your game, or make the circles look better. The precision value that you can input into this function is the number of sides the circle polygon has, and this number can be anything between 4 and 64,\nbut must be a number divisible by 4, with a default value of 24.",
          "syntax": "draw_set_circle_precision(precision)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_set_colour.htm",
          "blurb": "With this function you can set the base draw colour for the game.",
          "syntax": "draw_set_colour(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_set_colour.htm",
          "blurb": "With this function you can set the base draw colour for the game.",
          "syntax": "draw_set_colour(col)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_font",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_font",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_font.htm",
          "blurb": "This function will set the font to be used for all further text drawing. This font must have been added into the font assets of the game or have been created using either the font_add() or font_add_sprite().",
          "syntax": "draw_set_font(font)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_halign",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_halign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_halign.htm",
          "blurb": "This function is used to align text along the horizontal axis and changing the horizontal alignment will change the position and direction in which all further text is drawn with the default value being fa_left. The following constants are accepted:",
          "syntax": "draw_set_halign(halign)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_lighting",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_lighting",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Lighting/draw_set_lighting.htm",
          "blurb": "This function is used to enable all lighting effects. Default is disabled (false).",
          "syntax": "draw_set_lighting(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_swf_aa_level",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_swf_aa_level",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_set_swf_aa_level.htm",
          "blurb": "This function can be used to set the anti-aliasing (AA) level for SWF format vector sprites. This can be a real value from 0 to 1 and will \"smooth\" the edges of these sprites. Note that to see this effect, you must first have enabled AA using the function draw_enable_swf_aa().",
          "syntax": "draw_set_swf_aa_level(AA)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_set_valign",
      "type": "key",
      "topics": [
        {
          "name": "draw_set_valign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_valign.htm",
          "blurb": "This function is used to align text along the vertical axis and changing the vertical alignment will change the position and direction in which all further text is drawn, with the default value being fa_top. The following constants are accepted:",
          "syntax": "draw_set_valign(valign)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_skeleton",
      "type": "key",
      "topics": [
        {
          "name": "draw_skeleton",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_skeleton.htm",
          "blurb": "This function is only for use with sprites that have been created using a skeletal animation program like Spine. While you can draw these sprites using the normal draw functions (like draw_self()), there are times when you may want to draw a single frame or show a change of skin texture without actually changing the sprite properties. In these cases you can draw the sprite with this function, where you give the sprite index and then the name of the animation to get the frame from (a string, as set within the program used to make the sprite). Next you give the name of the skin to use (again, as set when the sprite was made), and a frame value. The frame value is for telling GameMaker what part of the animation to show and is a value between 0 and the image_number. The rest of the arguments are the same as those used for normal sprite drawing and will change the scale, angle, blend colour and alpha of the final animation frame being drawn.",
          "syntax": "draw_skeleton(sprite, animname, skinname, frame, x, y, xscale, yscale, rot, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_skeleton_collision",
      "type": "key",
      "topics": [
        {
          "name": "draw_skeleton_collision",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_skeleton_collision.htm",
          "blurb": "This function will draw the collision masks associated with the given skeletal animation. You supply the base sprite, the animation set to use and the frame to get the information from, and you can also set the transform properties to suit.",
          "syntax": "draw_skeleton_collision(sprite, animname, frame, x, y, xscale, yscale, rot, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_skeleton_instance",
      "type": "key",
      "topics": [
        {
          "name": "draw_skeleton_instance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_skeleton_instance.htm",
          "blurb": "This function is only for use with instances which have sprites assigned to them created using the skeletal animation program Spine. While you can draw these sprites using the normal draw functions (like draw_self()), there are times when you may want to draw a single frame or show a change of skin texture without actually changing the sprite properties for an instance. In these cases you can draw the sprite that has been assigned to the instance with this function, where you give the unique Instance ID and then the name of the animation to get the frame from (a string, as set within the program used to make the sprite). Next you give the name of the skin to use (again, as set when the sprite was made), and a frame value. The frame value is for telling GameMaker what part of the animation to show and is a value between 0 and the image_number. The rest of the arguments are the same as those used for normal sprite drawing and will change the scale, angle, blend colour and alpha of the final animation frame being drawn.",
          "syntax": "draw_skeleton_instance(instance, animname, skinname, frame, x, y, xscale, yscale, rot, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_skeleton_time",
      "type": "key",
      "topics": [
        {
          "name": "draw_skeleton_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_skeleton_time.htm",
          "blurb": "This function will draw the given animation using the given skin at a specific time in the animation. The time value should be between 0 (the beginning) and the end duration of the animation, which you can find using the function skeleton_animation_get_duration(). You can set the time value to values higher than the total duration of the animation and the animation will loop back to the beginning, but you run the risk of losing floating point accuracy as the accumulated time gets larger.",
          "syntax": "draw_skeleton_time(sprite, animname, skinname, time, x, y, xscale, yscale, rot, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite.htm",
          "blurb": "This function draws the given sprite and sub-image at a position within the game room. For the sprite you can use the instance variable sprite_index to get the current sprite that is assigned to the instance running the code, or you can use any other sprite asset. The same goes for the sub-image, as this can also be set to the instance variable image_index which will set the sub-image to that selected for the current instance sprite (note, that you can draw a different sprite and still use the sub-image value for the current instance), or you can use any other value for this to draw a specific sub-image of the chosen sprite. If the value is larger than the number of sub-images, then GameMaker will automatically loop the number to select the corresponding image (for example, if the sprite being drawn has 5 sub-images numbered 0 to 4 and we set the index value to 7, then the function will draw sub-image 3, numbered 0). Finally, the x and y position is the position within the room that the sprite will be drawn, and it is centered on the sprite x offset and y offset.",
          "syntax": "draw_sprite(sprite, subimg, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_ext.htm",
          "blurb": "This function will draw the given sprite as in the function draw_sprite() but with additional options to change the scale, blending, rotation and alpha of the sprite being drawn. Changing these values does not modify the resource in any way (only how it is drawn), and you can use any of the available sprite variables instead of direct values for all the arguments in the function. The image below illustrates how different values affect the drawing of the sprite:",
          "syntax": "draw_sprite_ext( sprite, subimg, x, y, xscale, yscale, rot, colour, alpha )"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_general",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_general",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_general.htm",
          "blurb": "This function combines the function draw_sprite_ext() with the function draw_sprite_part(), adding in some additional blending options so that each corner of the final sprite part can be blended with an individual colour.",
          "syntax": "draw_sprite_general(sprite, subimg, left, top, width, height, x, y, xscale, yscale, rot, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_part",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_part",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_part.htm",
          "blurb": "With this function you can draw part of any sprite at a given position within the room. As with draw_sprite() you can specify a sprite and a sub-image for drawing, then you must give the relative coordinates within the sprite of the area to select for drawing. This means that a left position of 0 and a top position of 0 would be the top left corner of the sprite and all further coordinates should be taken from that position. The image below shows an example of how this works:",
          "syntax": "draw_sprite_part(sprite, subimg, left, top, width, height, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_part_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_part_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_part_ext.htm",
          "blurb": "This function will draw a part of the chosen sprite at the given position following the same rules as per draw_sprite_part(), only now you can scale the part, blend a colour with it, or change its alpha when drawing it to the screen (the same as when drawing a sprite with draw_sprite_ext()). You should note that if the texture page permits automatic cropping then this function may not work as expected, since\nthe extra \"empty\" space around the sprite will have been removed for creating the texture page. To resolve this issue, you will need to set the texture page settings (in the Texture Group Editor)\nto disable the Automatic Crop.",
          "syntax": "draw_sprite_part_ext(sprite, subimg, left, top, width, height, x, y, xscale, yscale, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_pos",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_pos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_pos.htm",
          "blurb": "With this function you can draw a sprite distorted over the area defined by the four corner coordinates. The first two arguments are the sprite to draw and the sub-image of the sprite (the same as in the function draw_sprite()) but the next ones are those that define the position of each of the four corners of the bounding box of the given sprite. These should be given in clockwise order, so the first coordinate is the top left, then the top right, then bottom\nright and finally the bottom left. You can also set a value for the alpha of the sprite to draw it with transparency. The image below illustrates how this function works:",
          "syntax": "draw_sprite_pos(sprite, subimg, x1, y1, x2, y2, x3, y3, x4, y4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_stretched",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_stretched",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_stretched.htm",
          "blurb": "This function simply takes a sprite resource and stretches it over the given width and height so that it occupies that area. As with draw_sprite() you can specify a sprite and a sub-image for drawing, then the x / y position in the room for the sprite to be drawn at and finally a width and a height (which must be pixel values). The image below shows the result of this function with different sets of arguments:",
          "syntax": "draw_sprite_stretched(sprite, subimg, x, y, w, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_stretched_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_stretched_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_stretched_ext.htm",
          "blurb": "This function does exactly the same as the draw_sprite_stretched() function with the added ability to set the colour blending and alpha value for the sprite when it is drawn (similar to the function draw_sprite_ext()).",
          "syntax": "draw_sprite_stretched_ext(sprite, subimg, x, y, w, h, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_tiled",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_tiled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_tiled.htm",
          "blurb": "This function will take a sprite and then repeatedly tile it across the whole view (or room if no view is defined), starting from the coordinates that you give in the function. Tiling is based on the width and height of the sprite as defined by the sprite variables of the instance running the code. This function is for 2D (orthographic) projections only, and will not work correctly when a 3D\ncamera projection is used.",
          "syntax": "draw_sprite_tiled(sprite, subimg, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_sprite_tiled_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_sprite_tiled_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_tiled_ext.htm",
          "blurb": "This function will take a sprite and then repeatedly tile it across the whole view (or room if no view is defined), starting from the coordinates that you give in the function and with each tile scaled, colour blended and with the alpha that you define (these properties are the same as those used in draw_sprite_ext()). This function is for 2D (orthographic) projections only, and will not work correctly when a 3D camera projection is used.",
          "syntax": "draw_sprite_tiled_ext(sprite, subimg, x, y, xscale, yscale, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface.htm",
          "blurb": "With this function you can draw a surface at a given position within the room, with the top left corner of the surface being drawn at the specified x/y position.",
          "syntax": "draw_surface(id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_ext.htm",
          "blurb": "This function will draw the given surface as in the function draw_surface() but with additional options to change the scale, blending, rotation and alpha of the surface being drawn. Changing these values does not modify the resource in any way (only how it is drawn).",
          "syntax": "draw_surface_ext(id, x, y, xscale, yscale, rot, col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface_general",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface_general",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_general.htm",
          "blurb": "This function combines the function draw_surface_ext() with the function draw_surface_part(), adding in some additional blending options so that each corner of the final surface part can be blended with an individual colour.",
          "syntax": "draw_surface_general(id, left, top, w, h, x, y, xscale, yscale, rot, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface_part",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface_part",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_part.htm",
          "blurb": "With this function you can draw part of any surface at a given position within the room. As with draw_surface() you can specify a surface, but you then need to specify the relative coordinates within the surface of an area to select for drawing. This means that a left position of 0 and a top position of 0 would be the top left corner of the surface and all further coordinates should be taken from that position.",
          "syntax": "draw_surface_part(id, left, top, w, h, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface_part_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface_part_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_part_ext.htm",
          "blurb": "This function will draw a part of the chosen surface at the given position following the same rules as per draw_surface_part(), only now you can scale the part, blend a colour with it, or change its alpha when drawing it to the screen (the same as when drawing a surface with draw_surface_ext()).",
          "syntax": "draw_surface_part_ext(id, left, top, w, h, x, y, xscale, yscale, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface_stretched",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface_stretched",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_stretched.htm",
          "blurb": "This function simply takes a surface and stretches it over the given width and height so that it occupies the area. As with draw_surface() you can specify a surface and then the x / y position in the room for the surface to be drawn at and finally a width and a height (which must be pixel values).",
          "syntax": "draw_surface_stretched(id, x, y, w, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface_stretched_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface_stretched_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_stretched_ext.htm",
          "blurb": "This function does exactly the same as the draw_surface_stretched() function with the added ability to set the colour blending and alpha value for the surface when it is drawn (similar to the function draw_surface_ext()).",
          "syntax": "draw_surface_stretched_ext(id, x, y, w, h, col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface_tiled",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface_tiled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_tiled.htm",
          "blurb": "This function will take a surface and then repeatedly tile it across the whole room, starting from the coordinates that you give in the function.",
          "syntax": "draw_surface_tiled(id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_surface_tiled_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_surface_tiled_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_tiled_ext.htm",
          "blurb": "This function will take a surface and then repeatedly tile it across the whole room, starting from the coordinates that you give in the function and with each tile scaled, colour blended and with the alpha that you define (these properties are the same as those used in draw_surface_ext()).",
          "syntax": "draw_surface_tiled_ext(id, x, y, xscale, yscale, col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text",
      "type": "key",
      "topics": [
        {
          "name": "draw_text",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text.htm",
          "blurb": "With this function you can draw any string at any position within the room (for drawing real numbers you should use the string() function to convert them into text). To combine strings you can use + (see example below) and you can also use \\n within a string to add a line break so it is drawn over multiple lines (for information on how to properly format a string and what escape characters you can use, please see here). The colour of the text and the alpha are governed by the current base alpha and colour values as set by draw_set_alpha() and draw_set_colour().",
          "syntax": "draw_text(x, y, string)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_colour.htm",
          "blurb": "This function will draw text in a similar way to draw_text() only now you can choose the colours to use for colouring the text as well as the alpha value, and these new values will be used instead of the base drawing colour and alpha.",
          "syntax": "draw_text_colour(x, y, string, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_colour.htm",
          "blurb": "This function will draw text in a similar way to draw_text() only now you can choose the colours to use for colouring the text as well as the alpha value, and these new values will be used instead of the base drawing colour and alpha.",
          "syntax": "draw_text_colour(x, y, string, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_ext",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext.htm",
          "blurb": "This function will draw text in a similar way to draw_text() only now you can set the space between each line of text - should the text occupy more than one line - and limit the width (in pixels) of the string per line so that should any line exceed this value, GameMaker will automatically split the text to the next line at the nearest available white-space (if the text has no white-spaces then it will overrun this maximum\nwidth value). Note that any white space placed at the start of the string will be stripped out before being parsed for drawing because of this. Also note that a value of -1 for the line separation argument will default to a separation based on the\nheight of the \"M\" character in the chosen font.",
          "syntax": "draw_text_ext(x, y, string, sep, w)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_ext_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_ext_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext_colour.htm",
          "blurb": "This function is a combination of the base draw_text() function with the draw_text_ext() and draw_text_colour() functions, permitting you to define gradient colours for text as well as the line spacing and maximum width per line all together.",
          "syntax": "draw_text_ext_colour(x, y, string, sep, w, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_ext_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_ext_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext_colour.htm",
          "blurb": "This function is a combination of the base draw_text() function with the draw_text_ext() and draw_text_colour() functions, permitting you to define gradient colours for text as well as the line spacing and maximum width per line all together.",
          "syntax": "draw_text_ext_colour(x, y, string, sep, w, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_ext_transformed",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_ext_transformed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext_transformed.htm",
          "blurb": "This function is a combination of the base draw_text() function with the draw_text_ext() and draw_text_transformed() functions, permitting you to scale and rotate text while maintaining a specific line spacing and maximum width per line. Note that the \"width\" argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given width. Instead you should have set the width to 150 to compensate the scaling.",
          "syntax": "draw_text_ext_transformed(x, y, string, sep, w, xscale, yscale, angle)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_ext_transformed_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_ext_transformed_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext_transformed_colour.htm",
          "blurb": "This function is a combination of the base draw_text() function with the draw_text_ext(), draw_text_transformed() and draw_text_colour() functions. As such, this is the most general of all functions for drawing text and gives a large amount of flexibility when drawing. Note that the \"width\" argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given\nwidth. Instead you should have set the width to 150 to compensate the scaling.",
          "syntax": "draw_text_ext_transformed_colour(x, y, string, sep, w, xscale, yscale, angle, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_ext_transformed_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_ext_transformed_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext_transformed_colour.htm",
          "blurb": "This function is a combination of the base draw_text() function with the draw_text_ext(), draw_text_transformed() and draw_text_colour() functions. As such, this is the most general of all functions for drawing text and gives a large amount of flexibility when drawing. Note that the \"width\" argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given\nwidth. Instead you should have set the width to 150 to compensate the scaling.",
          "syntax": "draw_text_ext_transformed_colour(x, y, string, sep, w, xscale, yscale, angle, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_transformed",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_transformed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_transformed.htm",
          "blurb": "This function will draw text in a similar way to draw_text() only now you can choose to scale the text along the horizontal or vertical axis (effectively stretching or shrinking it) and also have GameMaker draw it at an angle (where 0 is normal and every degree over 0 rotates the text anti-clockwise).",
          "syntax": "draw_text_transformed(x, y, string, xscale, yscale, angle)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_transformed_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_transformed_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_transformed_colour.htm",
          "blurb": "This function is a combination of the base draw_text() function with the draw_text_transformed() and draw_text_colour() functions, permitting you to scale and rotate text as well as colour it with a gradient fill and change its alpha value, ignoring the base alpha and colour settings for drawing.",
          "syntax": "draw_text_transformed_colour(x, y, string, xscale, yscale, angle, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_text_transformed_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_text_transformed_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_text_transformed_colour.htm",
          "blurb": "This function is a combination of the base draw_text() function with the draw_text_transformed() and draw_text_colour() functions, permitting you to scale and rotate text as well as colour it with a gradient fill and change its alpha value, ignoring the base alpha and colour settings for drawing.",
          "syntax": "draw_text_transformed_colour(x, y, string, xscale, yscale, angle, c1, c2, c3, c4, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_texture_flush",
      "type": "key",
      "topics": [
        {
          "name": "draw_texture_flush",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/draw_texture_flush.htm",
          "blurb": "With this function you can remove all textures from video memory, and they will then be reloaded on first use. This is the only effective way to manage video memory when you have multiple texture pages for a game, and you should flush the texture memory between levels on your game and organise the graphics using the texture group feature to ensure that the minimum number of textures are used.",
          "syntax": "draw_texture_flush()"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_tile",
      "type": "key",
      "topics": [
        {
          "name": "draw_tile",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_tile.htm",
          "blurb": "With this function you can draw any given tile from a tile set - compete with rotations, flips and mirrors - setting the frame (if animated) and the position within the room. The tile set ID value is the tile set index as set in the IDE and the tile data is the data \"blob\" that contains all the information about the tile index and the transformations that have been applied. You can use the function tilemap_get() to get the tile data which can then be manipulated using the Tile Functions, or you can construct it yourself using the following tile constants along with the index value of the tile to create:",
          "syntax": "draw_tile(tileset, tiledata, frame, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_tilemap",
      "type": "key",
      "topics": [
        {
          "name": "draw_tilemap",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_tilemap.htm",
          "blurb": "This function can be used to draw a given tilemap anywhere in the room. You give the tilemap element ID (which you get when you create a tilemap element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), then give the x/y position for drawing (in the room). Note that this will simply draw the tilemap at the specified point, using the layer depth of the instance that is calling the function. It does not move the tilemap - nor change it in any way - and does not matter if the tilemap is flagged as visible or not.",
          "syntax": "draw_tilemap(tilemap_element_id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_triangle",
      "type": "key",
      "topics": [
        {
          "name": "draw_triangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_triangle.htm",
          "blurb": "With this function you can draw either an outline of a triangle or a filled triangle.",
          "syntax": "draw_triangle(x1, y1, x2, y2, x3, y3, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_triangle_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_triangle_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_triangle_colour.htm",
          "blurb": "With this function you can draw either an outline of a triangle or a filled triangle. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()).",
          "syntax": "draw_triangle_colour(x1, y1, x2, y2, x3, y3, col1, col2, col3, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_triangle_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_triangle_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_triangle_colour.htm",
          "blurb": "With this function you can draw either an outline of a triangle or a filled triangle. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()).",
          "syntax": "draw_triangle_colour(x1, y1, x2, y2, x3, y3, col1, col2, col3, outline)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_vertex",
      "type": "key",
      "topics": [
        {
          "name": "draw_vertex",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex.htm",
          "blurb": "This function defines the position of a vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it. See draw_primitive_begin() for more information. To end and draw the primitive you must call draw_primitive_end().",
          "syntax": "draw_vertex(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_vertex_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_vertex_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex_colour.htm",
          "blurb": "This function defines the position of a vertex for a primitive, with its own colour and alpha setting. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it (see draw_primitive_begin() for more information) and the vertexes with different colours and alphas will blend smoothly from one to the other. To end and draw the primitive you must call draw_primitive_end().",
          "syntax": "draw_vertex_colour(x, y, col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_vertex_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_vertex_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex_colour.htm",
          "blurb": "This function defines the position of a vertex for a primitive, with its own colour and alpha setting. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it (see draw_primitive_begin() for more information) and the vertexes with different colours and alphas will blend smoothly from one to the other. To end and draw the primitive you must call draw_primitive_end().",
          "syntax": "draw_vertex_colour(x, y, col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_vertex_texture",
      "type": "key",
      "topics": [
        {
          "name": "draw_vertex_texture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex_texture.htm",
          "blurb": "This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See draw_primitive_begin() for more information), the order with which you add the vertexes to it and the position of the start point you set for the texture. To end and draw the primitive you must call draw_primitive_end().",
          "syntax": "draw_vertex_texture(x, y, xtex, ytex)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_vertex_texture_color",
      "type": "key",
      "topics": [
        {
          "name": "draw_vertex_texture_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex_texture_colour.htm",
          "blurb": "This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See draw_primitive_begin() for more information), the order with which you add the vertices to it, the position of the start and end points that you give for the texture sample and the colour and alpha values that you have set. To maintain the texture appearance while changing only the alpha, a value\nof -1 (or c_white) may be used for the colour argument. To end and draw the primitive you must call draw_primitive_end().",
          "syntax": "draw_vertex_texture_colour(x, y, xtex, ytex, col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "draw_vertex_texture_colour",
      "type": "key",
      "topics": [
        {
          "name": "draw_vertex_texture_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex_texture_colour.htm",
          "blurb": "This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See draw_primitive_begin() for more information), the order with which you add the vertices to it, the position of the start and end points that you give for the texture sample and the colour and alpha values that you have set. To maintain the texture appearance while changing only the alpha, a value\nof -1 (or c_white) may be used for the colour argument. To end and draw the primitive you must call draw_primitive_end().",
          "syntax": "draw_vertex_texture_colour(x, y, xtex, ytex, col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_exists",
      "type": "key",
      "topics": [
        {
          "name": "ds_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
          "blurb": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the DS \"type\", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.",
          "syntax": "ds_exists(ind, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_add",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_add.htm",
          "blurb": "This function can be used to add a given value (real or string) to the value of the given cell within the grid. The value to be added must be the same type as that held within the grid cell, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.",
          "syntax": "ds_grid_add(index, x, y, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_add_disk",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_add_disk",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_add_disk.htm",
          "blurb": "This function can be used to add a given value (real or string) to all the values of the cells found within the defined disk area of a grid. The value to be added must be of the same type as that held within the grid cells, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.",
          "syntax": "ds_grid_add_disk(index, xm, ym, r, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_add_grid_region",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_add_grid_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_add_grid_region.htm",
          "blurb": "This function can be used to add all the values of all the cells found within the source area of a grid to the values within the destination grid, as illustrated below:",
          "syntax": "ds_grid_add_grid_region(index, source, x1, y1, x2, y2, xpos, ypos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_add_region",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_add_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_add_region.htm",
          "blurb": "This function can be used to add a given value (real or string) to all the values of the cells found within the defined area of a grid. The value to be added must be of the same type as that held within the grid cells, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.",
          "syntax": "ds_grid_add_region(index, x1, y1, x2, y2, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_clear",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_clear.htm",
          "blurb": "This function can be used to clear a given DS grid to a specific value. All cells within the grid will then contain this value, which can be a real number or a string. The image below illustrates how this works:",
          "syntax": "ds_grid_clear(index, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_copy",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_copy.htm",
          "blurb": "With this function you can copy the contents of one grid into another one. Both grids must have been created previously using the ds_grid_create() function.",
          "syntax": "ds_grid_copy(destination, source)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_create",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_create.htm",
          "blurb": "With this function you can create a new DS grid data structure of the specified cell width and height. This function returns an id which must be used in all further functions that deal with this DS grid.",
          "syntax": "ds_grid_create(w, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_destroy",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_destroy.htm",
          "blurb": "This function will remove the given grid data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS grid to prevent memory leaks that can slow down and crash your game.",
          "syntax": "ds_grid_destroy(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get.htm",
          "blurb": "This function can be used to get the value from any cell within the given DS grid. If you pass invalid grid coordinates to the function, then the value returned will be undefined and an error will be shown in the output window.",
          "syntax": "ds_grid_get(index, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get_disk_max",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get_disk_max",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_disk_max.htm",
          "blurb": "This function can be used to find the maximum value for all the cells found within the defined disk area of a grid, as shown in the image below:",
          "syntax": "ds_grid_get_disk_max(index, xm, ym, r)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get_disk_mean",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get_disk_mean",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_disk_mean.htm",
          "blurb": "This function can be used to find the mean value for all the cells found within the defined disk area of a grid (all cell values are added together and then divided by the total number of cells that make up the disk), as shown in the image below:",
          "syntax": "ds_grid_get_disk_mean(index, xm, ym, r)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get_disk_min",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get_disk_min",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_disk_min.htm",
          "blurb": "This function can be used to find the minimum value for all the cells found within the defined disk area of a grid, as shown in the image below:",
          "syntax": "ds_grid_get_disk_min(index, xm, ym, r)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get_disk_sum",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get_disk_sum",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_disk_sum.htm",
          "blurb": "This function can be used to add all the values all the cells found within the defined disk area of a grid together, as shown in the image below:",
          "syntax": "ds_grid_get_disk_sum(index, xm, ym, r)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get_max",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get_max",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_max.htm",
          "blurb": "This function can be used to find the maximum value for all the cells found within the defined region of a grid, as shown in the image below:",
          "syntax": "ds_grid_get_max(index, x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get_mean",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get_mean",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_mean.htm",
          "blurb": "This function can be used to find the mean value for all the cells found within the defined region of a grid (all cell values are added together and then divided by the total number of cells that make the region), as shown in the image below:",
          "syntax": "ds_grid_get_mean(index, x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get_min",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get_min",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_min.htm",
          "blurb": "This function can be used to find the minimum value for all the cells found within the defined region of a grid, as shown in the image below:",
          "syntax": "ds_grid_get_min(index, x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_get_sum",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_get_sum",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_sum.htm",
          "blurb": "This function can be used to add all the values all the cells found within the defined region of a grid together, as shown in the image below:",
          "syntax": "ds_grid_get_sum(index, x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_height",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_height.htm",
          "blurb": "This function will return the height of the given grid. This value is the number of cells the grid has along the y-axis and is always an integer, as shown in the image below:",
          "syntax": "ds_grid_height(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_multiply",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_multiply",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_multiply.htm",
          "blurb": "This function will multiply the value of the given grid cell by the specified amount.",
          "syntax": "ds_grid_multiply(index, x, y, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_multiply_disk",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_multiply_disk",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_multiply_disk.htm",
          "blurb": "This function will take all the values in a given disc-shaped region of the DS grid, and multiply each one by the given amount.",
          "syntax": "ds_grid_multiply_disk(index, xm, ym, r, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_multiply_grid_region",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_multiply_grid_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_multiply_grid_region.htm",
          "blurb": "With this function you can define an area within a given DS grid, then take those values and multiply them with those found in a separate region of either the same DS grid, or another one (which has been previously created). The original region will remain unchanged, while the region that they have been multiplied with will now store the new values for each cell.",
          "syntax": "ds_grid_multiply_grid_region(index, source, x1, y1, x2, y2, xpos, ypos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_multiply_region",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_multiply_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_multiply_region.htm",
          "blurb": "With this function you can specify a region of the grid in which to multiply each cell value by a given amount.",
          "syntax": "ds_grid_multiply_region(index, x1, y1, x2, y2, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_read",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_read.htm",
          "blurb": "This function can be used to convert a string which has been created previously by the function ds_grid_write() back into a DS grid. The DS grid must have been created previously (see the example below).",
          "syntax": "ds_grid_read(index, string [, legacy])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_resize",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_resize",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_resize.htm",
          "blurb": "With this function you can resize the given DS grid to have a different width and/or height. If the grid size is larger than the current grid, the new cells will have a base value of 0, and if the size is smaller then the values held in the cells that are no longer within the new size will be lost. All other cells will be left untouched.",
          "syntax": "ds_grid_resize(index, w, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_set",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_set.htm",
          "blurb": "This function can be used to set a given cell within the given DS grid to any value, which can be a real number or a string. The image below illustrates this:",
          "syntax": "ds_grid_set(index, x, y, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_set_disk",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_set_disk",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_set_disk.htm",
          "blurb": "With this function you can set a circular region of a grid to a certain value. You need to supply a starting grid cell (as an x and y axis coordinate) as well as the radius of the disk to set and the value that you wish to set the disk too, as shown by the illustration below:",
          "syntax": "ds_grid_set_disk(index, xm, ym, r, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_set_grid_region",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_set_grid_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_set_grid_region.htm",
          "blurb": "This function can be used to copy the contents of a rectangular area of grid cells from one (previously defined) DS grid to another, or it can be used to copy a region from within the same grid. The following images illustrate both ways that this function can be used:",
          "syntax": "ds_grid_set_grid_region(index, source, x1, y1, x2, y2, xpos, ypos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_set_region",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_set_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_set_region.htm",
          "blurb": "This function can be used to set a rectangular region of a given grid to a specified value (which can be either a real or a string) as illustrated by the image shown below:",
          "syntax": "ds_grid_set_region(index, x1, y1, x2, y2, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_shuffle",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_shuffle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_shuffle.htm",
          "blurb": "This function can be used to randomise the positions of all values in all cells within a grid.",
          "syntax": "ds_grid_shuffle(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_sort",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_sort",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_sort.htm",
          "blurb": "This function can be used to sort a DS grid based on the values from a given column (much as you would sort files by date, size etc... in the OS file explorer). The following image shows an example:",
          "syntax": "ds_grid_sort(index, column, ascending)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_value_disk_exists",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_value_disk_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_disk_exists.htm",
          "blurb": "With this function you can check to see if a specific value (real or string) is present within a circular area of a given DS grid. If it is present the function will return true otherwise it will return false.",
          "syntax": "ds_grid_value_disk_exists(index, xm, ym, r, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_value_disk_x",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_value_disk_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_disk_x.htm",
          "blurb": "With this function you can get the x coordinate (within the given grid disc-shaped region) of the value being searched for. You give the DS grid index (as returned by ds_grid_create()) along with the x/y positions for the center cell of the disk. Then you give the radius (as an integer value) around the center cell to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
          "syntax": "ds_grid_value_disk_x(index, xm, ym, r, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_value_disk_y",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_value_disk_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_disk_y.htm",
          "blurb": "With this function you can get the y coordinate (within the given grid disc-shaped region) of the value being searched for. You give the DS grid index (as returned by ds_grid_create()) along with the x/y positions for the center cell of the disk. Then you give the radius (as an integer value) around the center cell to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
          "syntax": "ds_grid_value_disk_y(index, xm, ym, r, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_value_exists",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_value_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_exists.htm",
          "blurb": "With this function you can check to see if a specific value (real or string) is present within a rectangular area of a given DS grid. If it is present the function will return true otherwise it will return false.",
          "syntax": "ds_grid_value_exists(index, x1, y1, x2, y2, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_value_x",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_value_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_x.htm",
          "blurb": "With this function you can get the x coordinate (within the given rectangular grid region) of the value being searched for. You give the DS grid index (as returned by ds_grid_create()) along with the x/y positions for the top left and bottom right corners of the grid region to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
          "syntax": "ds_grid_value_x(index, x1, y1, x2, y2, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_value_y",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_value_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_y.htm",
          "blurb": "With this function you can get the y coordinate (within the given rectangular grid region) of the value being searched for. You give the DS grid index (as returned by ds_grid_create()) along with the x/y positions for the top left and bottom right corners of the grid region to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
          "syntax": "ds_grid_value_y(index, x1, y1, x2, y2, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_width",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_width.htm",
          "blurb": "This function will return the width of the given grid. This value is the number of cells the grid has along the x-axis and is always an integer, as shown in the image below:",
          "syntax": "ds_grid_width(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_grid_write",
      "type": "key",
      "topics": [
        {
          "name": "ds_grid_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_write.htm",
          "blurb": "This function can be used to convert the given ds_grid into a string, which can then be stored in an external file (for example). You can read the returned string from this function back into a ds_grid using the function ds_grid_read().",
          "syntax": "ds_grid_write(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_add",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_add.htm",
          "blurb": "This function can be used to add a new value (real or string) to the list, which will be added on at the end. The function can take further optional arguments (as many as you require), permitting you to add multiple values consecutively to the list in a single call.",
          "syntax": "ds_list_add(id, val1 [, val2, ... max_val])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_clear",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_clear.htm",
          "blurb": "With this function you can clear all data from the given list data-structure. This does NOT destroy the data-structure (for that you should use ds_list_destroy()) it only wipes all data from it and makes the list empty (zero in size). Note that clearing a list will de-reference any data structures stored in it giving a memory leak, so you would need to go through the list and destroy all data structure items manually before clearing it to prevent this. The only time this is not required is when you have flagged any items in the list as another DS list or as a DS map, in which case these items will be destroyed (not cleared!) and their memory cleaned up automatically when the parent is cleared.",
          "syntax": "ds_list_clear(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_copy",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_copy.htm",
          "blurb": "With this function you can copy the contents of one list into another. Both lists must have been created previously and if the list being copied to already has information within it, this list will be cleared first. The end result is two independent lists which contain the same information.",
          "syntax": "ds_list_copy( id, source )"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_create",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_create.htm",
          "blurb": "This function will create a new list data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the list. Note that if you try and access a value in the list before it has been populated - i.e. the list is \"empty\" - then the return value may be 0 since internally the first few entries in the list are set when created to minimize performance issues when initially adding items to the list (although the ds_list_size() function will still return 0 on a newly created list). If you wish to ensure that the list is \"truly\" empty on create, then you should call ds_list_clear() after creating the list, which will then mean that any values returned for unpopulated list slots will be undefined.",
          "syntax": "ds_list_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_delete",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_delete.htm",
          "blurb": "With this function you can remove the value stored at a specific position within the list.",
          "syntax": "ds_list_delete(id, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_destroy",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_destroy.htm",
          "blurb": "This function will remove the given list data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_list to prevent memory leaks that can slow down and crash your game. Note that destroying a list will de-reference any data structures stored in it giving a memory leak, so you would need to go through the list and destroy all data structure items manually before destroying it to prevent this. The only time this is not required is when you have flagged any items in the list as another DS list or as a DS map, in which case these items will be destroyed and their memory cleaned up automatically as well.",
          "syntax": "ds_list_destroy(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_empty",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_empty.htm",
          "blurb": "With this function you can check the given DS list to see if it is empty (returns true) or not (returns false).",
          "syntax": "ds_list_empty(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_find_index",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_find_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_find_index.htm",
          "blurb": "With this function you can check the given list for a value and the position within the list for that value will be returned. Note that if there are more than one entries in the list with the same value, the position of any one of them may be returned, and that if the value does not exist, then -1 will be returned.",
          "syntax": "ds_list_find_index(id, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_find_value",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_find_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_find_value.htm",
          "blurb": "With this function you can check the given list position and the value held within the list for that position will be returned. Note that if you give a position that is outside of the given list size (i.e.: position 11 in a 10 value list) then the function may return undefined or 0. This is because when you create the list, internally the first few entries in the list are set to 0 to minimize performance issues when initially adding items to the list (although the ds_list_size() function will still return 0 on a newly created list). If you wish to ensure that the list is \"truly\" empty on create, then you should call ds_list_clear() after creating the list, which will then mean that any values returned for unpopulated list slots will be undefined, which you can then check consistently using the is_undefined() function.",
          "syntax": "ds_list_find_value(id, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_insert",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_insert",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_insert.htm",
          "blurb": "This function will add the given value into the list at the given position. if the list contains more values after the given position, their position will be shifted up one to make room making the list larger by one.",
          "syntax": "ds_list_insert(id, pos, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_is_list",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_is_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_is_list.htm",
          "blurb": "With this function you can check to see if another DS list is stored at the given position within a DS list. If the given position contains a DS list ID, then the function will return true otherwise it will return false.",
          "syntax": "ds_list_is_list(id, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_is_map",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_is_map",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_is_map.htm",
          "blurb": "With this function you can check to see if a DS map is stored at the given position within a DS list. If the given position contains a DS map ID, then the function will return true otherwise it will return false.",
          "syntax": "ds_list_is_map(id, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_mark_as_list",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_mark_as_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_mark_as_list.htm",
          "blurb": "This function will \"mark\" (or \"flag\") a given position within a previously created DS list as holding another DS list. This functionality is required when encoding JSON strings (which you can create using json_encode()), but can also be useful when nesting data-structures, as items marked in this way will automatically be garbage collected (destroyed) when the parent DS list is destroyed. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the \"parent\" list. However, if you delete the list position individually, the DS list it contained will not be garbage collected and you should call the appropriate DS list destroy function before deleting the item from the parent list position. Also note that if you call the function ds_list_clear() on a list, any items flagged as lists will be destroyed as well when the list is cleared.",
          "syntax": "ds_list_mark_as_list(id, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_mark_as_map",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_mark_as_map",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_mark_as_map.htm",
          "blurb": "This function will \"mark\" (or \"flag\") a given position within a previously created DS list as holding a DS map. This functionality is required when encoding JSON strings (which you can create using json_encode()), but can also be useful when nesting data-structures, as items marked in this way will automatically be garbage collected (destroyed) when the parent DS list is destroyed. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the \"parent\" list. However, if you delete the list position individually, the data structure it contained will not be garbage collected and you should call the appropriate DS map destroy function before deleting the parent list position. Also note that if you call the function ds_list_clear() on a list, any items flagged as maps will be destroyed as well when the list is cleared.",
          "syntax": "ds_list_mark_as_map(id, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_read",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_read.htm",
          "blurb": "With this function you can recreate a saved DS list (one that has previously been written as a string using ds_list_write()). You must first create a new DS list to read the string into, and if the DS list already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.",
          "syntax": "ds_list_read(id, str [, legacy])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_replace",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_replace",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_replace.htm",
          "blurb": "This function will replace the value at the given position for another one.",
          "syntax": "ds_list_replace(id, pos, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_set",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_set.htm",
          "blurb": "This function can be used to set a previously added list entry. You give the list ID (as returned when you created the list) and the position within the list to set as well as the value to set it to. Note that if the entry being set is outside the bounds of the list (ie, you set list entry 20 but the current list only contains 10 entries) then the list will be filled to the given position and each entry will be set to 0. This function is the same as using the DS list accessor.",
          "syntax": "ds_list_set(id, pos, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_shuffle",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_shuffle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_shuffle.htm",
          "blurb": "With this function you can shuffle a list, which will re-order all the component values into random positions from those in which they were originally added to the list.",
          "syntax": "ds_list_shuffle(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_size",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_size.htm",
          "blurb": "This function will return the \"size\" of the list, ie: the number of items that have been added into it.",
          "syntax": "ds_list_size(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_sort",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_sort",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_sort.htm",
          "blurb": "With this function you can sort all the values within a list, either in ascending or descending order. If the list contains strings, these will be sorted alphabetically, based on the English 26 letter alphabet.",
          "syntax": "ds_list_sort(id, ascend)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_list_write",
      "type": "key",
      "topics": [
        {
          "name": "ds_list_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_write.htm",
          "blurb": "This function returns a string which can then be stored or transferred to another data structure using the ds_list_read() function.",
          "syntax": "ds_list_write(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_add",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_add.htm",
          "blurb": "This function should be used to add sets of key/value pairs into the specified DS map. You can check this function to see if it was successful or not (it will return true on success or false otherwise), as it may fail if there already exists the same key in the DS map or you specify a non-existent DS map as the ID of the map to add to. The keys and and values you supply can be made up of any combination of data types, so all of the following - and\nmore - are acceptable (although, in practice, you would most commonly use a string for the key):",
          "syntax": "ds_map_add(id, key, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_add_list",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_add_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_add_list.htm",
          "blurb": "With this function you can assign a (previously created) DS list to a key within the given DS map. This function is designed for creating JSON compatible maps which you would then encode using json_encode() and should only be used in conjunction with that functionality. If a DS map has a list added in this way, destroying the parent map will also destroy the contained lists and free their memory, and calling ds_map_clear() on the parent map will also destroy and clean up any flagged lists.",
          "syntax": "ds_map_add_list(id, key, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_add_map",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_add_map",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_add_map.htm",
          "blurb": "With this function you can assign a (previously created) DS map to a key within the given DS map . This function is designed for creating JSON compatible maps which you would then encode using json_encode() and should only be used in conjunction with that functionality. If a DS map has another map added in this way, then destroying the parent map will also destroy the contained maps and free their memory, and calling ds_map_clear() on the parent map will also destroy and clean up any flagged maps.",
          "syntax": "ds_map_add_map(id, key, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_clear",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_clear.htm",
          "blurb": "This function will clear the (previously created) DS map of all key/value pairs, but it will not delete the DS map itself from memory. For that you should use the function ds_map_destroy(). Note that clearing a map will de-reference any data structures stored in the map giving a memory leak, so you would need to go through it and destroy all data structure items manually before clearing the map to prevent this. The only time this is not required is when you have flagged any items in the map as a DS list or as another DS map, in which case these items will be destroyed (not cleared!) and their memory cleaned up automatically when the parent map is cleared.",
          "syntax": "ds_map_clear(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_copy",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_copy.htm",
          "blurb": "You can use this function to copy the contents of one map into another one that you have previously created using ds_map_create(). If the DS map that is being copied to is not empty, then this function will clear it first before copying. The original DS map remains unchanged by this process.",
          "syntax": "ds_map_copy(id, source)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_create",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm",
          "blurb": "This function is used to create a new, empty, DS map and will return its id which is then used to access the data structure in all other DS map functions.",
          "syntax": "ds_map_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_delete",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_delete.htm",
          "blurb": "With this function you can remove any given key (and its corresponding value) from the given, previously created, DS map .",
          "syntax": "ds_map_delete(id, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_destroy",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_destroy.htm",
          "blurb": "DS maps take up space in memory, which is allocated to them when they are created. This means that you also need to free this memory when the DS map is not needed to prevent errors, memory leaks and loss of performance when running your game. This function does just that. Note that destroying a map will de-reference any data structures stored in the map giving a memory leak, so you would need to go through the map and destroy all data structure items manually before destroying it to prevent this. The\nonly time this is not required is when you have flagged any items in the map as a DS list or as another DS map, in which case these items will be destroyed and their memory cleaned up\nautomatically as well.",
          "syntax": "ds_map_destroy(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_empty",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_empty.htm",
          "blurb": "This function will simply return false if the specified (previously created) DS map contains any key/value pairs, or true if it does not.",
          "syntax": "ds_map_empty(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_exists",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_exists.htm",
          "blurb": "This function will return true if the specified key exists in the (previously created) DS map , and false if it does not.",
          "syntax": "ds_map_exists(id, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_find_first",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_find_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_first.htm",
          "blurb": "This function returns the first key stored in the DS map. This is not the first key in the order you added them! DS maps are not stored in a linear form, for that use DS list, so all this does is find the first key as stored by the computer. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow.",
          "syntax": "ds_map_find_first(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_find_last",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_find_last",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_last.htm",
          "blurb": "This function returns the last key stored in the DS map. This is not the last key in the order that you have added them! DS maps are not stored in a linear form, for that use DS lists, so all this does is find the last key as stored by the computer. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow.",
          "syntax": "ds_map_find_last(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_find_next",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_find_next",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_next.htm",
          "blurb": "This function returns the next key stored in the DS map after the one specified in the function. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow. If no such key exists then the function will return undefined. You should always check this using the is_undefined() function.",
          "syntax": "ds_map_find_next(id, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_find_previous",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_find_previous",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_previous.htm",
          "blurb": "This function returns the previous key stored in the DS map before the one specified in the function. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow. If no such key exists then the function will return undefined. You should always check this using the is_undefined() function.",
          "syntax": "ds_map_find_previous(id, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_find_value",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_find_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm",
          "blurb": "With this function you can get the value from a specified key. The input values of the function are the (previously created) DS map to use and the key to check for.",
          "syntax": "ds_map_find_value(id, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_is_list",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_is_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_is_list.htm",
          "blurb": "With this function you can check to see if a DS list is stored in the given map key. If the given key contains a DS list ID, then the function will return true otherwise it will return false.",
          "syntax": "ds_map_is_list(id, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_is_map",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_is_map",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_is_map.htm",
          "blurb": "With this function you can check to see if a DS map is stored in the given map key. If the given key contains a DS map ID, then the function will return true otherwise it will return false.",
          "syntax": "ds_map_is_map(id, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_keys_to_array",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_keys_to_array",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_keys_to_array.htm",
          "blurb": "With this function you can retrieve all of the keys that a DS map contains. You supply the DS map ID to get the keys from (as returned by ds_map_create()) and the function will return an array where each entry in the array is a key from the DS map. The function has an optional second argument where you can supply an array that you have created, in which case the map key data will be appended onto any existing data in the array. Note that the function will modify the array supplied directly, but will also return a reference to it (or a reference to a new array if none is supplied).",
          "syntax": "ds_map_keys_to_array(id, [array])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_read",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_read.htm",
          "blurb": "This function will take a string that has previously been created by the function ds_map_write() and then read it into a previously created DS map. If the map that the string is being read into contains any key/value pairs, these will be cleared first before the saved map is re-constructed.",
          "syntax": "ds_map_read(id, str, [legacy])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_replace",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_replace",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_replace.htm",
          "blurb": "With this function you can change the value for the given key within the a DS map . You supply the index to the map (as returned by the function ds_map_create()) and then the key to replace - either a string or an integer - and the value to replace the key value with. If the given key does not exist then it will be created for you, and if it does then the current value will be replaced with the new\nvalue. The function will return true if the key exists and the value is replaced, and false if the key does not exist and a new key was created with the value.",
          "syntax": "ds_map_replace( id, key, val )"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_replace_list",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_replace_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_replace_list.htm",
          "blurb": "With this function you can replace a DS list that has been stored in the given \"key\" with another list that has been created previously. This function is designed for creating JSON compatible maps which you would then encode using json_encode() and should only be used in conjunction with that functionality.",
          "syntax": "ds_map_replace_list(id, key, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_replace_map",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_replace_map",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_replace_map.htm",
          "blurb": "With this function you can replace a DS Map that has been stored in the given \"key\" with another map that has been created previously. This function is designed for creating JSON compatible maps which you would then encode using json_encode() and should only be used in conjunction with that functionality.",
          "syntax": "ds_map_replace_map(id, key, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_secure_load",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_secure_load",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_load.htm",
          "blurb": "This function will load a previously saved DS map from the given file. This file must have been previously created using the ds_map_secure_save() function, and, when loaded, the function will return the index of the DS map that has been created from the loaded data. This DS map index should be stored in a variable and used for all further function calls to this map. Note that if the DS map being loaded was saved with an array as one of the key values, this array will have been converted into a DS list on load.",
          "syntax": "ds_map_secure_load(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_secure_load_buffer",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_secure_load_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_load_buffer.htm",
          "blurb": "This function will load a secure saved DS map from a buffer. You must previously have loaded the buffer into memory (using buffer_load()) and then passing that into this function will return a DS map populated with the contents of the buffer. Note that the buffer must have been created using the function ds_map_secure_save_buffer() for this to work correctly, and also note that if the DS map being loaded contained an array, this will be converted into a DS list instead on load.",
          "syntax": "ds_map_secure_load_buffer(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_secure_save",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_secure_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_save.htm",
          "blurb": "This function will save the contents of the given DS map to a file that is linked to the device it was created on (meaning it can't be read if transferred to any other device). The file itself can have almost any extension (for example, *.dat, *.json, *.bin, etc...) and will be obfuscated and stored to local storage on the target platform. You can then re-load the ds_map using the function ds_map_secure_load(). Note that if\nthe DS map being saved contains an array, this array will be converted into a DS list instead when saved.",
          "syntax": "ds_map_secure_save(map, filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_secure_save_buffer",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_secure_save_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_save_buffer.htm",
          "blurb": "This function will save a previously created DS map to a buffer. You supply the DS map ID value (as returned by the function ds_map_create()) and the ID of the buffer to write to (as returned by the function buffer_create()). Note that if the DS map being saved contains an array, this will be converted into a DS list instead when saved.",
          "syntax": "ds_map_secure_save_buffer(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_set",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_set.htm",
          "blurb": "With this function you can set the value of a key within a given DS map. You supply the DS map ID value (as returned by the function ds_map_create()), then give the key you want to set and the value to set it to. Keys can be integers or strings, and if the given key does not exist then it will be created for you and set to the value. This function is the same as using the DS map accessor to set/create a map key/value pair. The function does not return anything, so if you need to check if the key value has been replaced or a new key has been created, then you should use the function ds_map_replace().",
          "syntax": "ds_map_set(id, key, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_size",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_size.htm",
          "blurb": "With this function you can find how many key/values pairs the (previously created) DS map contains.",
          "syntax": "ds_map_size(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_values_to_array",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_values_to_array",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_values_to_array.htm",
          "blurb": "With this function you can retrieve all of the values that a DS map contains for each key in the map. You supply the DS map ID to get the keys from (as returned by ds_map_create()) and the function will return an array where each entry in the array is a value from the DS map (for example, if the map has 10 keys, then an array of 10 entries will be returned with each entry corresponding to a value for a key). The function has an optional second argument where you can supply an array that you have created, in which case the map key value data will be appended onto any existing data in the array. Note that the function will modify the array supplied directly, but will also return a reference to it (or a reference to a new array if none is supplied).",
          "syntax": "ds_map_values_to_array(id, [array])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_map_write",
      "type": "key",
      "topics": [
        {
          "name": "ds_map_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_write.htm",
          "blurb": "This function will turn the DS map data of the specified map into string format which can then be written to an *.ini or a *.txt file for easy storage. This string can then be later read back into a new ds_map using ds_map_read().",
          "syntax": "ds_map_write(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_add",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_add.htm",
          "blurb": "With this function you can add a value (either a real number or a string) to a priority queue, at the same time assigning it a priority value.",
          "syntax": "ds_priority_add(id, val, priority)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_change_priority",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_change_priority",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_change_priority.htm",
          "blurb": "This function will take a given value and change its priority within the referenced priority queue. The given value should already exist in the priority queue.",
          "syntax": "ds_priority_change_priority(id, val, priority)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_clear",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_clear.htm",
          "blurb": "With this function you can clear all data from the given priority queue data-structure. This does NOT destroy the data-structure (for that you should use ds_priority_destroy()) it only wipes all data from it and returns an empty priority queue.",
          "syntax": "ds_priority_clear(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_copy",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_copy.htm",
          "blurb": "This function can be used to copy the contents of one priority queue into another. Note that this does NOT remove the contents from the original priority queue, nor does it destroy the original priority queue. When using this function the priority queue being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
          "syntax": "ds_priority_copy(id, source)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_create",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_create.htm",
          "blurb": "This function will create a new priority queue data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the priority queue.",
          "syntax": "ds_priority_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_delete_max",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_delete_max",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_delete_max.htm",
          "blurb": "This function will return the value that has the highest priority in the queue and then remove the value (and priority) from the data structure. If more than one value has the same priority, then any one of them could be returned in any order, but all other values with the same priority will still be in the queue.",
          "syntax": "ds_priority_delete_max(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_delete_min",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_delete_min",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_delete_min.htm",
          "blurb": "This function will return the value that has the lowest priority in the queue and then remove the value (and priority) from the data structure. If more than one value has the same priority, then any one of them could be returned in any order, but all other values with the same priority will still be in the queue.",
          "syntax": "ds_priority_delete_min(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_delete_value",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_delete_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_delete_value.htm",
          "blurb": "This function will simply delete the given value, along with its priority, from the indexed priority queue.",
          "syntax": "ds_priority_delete_value(id,val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_destroy",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_destroy.htm",
          "blurb": "This function will remove the given priority queue data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS priority queue to prevent memory leaks that can slow down and crash your game.",
          "syntax": "ds_priority_destroy(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_empty",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_empty.htm",
          "blurb": "With this function you can check the given DS priority queue to see if it is empty (returns true) or not (returns false).",
          "syntax": "ds_priority_empty(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_find_max",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_find_max",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_find_max.htm",
          "blurb": "With this function you can find the value stored in the priority queue with the highest priority, and if more than one value has the same priority then any one of them could be returned in any order. However, unlike ds_priority_delete_max(), this function will not remove the value from the queue.",
          "syntax": "ds_priority_find_max(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_find_min",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_find_min",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_find_min.htm",
          "blurb": "With this function you can find the value stored in the priority queue with the lowest priority, and if more than one value has the same priority then any one of them could be returned in any order. However, unlike ds_priority_delete_min(), this function will not remove the value from the queue.",
          "syntax": "ds_priority_find_min(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_find_priority",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_find_priority",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_find_priority.htm",
          "blurb": "With this function you can retrieve the priority of any given value. If the value does not exist in the priority queue then undefined will be returned.",
          "syntax": "ds_priority_find_priority(id, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_read",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_read.htm",
          "blurb": "With this function you can recreate a saved DS priority (one that has previously been written as a string using ds_priority_write()). You must first create a new DS priority to read the string into, and if the DS priority already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.",
          "syntax": "ds_priority_read(id, str, [legacy])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_size",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_size.htm",
          "blurb": "This function will return the \"size\" of the priority queue, ie: the number of items that have been prioritized in it.",
          "syntax": "ds_priority_size(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_priority_write",
      "type": "key",
      "topics": [
        {
          "name": "ds_priority_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_write.htm",
          "blurb": "This function returns a string which can then be stored or transferred to another data structure using the ds_priority_read() function.",
          "syntax": "ds_priority_write(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_clear",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_clear.htm",
          "blurb": "With this function you can clear all data from the given queue data-structure. This does NOT destroy the data-structure (for that you should use ds_queue_destroy()) it only wipes all data from it and returns an empty queue.",
          "syntax": "ds_queue_clear(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_copy",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_copy.htm",
          "blurb": "This function can be used to copy the contents of one queue into another. Note that this does NOT remove the contents from the original queue, nor does it destroy the original queue. When using this function the queue being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
          "syntax": "ds_queue_copy(id, source)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_create",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_create.htm",
          "blurb": "This function will create a new queue data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the queue.",
          "syntax": "ds_queue_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_dequeue",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_dequeue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_dequeue.htm",
          "blurb": "This function will dequeue the head value off of the DS queue, removing it from the queue and returning the value to be stored in a variable. If the queue is empty then the function will return the constant undefined, otherwise it will return the value contained in the queue.",
          "syntax": "ds_queue_dequeue(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_destroy",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_destroy.htm",
          "blurb": "This function will remove the given queue data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS queue to prevent memory leaks that can slow down and crash your game.",
          "syntax": "ds_queue_destroy(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_empty",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_empty.htm",
          "blurb": "With this function you can check the given DS queue to see if it is empty (returns true) or not (returns false).",
          "syntax": "ds_queue_empty(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_enqueue",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_enqueue",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_enqueue.htm",
          "blurb": "This function will add a value (real or string) onto the tail of the DS queue. The function can take a further 14 optional arguments (making a total of 15 possible additions), permitting you to add multiple values consecutively to the tail of the queue in a single call.",
          "syntax": "ds_queue_enqueue(id, val [, val2, ... val15])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_head",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_head",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_head.htm",
          "blurb": "This function will only read the first value of the queue (that which is \"at the head\"). It will not dequeue the value, meaning that it can still be read in the future by this function or the ds_queue_dequeue(). If the queue is empty then the function will return the constant undefined, otherwise it will return the real or string value contained in the queue.",
          "syntax": "ds_queue_head(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_read",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_read.htm",
          "blurb": "With this function you can recreate a saved DS queue (one that has previously been written as a string using ds_queue_write()). You must first create a new DS queue to read the string into, and if the DS queue already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.",
          "syntax": "ds_queue_read(id, str [, legacy])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_size",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_size.htm",
          "blurb": "This function will return the \"size\" of the queue, ie: the number of items that have been queued onto it.",
          "syntax": "ds_queue_size(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_tail",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_tail",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_tail.htm",
          "blurb": "This function will only read the last value of the queue (that which is \"at the tail\"). It will not dequeue the value, meaning that it can still be read in the future by this function or the ds_queue_dequeue().",
          "syntax": "ds_queue_tail(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_queue_write",
      "type": "key",
      "topics": [
        {
          "name": "ds_queue_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_write.htm",
          "blurb": "This function returns a string which can then be stored or transferred to another data structure using the ds_queue_read() function.",
          "syntax": "ds_queue_write(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_set_precision",
      "type": "key",
      "topics": [
        {
          "name": "ds_set_precision",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/ds_set_precision.htm",
          "blurb": "When comparing values, for example when searching in a map or sorting a list, GameMaker must decide when two values are equal. For strings and integer values this is clear but for real numbers, due to floating point round-off errors, seemingly equal numbers can easily become unequal. For example, it's possible that (5 / 3) * 3 will not be equal to 5! To help avoid this, a precision value is used on all real number functions, and when the difference between two numbers is smaller than this precision they are considered equal. The default a precision of 0.0000001 is used for all data structure functions unless changed by this function.",
          "syntax": "ds_set_precision(prec)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_clear",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_clear.htm",
          "blurb": "With this function you can clear all data from the given stack data-structure. This does NOT destroy the data-structure (for that you should use ds_stack_destroy()) it only wipes all data from it and returns an empty stack.",
          "syntax": "ds_stack_clear(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_copy",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_copy.htm",
          "blurb": "This function can be used to copy the contents of one stack into another. Note that this does NOT remove the contents from the original stack, nor does it destroy the original stack. When using this function the stack being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
          "syntax": "ds_stack_copy(id, source)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_create",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_create.htm",
          "blurb": "This function will create a new stack data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the stack.",
          "syntax": "ds_stack_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_destroy",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_destroy.htm",
          "blurb": "This function will remove the given stack data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS stack to prevent memory leaks that can slow down and crash your game.",
          "syntax": "ds_stack_destroy(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_empty",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_empty.htm",
          "blurb": "With this function you can check the given DS stack to see if it is empty (returns true) or not (returns false).",
          "syntax": "ds_stack_empty(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_pop",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_pop",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_pop.htm",
          "blurb": "This function will pop the top value off of the DS stack, removing it from the stack and returning the value to be stored in a variable. If the stack is empty then the function will return the constant undefined, otherwise it will return the real or string value contained in the stack.",
          "syntax": "ds_stack_pop(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_push",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_push",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_push.htm",
          "blurb": "This function will push (add) a value, which can be of any data type, onto the top of the stack. The function can take a further 14 optional arguments (making a total of 15 possible additions), permitting you to push multiple values consecutively to the stack in a single call.",
          "syntax": "ds_stack_push(id, val [, val2, ... val15])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_read",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_read.htm",
          "blurb": "With this function you can recreate a saved DS stack (one that has previously been written as a string using ds_stack_write()). You must first create a new DS stack to read the string into, and if the DS stack already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.",
          "syntax": "ds_stack_read(id, str [, legacy])"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_size",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_size.htm",
          "blurb": "This function will return the \"size\" of the stack, ie: the number of items that have been pushed onto it.",
          "syntax": "ds_stack_size(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_top",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_top",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_top.htm",
          "blurb": "This function will only read the first value of the stack (that which is \"on top\"). It will not pop the value, meaning that it can still be read in the future by this function or the ds_stack_pop(). If the stack is empty then the function will return the constant undefined, otherwise it will return the real or string value contained in the stack.",
          "syntax": "ds_stack_top(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_stack_write",
      "type": "key",
      "topics": [
        {
          "name": "ds_stack_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_write.htm",
          "blurb": "This function returns a string which can then be stored or transferred to another data structure using the ds_stack_read() function.",
          "syntax": "ds_stack_write(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_type_grid",
      "type": "key",
      "topics": [
        {
          "name": "ds_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
          "blurb": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the DS \"type\", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.",
          "syntax": "ds_exists(ind, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_type_list",
      "type": "key",
      "topics": [
        {
          "name": "ds_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
          "blurb": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the DS \"type\", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.",
          "syntax": "ds_exists(ind, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_type_map",
      "type": "key",
      "topics": [
        {
          "name": "ds_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
          "blurb": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the DS \"type\", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.",
          "syntax": "ds_exists(ind, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_type_priority",
      "type": "key",
      "topics": [
        {
          "name": "ds_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
          "blurb": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the DS \"type\", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.",
          "syntax": "ds_exists(ind, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_type_queue",
      "type": "key",
      "topics": [
        {
          "name": "ds_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
          "blurb": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the DS \"type\", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.",
          "syntax": "ds_exists(ind, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "ds_type_stack",
      "type": "key",
      "topics": [
        {
          "name": "ds_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
          "blurb": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the DS \"type\", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.",
          "syntax": "ds_exists(ind, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "dsin",
      "type": "key",
      "topics": [
        {
          "name": "dsin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dsin.htm",
          "blurb": "In a right angled triangle dsin(val) = Opposite / Hypotenuse where \"val\" is one of the three angles.",
          "syntax": "dsin(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "dtan",
      "type": "key",
      "topics": [
        {
          "name": "dtan",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dtan.htm",
          "blurb": "In a right angled triangle dtan(val) = Opposite / Adjacent where \"val\" is one of the three angles.",
          "syntax": "dtan(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "Dynamic Texture Groups",
      "type": "key",
      "topics": [
        {
          "name": "Dynamic Textures",
          "type": "topic",
          "url": "Settings/Texture_Information/Dynamic_Textures.htm",
          "blurb": "In the Texture Group settings, you can mark a group as \"Default\" or \"Dynamic\"."
        }
      ],
      "keys": []
    },
    {
      "name": "ef_cloud",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_ellipse",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_explosion",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_firework",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_flare",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_rain",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_ring",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_smoke",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_smokeup",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_snow",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_spark",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "ef_star",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        },
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "effect_clear",
      "type": "key",
      "topics": [
        {
          "name": "effect_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_clear.htm",
          "blurb": "This will clear all particles that are currently visible in the room which have been made using either effect_create_above() or effect_create_below().",
          "syntax": "effect_clear()"
        }
      ],
      "keys": []
    },
    {
      "name": "effect_create_above",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_above",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm",
          "blurb": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_above(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "effect_create_below",
      "type": "key",
      "topics": [
        {
          "name": "effect_create_below",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
          "blurb": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
          "syntax": "effect_create_below(kind, x, y, size, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "else",
      "type": "key",
      "topics": [
        {
          "name": "if / else and Conditional Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm",
          "blurb": "A fundamental feature of most programming languages is the ability to ask a simple question that gives a boolean true or false answer, and in GML this is achieved using the if keyword. A simple if condition takes an expression and will perform one or more statements if the expression resolves as true, with the following basic form:"
        }
      ],
      "keys": []
    },
    {
      "name": "end",
      "type": "key",
      "topics": [
        {
          "name": "begin / end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/begin_end.htm",
          "blurb": "The GameMaker Language permits you to use the keywords begin and end instead of the more usual curly brackets {} when creating code blocks. The code example below shows how this works:"
        }
      ],
      "keys": []
    },
    {
      "name": "enum",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        }
      ],
      "keys": []
    },
    {
      "name": "environment",
      "type": "key",
      "topics": [
        {
          "name": "GameMaker IDE",
          "type": "topic",
          "url": "The_IDE/The_IDE.htm",
          "blurb": "GameMaker's Integrated Development Environment (or IDE) is the main interface where you create your games and make use of all functionality provided by the software. Essentially, the program itself -- from the Start Screen to every editor window you use to make your game -- is known and referred to as the IDE throughout the manual and various tutorials."
        }
      ],
      "keys": []
    },
    {
      "name": "environment_get_variable",
      "type": "key",
      "topics": [
        {
          "name": "environment_get_variable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/environment_get_variable.htm",
          "blurb": "This function returns the value (a string) of the environment variable with the given name (also a string). You can get the available environment variables on macOS and Ubuntu (Linux) by typing \"env\" into the terminal app, and for information on Windows environment variables, if you are using the command prompt then type \"echo %PATH%\", and using PowerShell it's \"ls env\". Note that on both macOS and Ubuntu (Linux) the \"HOME\"\nenvironment variable will return the \"~/\" path which maps to \"/Users/<username>\" on macOS and \"/home/<username>\" on Ubuntu (Linux).",
          "syntax": "environment_get_variable(name)"
        }
      ],
      "keys": []
    },
    {
      "name": "Error Reporting",
      "type": "key",
      "topics": [
        {
          "name": "Error Reporting",
          "type": "topic",
          "url": "Additional_Information/Error_Reporting.htm",
          "blurb": "This section covers all the errors you may get for your game's GML code."
        },
        {
          "name": "IDE Error Reporting",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Error_Reporting.htm",
          "blurb": "While great care has been taken when creating GameMaker to ensure that it is a stable and reliable tool, there is always the possibility that an issue could occur given the nature of the software and the operating systems it runs on. In most cases any errors will be caught by GameMaker and you may be prompted to save your projects and then close and restart the program. If this happens then we would request that you file a bug with the Helpdesk. You can do this using the Report A Bug option from the Help Menu and, we ask that when doing so you give as much information as possible and also supply a link to the GameMaker ui.log file, which can be found in the following locations, depending on the OS:"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_alarm",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_animation_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_async_save_load",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_audio_playback",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_audio_recording",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_dialog_async",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_message_event",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_push_notification",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_social",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_system_event",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_web_async",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_web_cloud",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_web_iap",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_web_image_load",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_web_image_loaded",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_web_networking",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_web_sound_load",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_async_web_steam",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_boundary",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_cleanup",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_close_button",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_collision",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_create",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_destroy",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_draw",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_draw_begin",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_draw_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_draw_post",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_draw_pre",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_end_of_path",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_game_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_game_start",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_double_tap",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_drag_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_drag_start",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_dragging",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_flick",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_pinch_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_pinch_in",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_pinch_out",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_pinch_start",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_rotate_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_rotate_start",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_rotating",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gesture_tap",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_double_tap",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_drag_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_drag_start",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_dragging",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_flick",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_pinch_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_pinch_in",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_pinch_out",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_pinch_start",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_rotate_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_rotate_start",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_rotating",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_gesture_tap",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_left_button",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_left_press",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_left_release",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_middle_button",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_middle_press",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_middle_release",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_right_button",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_right_press",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_global_right_release",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gui",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gui_begin",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_gui_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_keyboard",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_keypress",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_keyrelease",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_left_button",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_left_press",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_left_release",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_middle_button",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_middle_press",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_middle_release",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_mouse",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_mouse_enter",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_mouse_leave",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_mouse_wheel_down",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_mouse_wheel_up",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_no_button",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_no_more_health",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_no_more_lives",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_other",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_outside",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_right_button",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_right_press",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_right_release",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_room_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_room_start",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_step",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        },
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_step_begin",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_step_end",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_step_normal",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "ev_user",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "Evaluation Order",
      "type": "key",
      "topics": [
        {
          "name": "Evaluation Order",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Evaluation_Order.htm",
          "blurb": "When programming your game using the GameMaker Language you should be aware that function call arguments are not guaranteed an evaluation order. What this means is that the order in which functions placed in your code are run will change from platform to platform, so you should code them in an explicit manner. This is due to optimisation differences between the different target platforms, for example on the Windows target function arguments may be evaluated from right to left, but on the HTML5 target, they may be evaluated from left to right. So to avoid any issues you are best not to call multiple functions in the arguments of a single function call as you may well be building in a reliance on the order of evaluation."
        }
      ],
      "keys": []
    },
    {
      "name": "event_action",
      "type": "key",
      "topics": [
        {
          "name": "event_action",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_action.htm",
          "blurb": "This read-only variable returns the index of the action currently being executed, starting at 0 on previous versions of GameMaker. However, this is now an obsolete variable in GameMaker. It has been left in for legacy support only, and will always return 0 as all actions are concatenated together to improve execution speed.",
          "syntax": "event_action"
        }
      ],
      "keys": []
    },
    {
      "name": "event_data",
      "type": "key",
      "topics": [
        {
          "name": "event_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/event_data.htm",
          "blurb": "This variable is global in scope and is used to hold a DS Map when used in the appropriate event (e.g. Gesture Events and Broadcast Messages), and -1 at all other times. The actual contents of the DS map will depend on the type of event that triggered it, so refer to the individual sections for those events.",
          "syntax": "event_data"
        },
        {
          "name": "Gesture Events",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Gesture_Events.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "event_inherited",
      "type": "key",
      "topics": [
        {
          "name": "event_inherited",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm",
          "blurb": "This function will call the current event of the parent object of the instance. Normally, when an instance has a parent object, it automatically inherits all the same events as the parent, but if (for example) your parent object has a create event and you add one to your child object, all instances of the child object will run the new create event that you have added and not that which is in the parent object. Should you need to use both the parent object event and the child object event of the same type, you should use this function as it will run the parent object event before continuing with the rest of the code or actions that the child event contains.",
          "syntax": "event_inherited()"
        }
      ],
      "keys": []
    },
    {
      "name": "event_number",
      "type": "key",
      "topics": [
        {
          "name": "event_number",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_number.htm",
          "blurb": "This read-only variable returns the number of the event currently being called, where the number is actually referring to the \"sub event\" of the event, ie: for the step event the event number could be any one of the constants ev_step_normal, ev_step_begin, or ev_step_end. For a full list of constants that are available for the specific sub-events see event_perform(), and if you should need to know the main event itself, you should be checking the event_type.",
          "syntax": "event_number"
        }
      ],
      "keys": []
    },
    {
      "name": "event_object",
      "type": "key",
      "topics": [
        {
          "name": "event_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_object.htm",
          "blurb": "This read-only variable returns object index of the instance which is running the event being checked.",
          "syntax": "event_object"
        }
      ],
      "keys": []
    },
    {
      "name": "event_perform",
      "type": "key",
      "topics": [
        {
          "name": "event_perform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
          "blurb": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
          "syntax": "event_perform(type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "event_perform_async",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
          "blurb": "This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
          "syntax": "event_perform_async(type, ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "event_perform_object",
      "type": "key",
      "topics": [
        {
          "name": "event_perform_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_object.htm",
          "blurb": "This functions works the same as event_perform() except that this time you can specify events from another object. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but the relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down. You can find a complete list of the available constants this function requires from the the page for the function event_perform().",
          "syntax": "event_perform_object(obj, type, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "event_type",
      "type": "key",
      "topics": [
        {
          "name": "event_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm",
          "blurb": "This read-only variable returns the type of event currently being executed, which can be one of the following constants:",
          "syntax": "event_type"
        }
      ],
      "keys": []
    },
    {
      "name": "event_user",
      "type": "key",
      "topics": [
        {
          "name": "event_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_user.htm",
          "blurb": "With this function you tell the instance to run the actions or code that has been placed within one of the 16 user defined events. These events can only be called in this way, or using the event_perform function.",
          "syntax": "event_user(numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "exception_unhandled_handler",
      "type": "key",
      "topics": [
        {
          "name": "exception_unhandled_handler",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/exception_unhandled_handler.htm",
          "blurb": "This runtime function can be used to \"take over\" the default GameMaker error message when a runtime exception occurs. You supply a method or function which is called when the exception occurs, and its first argument will be a struct (known as the Exception Struct) containing information about the exception. This struct has the following format:",
          "syntax": "exception_unhandled_handler(user_handler)"
        }
      ],
      "keys": []
    },
    {
      "name": "exit",
      "type": "key",
      "topics": [
        {
          "name": "exit",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/exit.htm",
          "blurb": "The exit statement has the following syntax:"
        }
      ],
      "keys": []
    },
    {
      "name": "exp",
      "type": "key",
      "topics": [
        {
          "name": "exp",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/exp.htm",
          "blurb": "This is the function power(e,n), where e is approximately 2.718281828 (also known as Euler's Number), and n is the number of times it should be multiplied by itself. This basically says \"how much growth do I get after n units of time (and 100% continuous growth)?\". So exp(3) would return 20.08, which means that after 3 time units we have 20.08 times the amount we started with.",
          "syntax": "exp(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "Expressions And Operators",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "Extension Editor",
      "type": "key",
      "topics": [
        {
          "name": "Extensions",
          "type": "topic",
          "url": "The_Asset_Editors/Extensions.htm",
          "blurb": "An extension package can be used to add a number of additional functions and constants to the GameMaker Language (GML) and easily transfer them between projects. Extension functions can also be linked to external SDKs or source code written in other languages (like Java for Android, Objective-C for iOS, etc.) which can be used to expand your game's functionality (usually used for implementing third party APIs, such as for ads, in-app purchases, and more)."
        }
      ],
      "keys": []
    },
    {
      "name": "extension_exists",
      "type": "key",
      "topics": [
        {
          "name": "extension_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Extensions/extension_exists.htm",
          "blurb": "This function tells whether an extension with the given name exists (true) or not (false).",
          "syntax": "extension_exists(extension_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "extension_get_option_count",
      "type": "key",
      "topics": [
        {
          "name": "extension_get_option_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Extensions/extension_get_option_count.htm",
          "blurb": "This function returns the total number of options that exist in the extension with the given name.",
          "syntax": "extension_get_option_count(extension_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "extension_get_option_names",
      "type": "key",
      "topics": [
        {
          "name": "extension_get_option_names",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Extensions/extension_get_option_names.htm",
          "blurb": "This function returns an array containing the names of all the options that exist in the extension with the given name.",
          "syntax": "extension_get_option_names(extension_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "extension_get_option_value",
      "type": "key",
      "topics": [
        {
          "name": "extension_get_option_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Extensions/extension_get_option_value.htm",
          "blurb": "This function returns the value of the given option in the extension with the given name.",
          "syntax": "extension_get_option_value(extension_name, option_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "extension_get_options",
      "type": "key",
      "topics": [
        {
          "name": "extension_get_options",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Extensions/extension_get_options.htm",
          "blurb": "This function returns a struct containing all the options, and their values, for the extension with the given name.",
          "syntax": "extension_get_options(extension_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "Extensions - Creating An Extension",
      "type": "key",
      "topics": [
        {
          "name": "Creating An Extension",
          "type": "topic",
          "url": "The_Asset_Editors/Extension_Creation/Creating_An_Extension.htm",
          "blurb": "To create an extension, you'll first need to right click  anywhere within the Asset Browser and select Create -> Extension. This will open the Extension properties for your newly created asset in the Workspace:"
        }
      ],
      "keys": []
    },
    {
      "name": "Extensions - Creating Android Extensions",
      "type": "key",
      "topics": [
        {
          "name": "Android Extensions",
          "type": "topic",
          "url": "The_Asset_Editors/Extension_Creation/Android_Extensions.htm",
          "blurb": "To create an extension for Android you have to do it in two parts. The first part would be to add the extension itself, along with the required files, and the second is to create the functions and macros/constants that the extension requires."
        }
      ],
      "keys": []
    },
    {
      "name": "Extensions - Creating iOS / tvOS Extensions",
      "type": "key",
      "topics": [
        {
          "name": "iOS / tvOS Extensions",
          "type": "topic",
          "url": "The_Asset_Editors/Extension_Creation/iOS_Extensions.htm",
          "blurb": "To create an extension for iOS or tvOS you have to do it in two parts. The first part would be to add the extension itself, along with the required files, and the second is to create the functions and macros/constants that the extension requires."
        }
      ],
      "keys": []
    },
    {
      "name": "external_call",
      "type": "key",
      "topics": [
        {
          "name": "external_call",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/external_call.htm",
          "blurb": "If you have created an external function call to a dll or dylib using external_define(), you can use this function to then call it. You supply the name of the previously defined function as well as each of the arguments it requires (each argument must be of the correct type, either real or string) and the function returns the result of the external call.",
          "syntax": "external_call(id, args[0...15])"
        }
      ],
      "keys": []
    },
    {
      "name": "external_define",
      "type": "key",
      "topics": [
        {
          "name": "external_define",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
          "blurb": "This function can be used to define an external function call to a specific dll (for Windows) or dylib (for Mac). This file can be either an included file or part of an extension.",
          "syntax": "external_define(dll, name, calltype, restype, argnumb, argtype[0], argtype[1], ...argtype[10])"
        }
      ],
      "keys": []
    },
    {
      "name": "external_free",
      "type": "key",
      "topics": [
        {
          "name": "external_free",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/external_free.htm",
          "blurb": "This function frees the memory associated with the dll or dylib with the given name. This should be done whenever the file in question is no longer needed in the game, normally (for example) in a Game End event.",
          "syntax": "external_free(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_archive",
      "type": "key",
      "topics": [
        {
          "name": "file_attributes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
          "blurb": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
          "syntax": "file_attributes(fname, attr)"
        },
        {
          "name": "file_find_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_first.htm",
          "blurb": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned.",
          "syntax": "file_find_first(mask, attr)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_bottom",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_valign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_valign.htm",
          "blurb": "This function is used to get the text alignment setting along the vertical axis, and will return one of the constants listed below.",
          "syntax": "draw_get_valign()"
        },
        {
          "name": "draw_set_valign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_valign.htm",
          "blurb": "This function is used to align text along the vertical axis and changing the vertical alignment will change the position and direction in which all further text is drawn, with the default value being fa_top. The following constants are accepted:",
          "syntax": "draw_set_valign(valign)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_center",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_halign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_halign.htm",
          "blurb": "This function is used to get the text alignment setting along the horizontal axis, and will return one of the constants listed below.",
          "syntax": "draw_get_halign()"
        },
        {
          "name": "draw_set_halign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_halign.htm",
          "blurb": "This function is used to align text along the horizontal axis and changing the horizontal alignment will change the position and direction in which all further text is drawn with the default value being fa_left. The following constants are accepted:",
          "syntax": "draw_set_halign(halign)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_directory",
      "type": "key",
      "topics": [
        {
          "name": "file_attributes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
          "blurb": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
          "syntax": "file_attributes(fname, attr)"
        },
        {
          "name": "file_find_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_first.htm",
          "blurb": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned.",
          "syntax": "file_find_first(mask, attr)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_hidden",
      "type": "key",
      "topics": [
        {
          "name": "file_attributes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
          "blurb": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
          "syntax": "file_attributes(fname, attr)"
        },
        {
          "name": "file_find_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_first.htm",
          "blurb": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned.",
          "syntax": "file_find_first(mask, attr)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_left",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_halign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_halign.htm",
          "blurb": "This function is used to get the text alignment setting along the horizontal axis, and will return one of the constants listed below.",
          "syntax": "draw_get_halign()"
        },
        {
          "name": "draw_set_halign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_halign.htm",
          "blurb": "This function is used to align text along the horizontal axis and changing the horizontal alignment will change the position and direction in which all further text is drawn with the default value being fa_left. The following constants are accepted:",
          "syntax": "draw_set_halign(halign)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_middle",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_valign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_valign.htm",
          "blurb": "This function is used to get the text alignment setting along the vertical axis, and will return one of the constants listed below.",
          "syntax": "draw_get_valign()"
        },
        {
          "name": "draw_set_valign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_valign.htm",
          "blurb": "This function is used to align text along the vertical axis and changing the vertical alignment will change the position and direction in which all further text is drawn, with the default value being fa_top. The following constants are accepted:",
          "syntax": "draw_set_valign(valign)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_readonly",
      "type": "key",
      "topics": [
        {
          "name": "file_attributes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
          "blurb": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
          "syntax": "file_attributes(fname, attr)"
        },
        {
          "name": "file_find_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_first.htm",
          "blurb": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned.",
          "syntax": "file_find_first(mask, attr)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_right",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_halign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_halign.htm",
          "blurb": "This function is used to get the text alignment setting along the horizontal axis, and will return one of the constants listed below.",
          "syntax": "draw_get_halign()"
        },
        {
          "name": "draw_set_halign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_halign.htm",
          "blurb": "This function is used to align text along the horizontal axis and changing the horizontal alignment will change the position and direction in which all further text is drawn with the default value being fa_left. The following constants are accepted:",
          "syntax": "draw_set_halign(halign)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_sysfile",
      "type": "key",
      "topics": [
        {
          "name": "file_attributes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
          "blurb": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
          "syntax": "file_attributes(fname, attr)"
        },
        {
          "name": "file_find_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_first.htm",
          "blurb": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned.",
          "syntax": "file_find_first(mask, attr)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_top",
      "type": "key",
      "topics": [
        {
          "name": "draw_get_valign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_get_valign.htm",
          "blurb": "This function is used to get the text alignment setting along the vertical axis, and will return one of the constants listed below.",
          "syntax": "draw_get_valign()"
        },
        {
          "name": "draw_set_valign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Text/draw_set_valign.htm",
          "blurb": "This function is used to align text along the vertical axis and changing the vertical alignment will change the position and direction in which all further text is drawn, with the default value being fa_top. The following constants are accepted:",
          "syntax": "draw_set_valign(valign)"
        }
      ],
      "keys": []
    },
    {
      "name": "fa_volumeid",
      "type": "key",
      "topics": [
        {
          "name": "file_attributes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
          "blurb": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
          "syntax": "file_attributes(fname, attr)"
        },
        {
          "name": "file_find_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_first.htm",
          "blurb": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned.",
          "syntax": "file_find_first(mask, attr)"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_accesstoken (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_check_permission (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_dialog (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_graph_request (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_init (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_launch_offerwall (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_login (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_logout (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_post_message (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_request_publish_permissions (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_request_read_permissions (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_send_invite (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_status (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "facebook_user_id (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "Facebook",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Facebook/Facebook.htm",
          "blurb": "Facebook is one of the most important social media sites on the internet and many games and developers currently have their own pages for posting games and media. GameMaker has an extension that permits you to connect with Facebook and perform certain actions and tasks that their API permits. It is recommended that you visit the Facebook Developers page before starting to use the extension as a firm understanding of how the Facebook Graph works and the available calls and permissions is essential for you to get the most from these functions. \nYou can find out how to setup and use the Facebook extension for all available platforms from the following link:\n"
        }
      ],
      "keys": []
    },
    {
      "name": "false",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        },
        {
          "name": "Maths And Numbers",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Maths_And_Numbers.htm",
          "blurb": "GameMaker contains a large number functions to deal with different areas of mathematics, numbers of all types and the date and time. Most of these functions can be found in the sections listed below:"
        }
      ],
      "keys": []
    },
    {
      "name": "file_attributes",
      "type": "key",
      "topics": [
        {
          "name": "file_attributes",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
          "blurb": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
          "syntax": "file_attributes(fname, attr)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_bin_close",
      "type": "key",
      "topics": [
        {
          "name": "file_bin_close",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_close.htm",
          "blurb": "Closes a previously opened binary file. You supply the file ID value, as returned by the function file_bin_open().",
          "syntax": "file_bin_close(binfile)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_bin_open",
      "type": "key",
      "topics": [
        {
          "name": "file_bin_open",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_open.htm",
          "blurb": "This function will open the binary file with the indicated name. The mode indicates what can be done with the file:",
          "syntax": "file_bin_open(fname, mode)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_bin_position",
      "type": "key",
      "topics": [
        {
          "name": "file_bin_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_position.htm",
          "blurb": "This function will returns the current position in bytes, where 0 is the first position, of the file with the given file id. You supply the file ID value, as returned by the function file_bin_open().",
          "syntax": "file_bin_position(binfile)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_bin_read_byte",
      "type": "key",
      "topics": [
        {
          "name": "file_bin_read_byte",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_read_byte.htm",
          "blurb": "This function will return a byte of data from current position within the file with the given file ID. You supply the file ID value, as returned by the function file_bin_open().",
          "syntax": "file_bin_read_byte(binfile)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_bin_rewrite",
      "type": "key",
      "topics": [
        {
          "name": "file_bin_rewrite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_rewrite.htm",
          "blurb": "This function takes the filename handle as returned by the function file_bin_open() and then rewrites the file, clearing it of all previous data to start writing from the beginning of the file.",
          "syntax": "file_bin_rewrite(binfile)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_bin_seek",
      "type": "key",
      "topics": [
        {
          "name": "file_bin_seek",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_seek.htm",
          "blurb": "This function moves the current read position within the file to the indicated position. You supply the file ID value, as returned by the function file_bin_open(), and to append a file, move the position to the size of the file before writing.",
          "syntax": "file_bin_seek(binfile, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_bin_size",
      "type": "key",
      "topics": [
        {
          "name": "file_bin_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_size.htm",
          "blurb": "This function will return the size (in bytes) of a file that has been opened for reading and/or writing. The File ID is the value returned by the function file_bin_open().",
          "syntax": "file_bin_size(binfile)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_bin_write_byte",
      "type": "key",
      "topics": [
        {
          "name": "file_bin_write_byte",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_write_byte.htm",
          "blurb": "This function will write a byte of data to the file identified by the file ID at the current write position. You supply the file ID value, as returned by the function file_bin_open() and the byte of data to write.",
          "syntax": "file_bin_write_byte(binfile, byte)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_copy",
      "type": "key",
      "topics": [
        {
          "name": "file_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_copy.htm",
          "blurb": "This function will copy the specified file, giving it the new name that you choose.",
          "syntax": "file_copy(fname, newname)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_delete",
      "type": "key",
      "topics": [
        {
          "name": "file_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_delete.htm",
          "blurb": "This function will delete the specified file from the system. It should be noted that this function will only delete those files that GameMaker is able to create and parse: ini files, text files and binary files, or those files made to store game created resources like sprites or surfaces. However, it will not delete any other file. The function will also return true if the file has successfully been removed, or false in any other circumstances.",
          "syntax": "file_delete(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_exists",
      "type": "key",
      "topics": [
        {
          "name": "file_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_exists.htm",
          "blurb": "This function will return true if the specified file exists and false if it does not. Note that the function can only be used to check local files, but not any files stored on a remote server.",
          "syntax": "file_exists(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_find_close",
      "type": "key",
      "topics": [
        {
          "name": "file_find_close",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_close.htm",
          "blurb": "This function must be called after handling files opened using file_find_first() and file_find_next() functions to free memory. The file find functions open handles into the file directory and these take up a minimal amount of memory, which (over time) adds up. Therefore you should always call this function after you have found the files you require to \"close\" these handles.",
          "syntax": "file_find_close()"
        }
      ],
      "keys": []
    },
    {
      "name": "file_find_first",
      "type": "key",
      "topics": [
        {
          "name": "file_find_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_first.htm",
          "blurb": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned.",
          "syntax": "file_find_first(mask, attr)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_find_next",
      "type": "key",
      "topics": [
        {
          "name": "file_find_next",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_next.htm",
          "blurb": "This function returns the name of the next file that satisfies the previously given mask and the attributes (defined by file_find_first()). If no such file exists, the empty string is returned.",
          "syntax": "file_find_next()"
        }
      ],
      "keys": []
    },
    {
      "name": "file_rename",
      "type": "key",
      "topics": [
        {
          "name": "file_rename",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/file_rename.htm",
          "blurb": "This function will rename the specified file with the specified name. The function will return true if the file has successfully been renamed, or false in any other circumstances.",
          "syntax": "file_rename(oldname, newname)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_close",
      "type": "key",
      "topics": [
        {
          "name": "file_text_close",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_close.htm",
          "blurb": "Once you have finished working with a given file (whether reading from it or writing to it), you must close the file again, or else you risk losing the information contained within. This also prevents memory leaks and makes sure that you never go over the file limit by having more than 32 files open.",
          "syntax": "file_text_close(fileid)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_eof",
      "type": "key",
      "topics": [
        {
          "name": "file_text_eof",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_eof.htm",
          "blurb": "This function returns true when the end of a given opened text file has been reached or false if not.",
          "syntax": "file_text_eof(fileid)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_eoln",
      "type": "key",
      "topics": [
        {
          "name": "file_text_eoln",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_eoln.htm",
          "blurb": "With this function you can get GameMaker to check the currently opened file to see if the line being read has finished. The function returns true if the end of the line has been reached and false otherwise.",
          "syntax": "file_text_eoln(fileid)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_open_append",
      "type": "key",
      "topics": [
        {
          "name": "file_text_open_append",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_open_append.htm",
          "blurb": "This function opens the text file with the indicated filename for writing (if the file does not exist, it is created), returning the unique id of the file that which should be stored in a variable as it will be used for all further actions to do with that file. The position within the file for writing to is set to the last line of text that the file contains, so any existing data is not overwritten.",
          "syntax": "file_text_open_append(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_open_from_string",
      "type": "key",
      "topics": [
        {
          "name": "file_text_open_from_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_open_from_string.htm",
          "blurb": "This function will create a text file from a string and open it for reading, returning the file \"handle\" that should be used in all further file function calls to read from this file. Note that this file is temporary and read only, and as such it will be removed from memory the moment it is closed.",
          "syntax": "file_text_open_from_string(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_open_read",
      "type": "key",
      "topics": [
        {
          "name": "file_text_open_read",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_open_read.htm",
          "blurb": "This function opens the text file with the indicated filename for reading only, returning the unique id of the file that which should be stored in a variable as it will be used for all further actions to do with that file. If the file does not exists then the function will return the value -1.",
          "syntax": "file_text_open_read(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_open_write",
      "type": "key",
      "topics": [
        {
          "name": "file_text_open_write",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_open_write.htm",
          "blurb": "This function opens the text file with the indicated filename for writing only (if the file does not exist, it is created), returning the unique id of the file that which should be stored in a variable as it will be used for all further actions to do with that file.",
          "syntax": "file_text_open_write(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_read_real",
      "type": "key",
      "topics": [
        {
          "name": "file_text_read_real",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_read_real.htm",
          "blurb": "With this function you can read a real number value from a text file and the function returns that value to be used or stored in a variable.",
          "syntax": "file_text_read_real(fileid)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_read_string",
      "type": "key",
      "topics": [
        {
          "name": "file_text_read_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_read_string.htm",
          "blurb": "With this function you can read a string from a text file and the function returns that value to be used or stored in a variable.",
          "syntax": "file_text_read_string(fileid)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_readln",
      "type": "key",
      "topics": [
        {
          "name": "file_text_readln",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_readln.htm",
          "blurb": "With this function you can skip the remainder of the current line from a given opened text file and move to the start of the next one. The function will also return the full line as a string, making it an easy way to read complete \"chunks\" of data for parsing later.",
          "syntax": "file_text_readln(fileid)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_write_real",
      "type": "key",
      "topics": [
        {
          "name": "file_text_write_real",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_write_real.htm",
          "blurb": "With this function you can write a number to the previously opened text file. Note that as the value to be written can be a real number, all decimals will be written with a \".\" point as separator. If the file already contains information, this information will be erased and the string will be written at the beginning of the file, unless you have opened the file with the file_text_open_append(). You can also avoid this by using the file_text_readln() function along with the file_text_eof() function to loop through the contents of the file until you get to the end and then start writing.",
          "syntax": "file_text_write_real(fileid, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_write_string",
      "type": "key",
      "topics": [
        {
          "name": "file_text_write_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_write_string.htm",
          "blurb": "With this function you can write a string to a previously opened text file. If the file already contains information, this information will be erased and the string will be written at the beginning of the file, unless you have opened the file with the file_text_open_append(). You can also avoid this by using the file_text_readln() function along with the file_text_eof() function to loop through the contents of the file until you get to the end and then start writing.",
          "syntax": "file_text_write_string(fileid, str)"
        }
      ],
      "keys": []
    },
    {
      "name": "file_text_writeln",
      "type": "key",
      "topics": [
        {
          "name": "file_text_writeln",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_writeln.htm",
          "blurb": "With this function you can write a new line to an opened text file. In this way you can skip lines or write information on a line by line basis (see example code below).",
          "syntax": "file_text_writeln(fileid)"
        }
      ],
      "keys": []
    },
    {
      "name": "filename_change_ext",
      "type": "key",
      "topics": [
        {
          "name": "filename_change_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/filename_change_ext.htm",
          "blurb": "This function returns the indicated file name with the extension (including the dot) changed to the new extension. By using an empty string as the new extension you can remove the extension part all together.",
          "syntax": "filename_change_ext(fname, newext)"
        }
      ],
      "keys": []
    },
    {
      "name": "filename_dir",
      "type": "key",
      "topics": [
        {
          "name": "filename_dir",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/filename_dir.htm",
          "blurb": "This function returns the directory part of the indicated file name, which normally is the same as the path except for the final backslash.",
          "syntax": "filename_dir(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "filename_drive",
      "type": "key",
      "topics": [
        {
          "name": "filename_drive",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/filename_drive.htm",
          "blurb": "This function returns the drive information of the filename.",
          "syntax": "filename_drive(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "filename_ext",
      "type": "key",
      "topics": [
        {
          "name": "filename_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/filename_ext.htm",
          "blurb": "This function returns the extension part of the indicated file name, including the leading dot.",
          "syntax": "filename_ext(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "filename_name",
      "type": "key",
      "topics": [
        {
          "name": "filename_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/filename_name.htm",
          "blurb": "Using this function returns the name part of the indicated file, with the extension but without the path.",
          "syntax": "filename_name(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "filename_path",
      "type": "key",
      "topics": [
        {
          "name": "filename_path",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/filename_path.htm",
          "blurb": "Using this function returns the path part of the indicated file path, including the final backslash.",
          "syntax": "filename_path(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "Filters and Effects",
      "type": "key",
      "topics": [
        {
          "name": "Filters and Effects",
          "type": "topic",
          "url": "The_Asset_Editors/Room_Properties/Filters_and_Effects.htm",
          "blurb": "In the Room Editor, you can add a new Filter/Effect layer by clicking on the  button, which will add a new layer and open up its properties below:"
        }
      ],
      "keys": []
    },
    {
      "name": "finally",
      "type": "key",
      "topics": [
        {
          "name": "try / catch / finally",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/try_catch_finally.htm",
          "blurb": "The try, catch and finally statements can be used in your game for error checking and permit you to test out blocks of code and control what happens if any runtime exceptions occur. Using these will prevent the exception ending the game and showing the standard error message to the user, but this means that you will have to handle what happens next in that case, like saving out log files - for example - and ending the game gracefully (note that if you choose to do nothing, your game may become unstable and not perform correctly)."
        }
      ],
      "keys": []
    },
    {
      "name": "floor",
      "type": "key",
      "topics": [
        {
          "name": "floor",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/floor.htm",
          "blurb": "Returns the floor of n, that is, n rounded down to an integer. This is similar to the round() function, but it only rounds down, no matter what the decimal value, so floor(5.99999) will return 5, as will floor(5.2), floor(5.6457) etc...",
          "syntax": "floor(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "Font Editor",
      "type": "key",
      "topics": [
        {
          "name": "Fonts",
          "type": "topic",
          "url": "The_Asset_Editors/Fonts.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "font_add",
      "type": "key",
      "topics": [
        {
          "name": "font_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add.htm",
          "blurb": "This function can be used to add a font to your game from a font file present in the Included Files. You can define the size of the font (in points), as well as whether the font should be bold or italic, and you can also define the range of characters to include. The function returns an index value that should be stored in a variable as this will be needed in all further code that refer to this font, or it will return -1 if the function fails for any reason.",
          "syntax": "font_add(name, size, bold, italic, first, last)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_add_enable_aa",
      "type": "key",
      "topics": [
        {
          "name": "font_add_enable_aa",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add_enable_aa.htm",
          "blurb": "This function can be used to enable or disable anti-aliasing (AA) for fonts added using font_add(). This function needs to be called before you add any fonts and setting it to true will enable AA, and setting it to false will disable it. By default AA is enabled. Note that this will have no effect on fonts that have been added before the function was called, and the function only needs to be called once when the font is added, and not every draw/step that the font is being used.",
          "syntax": "font_add_enable_aa(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_add_get_enable_aa",
      "type": "key",
      "topics": [
        {
          "name": "font_add_get_enable_aa",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add_get_enable_aa.htm",
          "blurb": "This function can be used to check whether anti-aliasing (AA) is enabled for fonts added using font_add(). The function will return true if AA is enabled, and false if it is not. Note that AA is enabled by default, but you can change the AA state for added fonts using the function font_add_enable_aa(), as long as it is called before adding the font.",
          "syntax": "font_add_get_enable_aa()"
        }
      ],
      "keys": []
    },
    {
      "name": "font_add_sprite",
      "type": "key",
      "topics": [
        {
          "name": "font_add_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add_sprite.htm",
          "blurb": "With this function you can use a \"sprite strip\" to create a new font asset, where each sub-image would be an individual symbol or letter. The index is the UTF8 map number for the first character to use and the ranges to use are the same as you would for a normal font, starting with \"!\" but remember that you should only include what you need and that you should be using the ord() function to get the correct UTF8 value for the starting letter. The created sprite font will then have the sub-images set to an individual glyph from the font, where the \"first\" glyph will have the image_index of 0. You can define \"space\" as being any character you want, for example a single line the size that you want the space to be, and all spaces in text will be rendered at that width (but the image chosen will never be rendered), or if you don't supply a sprite for space then the width of the widest character in the sprite font will be used instead.",
          "syntax": "font_add_sprite(spr, first, prop, sep)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_add_sprite_ext",
      "type": "key",
      "topics": [
        {
          "name": "font_add_sprite_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add_sprite_ext.htm",
          "blurb": "With this function you can use a \"sprite strip\" (the sprite itself must be a sprite asset from the Asset Browser, or a sprite you have added to the game resources using sprite_add) to create a new font asset, where each sub-image would be an individual symbol or letter. Unlike the normal font_add_sprite() which has a specific order for the sub-images of the sprite, this function will map the sprite sub-images based on the argument \"string_map\" of the function. This argument is a string that you can use to tell GameMaker what order the sub-images of the sprite font are and it will map these automatically when writing text. So, for example, if you have a string-map of \"AaBbCcDdEeFfGgHh\", your sprite font must have the sub-images ordered in this way. You can define \"space\" as being any character you want, for example a single line the size that you want the space to be, and all spaces in text will be rendered at that width (but the image chosen will never be rendered), or if you don't supply a sprite for space then the width of the widest character in the sprite font will be used instead.",
          "syntax": "font_add_sprite_ext(spr, string_map, prop, sep)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_delete",
      "type": "key",
      "topics": [
        {
          "name": "font_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_delete.htm",
          "blurb": "With this function you can delete a font asset from the game. This is a permanent removal, and changing rooms, or restarting the game will not bring the removed font back. For that the player would need to exit the game and restart that way, so take care when using this function. In general it is only needed for freeing up memory that has been used by a font added to the game through the functions font_add() or font_add_sprite().",
          "syntax": "font_delete(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_exists",
      "type": "key",
      "topics": [
        {
          "name": "font_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_exists.htm",
          "blurb": "This function returns whether a font with the specified index exists or not. You can check font indices as defined from the Asset Browser, or fonts that have been added using functions like font_add().",
          "syntax": "font_exists(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_bold",
      "type": "key",
      "topics": [
        {
          "name": "font_get_bold",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_bold.htm",
          "blurb": "With this function you can check any font asset to see if it has the bold flag or not. If it does the function will return true, otherwise it will return false.",
          "syntax": "font_get_bold(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_first",
      "type": "key",
      "topics": [
        {
          "name": "font_get_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_first.htm",
          "blurb": "When defining a font in GameMaker, you can define a range of characters to include. This is because the font itself is not actually included with your game (for legal reasons) but an image of the font is included on a texture page and that is what your game will use (just like any other graphics asset). This means that you will want to keep the number of characters that you use to a minimum and specify only the range of characters that\nyour game will need so as to keep texture memory as optimised as possible. This function can be used to find the starting character (as an ASCII value) that was used when your font asset was added to your game.",
          "syntax": "font_get_first(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_fontname",
      "type": "key",
      "topics": [
        {
          "name": "font_get_fontname",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_fontname.htm",
          "blurb": "With this function you can get the actual system name of the given font asset. This function returns a string and not an index, and the name returned will depend on the font being used. For example, you may have a font asset called \"fnt_Main\" in the Asset Browser, and the font itself may be the Windows system font Arial. In this case the function will return \"Arial\" as that is the system name of the font. If you need the name that appears in the Asset Browser, use font_get_name().",
          "syntax": "font_get_fontname(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_info",
      "type": "key",
      "topics": [
        {
          "name": "font_get_info",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_info.htm",
          "blurb": "This function is used to retrieve information for the given font. You supply a font index (which can be an asset added through the Asset Browser or a font added at runtime) and the function returns a struct with the following variables:",
          "syntax": "font_get_info(font)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_italic",
      "type": "key",
      "topics": [
        {
          "name": "font_get_italic",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_italic.htm",
          "blurb": "With this function you can check any font asset to see if it has the italic flag or not. If it does the function will return true, otherwise it will return false.",
          "syntax": "font_get_italic(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_last",
      "type": "key",
      "topics": [
        {
          "name": "font_get_last",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_last.htm",
          "blurb": "When defining a font in GameMaker, you can define a range of characters to include. This is because the font itself is not actually included with your game (for legal reasons) but an image of the font is included on a texture page and that is what your game will use (just like any other graphics asset). This means that you will want to keep the number of characters that you use to a minimum and specify only the range of characters that\nyour game will need so as to keep texture memory as optimised as possible. This function can be used to find the last character (as an UTF8 value) that was used when your font asset was added to your game.",
          "syntax": "font_get_last(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_name",
      "type": "key",
      "topics": [
        {
          "name": "font_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_name.htm",
          "blurb": "This function can be used to get the name (as a string) that was given to the font when it was added as an asset to the GameMaker Asset Browser. Please note that this is only a string and cannot be used to reference the font directly - for that you would need the font index. You can, however, use this string to get the font index using the returned string along with the\nfunction asset_get_index().",
          "syntax": "font_get_name(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_size",
      "type": "key",
      "topics": [
        {
          "name": "font_get_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_size.htm",
          "blurb": "With this function you can get the size of any font resource, which is the point value shown by the font resource dialogue.",
          "syntax": "font_get_size(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_texture",
      "type": "key",
      "topics": [
        {
          "name": "font_get_texture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_texture.htm",
          "blurb": "This function returns a special pointer for the font texture page. This value can then be used in other draw functions, particularly in general drawing when using primitives as well as the Shader functions. You can get more information about the returned texture page using the different texture_ functions found here.",
          "syntax": "font_get_texture(font)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_get_uvs",
      "type": "key",
      "topics": [
        {
          "name": "font_get_uvs",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_uvs.htm",
          "blurb": "This function returns an array with the UV coordinates for the font texture on the texture page, filling in the array with the following values:",
          "syntax": "font_get_uvs(font)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_replace",
      "type": "key",
      "topics": [
        {
          "name": "font_replace",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_replace.htm",
          "blurb": "This function can be used to replace a font in your game from those fonts that are installed on the system it is running on. Note that the font being replaces cannot be a font from the Asset Browser, and must be a font that was added previously using the function font_add().",
          "syntax": "font_replace(ind, name, size, bold, italic, first, last)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_replace_sprite",
      "type": "key",
      "topics": [
        {
          "name": "font_replace_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_replace_sprite.htm",
          "blurb": "With this function you can use a \"sprite strip\" to replace a previously created sprite font asset, where each sub-image would be an individual symbol or letter. The index is the UTF8 map number for the first character to use and the ranges to use are the same as you would for a normal font, starting with \"!\" but remember that you should only include what you need and that you should be using the ord() function to get the correct UTF8 value for the starting letter.",
          "syntax": "font_replace_sprite(ind, spr, first, prop, sep)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_replace_sprite_ext",
      "type": "key",
      "topics": [
        {
          "name": "font_replace_sprite_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_replace_sprite_ext.htm",
          "blurb": "This function will replace a sprite font that you created previously using the function font_add_sprite_ext(). It uses a \"sprite strip\", where each sub-image is be an individual symbol or letter, and the images are mapped to letters based on the argument \"string_map\" of the function. This argument is a string that you can use to tell GameMaker what order the sub-images of the sprite font are and it will map these automatically when writing text. So, for example, if you have a string-map of \"AaBbCcDdEeFfGgHh\", your sprite font must have the sub-images ordered in this way.",
          "syntax": "font_replace_sprite_ext(font, spr, string_map, prop, sep)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_set_cache_size",
      "type": "key",
      "topics": [
        {
          "name": "font_set_cache_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_set_cache_size.htm",
          "blurb": "When performing image blending and colouring, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker has to temporarily save a blended copy of the images and load them in when needed. This function sets how many blended copies of the given font can be cached before old ones are overwritten. The default value is 4.",
          "syntax": "font_set_cache_size(ind, max)"
        }
      ],
      "keys": []
    },
    {
      "name": "font_texture_page_size",
      "type": "key",
      "topics": [
        {
          "name": "font_texture_page_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_texture_page_size.htm",
          "blurb": "This built-in variable can be used to either get or set the texture page size when using the function font_add(). On adding a font using that function, GameMaker will create a texture page cache of the required glyphs up to the size defined by this variable. The process is as follows:",
          "syntax": "font_texture_page_size"
        }
      ],
      "keys": []
    },
    {
      "name": "for",
      "type": "key",
      "topics": [
        {
          "name": "for",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/for.htm",
          "blurb": "One of the most used ways to iterate over a statement (or statements) multiple times is to use a for loop, which has this form:"
        }
      ],
      "keys": []
    },
    {
      "name": "fps",
      "type": "key",
      "topics": [
        {
          "name": "fps",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/fps.htm",
          "blurb": "In GameMaker there are two main ways that can be used to tell the speed at which your game runs. The game speed (as specified in the Game Options) and the fps (frames per second). These values are often confused, but basically one is the number of game steps that GameMaker is supposed to be completing in a second, while the other (the fps) is the number of CPU steps that GameMaker is actually completing in a second up to a maximum value of the room speed itself. To get the true fps, ie. the actual number of cpu steps per game step, use the fps_real variable.",
          "syntax": "fps"
        }
      ],
      "keys": []
    },
    {
      "name": "fps_real",
      "type": "key",
      "topics": [
        {
          "name": "fps_real",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/fps_real.htm",
          "blurb": "In GameMaker there are two main ways that can be used to tell the speed at which your game runs. The game speed (as specified in the Game Options) and the fps (frames per second). These values are often confused, but basically one is the number of game steps that GameMaker is supposed to be completing in a second (game speed), while the other is the number of CPU steps that GameMaker is actually completing in a second (the real fps), and this value is generally much higher than the game speed, but will drop as your game gets more complex and uses more processing power to maintain the set room speed.",
          "syntax": "fps_real"
        }
      ],
      "keys": []
    },
    {
      "name": "frac",
      "type": "key",
      "topics": [
        {
          "name": "frac",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/frac.htm",
          "blurb": "This function returns the fractional part of n, that is, the part behind the decimal dot. It will return only the decimals behind the dot of a value, so frac(3.125) will return 0.125, frac(6.921) will return 0.921, etc...",
          "syntax": "frac(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "friction",
      "type": "key",
      "topics": [
        {
          "name": "friction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/friction.htm",
          "blurb": "Friction is one of the \"built in\" properties that instances can have and can be used to slow the instance down over time when the speed is other than zero. It works simply by subtracting an amount from the speed every step until the object has a speed of 0, so if the friction is set to, for example, 0.1 and the speed of the instance is 1 (1 pixel per step), it will slow down and stop after 10 steps have passed. Note too that the friction is applied to positive and negative speeds equally with the net result always being that the object has a speed of 0 after a given time.",
          "syntax": "friction"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_create",
      "type": "key",
      "topics": [
        {
          "name": "fx_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm",
          "blurb": "This function is used to create a new FX Struct for a given effect type, which can then be applied to a layer.",
          "syntax": "fx_create(filter_or_effect_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_get_name",
      "type": "key",
      "topics": [
        {
          "name": "fx_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_name.htm",
          "blurb": "This function is used to retrieve the name of a filter/effect from its struct. You specify the FX struct to read (as returned from fx_create() or layer_get_fx()) and the function returns its name as a string. This name can then be passed into fx_create() to create a new FX struct using the same filter/effect type.",
          "syntax": "fx_get_name(filter_or_effect)"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_get_parameter",
      "type": "key",
      "topics": [
        {
          "name": "fx_get_parameter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_parameter.htm",
          "blurb": "This function is used to retrieve the value of a parameter from an FX Struct. You specify the FX struct to read (as returned from fx_create() or layer_get_fx()) and the name of the parameter as a string, and the function returns its current value. This may be a real value, or an array if the parameter is a vector (which is a group of values, such as a vec4 which stores an RGBA colour).",
          "syntax": "fx_get_parameter(filter_or_effect, parameter_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_get_parameter_names",
      "type": "key",
      "topics": [
        {
          "name": "fx_get_parameter_names",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_parameter_names.htm",
          "blurb": "This function is used to retrieve the names of all parameters present in a filter/effect. You specify the FX struct to read (as returned from fx_create() or layer_get_fx()) and the function returns an array containing the names of the filter's parameters as strings.",
          "syntax": "fx_get_parameter_names(filter_or_effect)"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_get_parameters",
      "type": "key",
      "topics": [
        {
          "name": "fx_get_parameters",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_parameters.htm",
          "blurb": "This function is used to retrieve a struct containing all the parameters for the given FX struct. You specify an FX struct (as returned from fx_create() or layer_get_fx()) and this function returns a struct containing variables for all parameters applicable to that filter/effect. Parameters that use vectors (i.e. groups of values) will be present as arrays.",
          "syntax": "fx_get_parameters(filter_or_effect)"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_get_single_layer",
      "type": "key",
      "topics": [
        {
          "name": "fx_get_single_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_single_layer.htm",
          "blurb": "This function returns whether the supplied filter/effect is using Single Layer mode (true) or not (false). See fx_set_single_layer() for information on Single Layer mode.",
          "syntax": "fx_get_single_layer(filter_or_effect)"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_set_parameter",
      "type": "key",
      "topics": [
        {
          "name": "fx_set_parameter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_set_parameter.htm",
          "blurb": "This function is used to change the value of a parameter in the given FX struct. You specify an FX struct (as returned from fx_create() or layer_get_fx()), a parameter name as a string, and its new value. This will make your changes visible in the layer that the FX struct is assigned to.",
          "syntax": "fx_set_parameter(filter_or_effect, parameter_name, val, ...)"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_set_parameters",
      "type": "key",
      "topics": [
        {
          "name": "fx_set_parameters",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_set_parameters.htm",
          "blurb": "This function is used to change the parameters of a filter/effect. You specify an FX struct (as returned from fx_create() or layer_get_fx()) and a struct containing its parameters (as returned from fx_get_parameters()). This will make your changes visible in the layer that the FX struct is assigned to.",
          "syntax": "fx_set_parameters(filter_or_effect, parameter_struct)"
        }
      ],
      "keys": []
    },
    {
      "name": "fx_set_single_layer",
      "type": "key",
      "topics": [
        {
          "name": "fx_set_single_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_set_single_layer.htm",
          "blurb": "This function is used to enable or disable \"Single Layer\" mode for a filter/effect. By default, a filter/effect is applied to the layer that it is assigned to and all layers below that layer, however you can enable Single Layer mode on an FX struct to make sure that it's only applied to the layer that it is assigned to.",
          "syntax": "fx_set_single_layer(filter_or_effect, enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options",
      "type": "key",
      "topics": [
        {
          "name": "Game Options",
          "type": "topic",
          "url": "Settings/Game_Options.htm",
          "blurb": "The Game Options are split into two sections, Main Options and the Platform Settings. The main options start with the General options, which is where you can set certain things that will affect the game regardless of the platform that it is being designed to run on."
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - Amazon Fire (Legacy)",
      "type": "key",
      "topics": [
        {
          "name": "Amazon Fire",
          "type": "topic",
          "url": "Settings/Game_Options/Amazon_Fire.htm",
          "blurb": "This section outlines the different options available to you that control how your Amazon Fire game projects will be compiled. The different sections are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - Android",
      "type": "key",
      "topics": [
        {
          "name": "Android",
          "type": "topic",
          "url": "Settings/Game_Options/Android.htm",
          "blurb": "This section outlines the different options available to you that control how your Android game projects will be compiled. The different sections are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - GX.games",
      "type": "key",
      "topics": [
        {
          "name": "GX.games",
          "type": "topic",
          "url": "Settings/Game_Options/GX_Games.htm",
          "blurb": "The GX.games Game Options allow you to modify the properties for your game. The following sections are provided:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - HTML5",
      "type": "key",
      "topics": [
        {
          "name": "HTML5",
          "type": "topic",
          "url": "Settings/Game_Options/HTML5.htm",
          "blurb": "This section outlines the different options available to you that control how your HTML5 game projects will be compiled. The different sections are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - iOS",
      "type": "key",
      "topics": [
        {
          "name": "iOS",
          "type": "topic",
          "url": "Settings/Game_Options/iOS.htm",
          "blurb": "This section outlines the different options available to you that control how your iOS game projects will be compiled. The different sections are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - macOS",
      "type": "key",
      "topics": [
        {
          "name": "macOS",
          "type": "topic",
          "url": "Settings/Game_Options/macOS.htm",
          "blurb": "This section outlines the different options available to you that control how your macOS game projects will be compiled. The different sections are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - Template Info",
      "type": "key",
      "topics": [
        {
          "name": "Template Info",
          "type": "topic",
          "url": "Settings/Game_Options/Template_Info.htm",
          "blurb": "This section allows you to set information for your project which is used when it's exported as a template."
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - tvOS",
      "type": "key",
      "topics": [
        {
          "name": "tvOS",
          "type": "topic",
          "url": "Settings/Game_Options/tvOS.htm",
          "blurb": "This section outlines the different options available to you that control how your tvOS game projects will be compiled. The different sections are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - Ubuntu (Linux)",
      "type": "key",
      "topics": [
        {
          "name": "Ubuntu",
          "type": "topic",
          "url": "Settings/Game_Options/Ubuntu.htm",
          "blurb": "This section outlines the different options available to you that control how your Ubuntu (Linux) game projects will be compiled. The different sections are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Options - Windows",
      "type": "key",
      "topics": [
        {
          "name": "Windows",
          "type": "topic",
          "url": "Settings/Game_Options/Windows.htm",
          "blurb": "This section outlines the different options available to you that control how your Windows game projects will be compiled. The different sections are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Game Settings",
      "type": "key",
      "topics": [
        {
          "name": "GameMaker Runner",
          "type": "topic",
          "url": "Settings/Game_Settings.htm",
          "blurb": "The following sections are all related to the different GameMaker windows and tools that will affect how your game is run and performs. In general, you will need to set up most of these on a per-game basis, but note that some are optional and not required (like Configurations), while the availability of others will depend on the licence that you have (like some of the Game options)."
        }
      ],
      "keys": []
    },
    {
      "name": "game_display_name",
      "type": "key",
      "topics": [
        {
          "name": "game_display_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_display_name.htm",
          "blurb": "This read only variable returns the display name of your game for the target platform, as set in the Game Options.",
          "syntax": "game_display_name"
        }
      ],
      "keys": []
    },
    {
      "name": "game_end",
      "type": "key",
      "topics": [
        {
          "name": "game_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_end.htm",
          "blurb": "With this function you can end the game (and the Game End Event will be triggered). This will not happen instantaneously, but rather at the end of the current step, so any code you have in the same step after this function has been called will still run. Please note that this function has the following restrictions:",
          "syntax": "game_end()"
        }
      ],
      "keys": []
    },
    {
      "name": "game_get_speed",
      "type": "key",
      "topics": [
        {
          "name": "game_get_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_get_speed.htm",
          "blurb": "This function can be used to get the game speed as either the number of game frames to run per second or as the number of micro seconds per game frame. Note that this is not the actual running speed FPS value (for that use the fps_real variable) but rather the number of game frames (FPS) that the game will attempt to maintain each second, or the length of each game frame in microseconds that the game will try to maintain (MPF). When you use this function you need to give one of the following constants which will determine the type of the return value:",
          "syntax": "game_get_speed(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "game_id",
      "type": "key",
      "topics": [
        {
          "name": "game_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_id.htm",
          "blurb": "This read only variable returns the unique identifier for the game you have created. You can use this if you need a unique file name, or anything else that needs something to identify your game only. This can be set in the Game Options.",
          "syntax": "game_id"
        }
      ],
      "keys": []
    },
    {
      "name": "game_load",
      "type": "key",
      "topics": [
        {
          "name": "game_load",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_load.htm",
          "blurb": "With this function you can load a game that has been previously saved using game_save(). Note that it will restore the version of the game that was used to create the save, so any updates made after it will not be visible. For more info, read the page on game_save().",
          "syntax": "game_load(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "game_load_buffer",
      "type": "key",
      "topics": [
        {
          "name": "game_load_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_load_buffer.htm",
          "blurb": "With this function you can load a game state that has been saved previously. The game is loaded from a previously created \"grow\" buffer (see Buffers) and the buffer must have had a game state saved to it using game_save_buffer() function.",
          "syntax": "game_load_buffer(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "game_project_name",
      "type": "key",
      "topics": [
        {
          "name": "game_project_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_project_name.htm",
          "blurb": "This read only variable returns the display name of your game for the target platform in a \"save-friendly\" format for the target platform. If the display name contains any characters that are not permitted for a file name, they will be replaced automatically with \"_\". The display name can be set in the Game Options. Note that since there are no restrictions on file names for HTML5, this string will probably be the same\nas that returned by game_display_name.",
          "syntax": "game_project_name"
        }
      ],
      "keys": []
    },
    {
      "name": "game_restart",
      "type": "key",
      "topics": [
        {
          "name": "game_restart",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_restart.htm",
          "blurb": "With this function you can restart the game. This is essentially the same as running the game for the first time and so the Game Start Event will be triggered, as well as the Game End Event.",
          "syntax": "game_restart()"
        }
      ],
      "keys": []
    },
    {
      "name": "game_save",
      "type": "key",
      "topics": [
        {
          "name": "game_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_save.htm",
          "blurb": "This is a legacy function that can be used to save the current state of the game, and is not recommended for use anymore. Use the File functions instead to create a custom save system where you only save and load specific game data.",
          "syntax": "game_save(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "game_save_buffer",
      "type": "key",
      "topics": [
        {
          "name": "game_save_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm",
          "blurb": "This is a variant of the game_save() function, so please read its page first as it contains important information related to its use and to this function's as well.",
          "syntax": "game_save_buffer(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "game_save_id",
      "type": "key",
      "topics": [
        {
          "name": "game_save_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_save_id.htm",
          "blurb": "This read-only variable will return the full path ID of the directory that is used by your game to save files to. This directory may or may not be visible to other applications, depending on the platform.",
          "syntax": "game_save_id"
        }
      ],
      "keys": []
    },
    {
      "name": "game_set_speed",
      "type": "key",
      "topics": [
        {
          "name": "game_set_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_set_speed.htm",
          "blurb": "This function can be used to set the game speed. You can set this in one of two ways - as either game frames per second (FPS) or as microseconds per game frame (MPF) - using one of the following two constants:",
          "syntax": "game_set_speed(speed, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "GameMaker Language",
      "type": "key",
      "topics": [
        {
          "name": "GML Code",
          "type": "topic",
          "url": "GameMaker_Language/GameMaker_Language_Index.htm",
          "blurb": "The GameMaker Language (also called simply GML) is the proprietary GameMaker scripting language. This language is structured to permit users to create their games in an intuitive and flexible way while offering all the power of any other major programming language. It is also the basis for GML Visual and can be used in conjunction with that if required."
        },
        {
          "name": "GML Visual",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Index.htm",
          "blurb": "GML Visual is the visual scripting method for programming with the GameMaker Language (GML). It consists of using action blocks to construct game logic in a visual and intuitive way, and is an ideal tool for people who are learning programming, or for people that have a more visual inclination."
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_axis_count",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_axis_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_axis_count.htm",
          "blurb": "This function will return the number of \"axis\" controls on the device being checked. These controls are the analogue direction \"thumbsticks\" on most controllers.",
          "syntax": "gamepad_axis_count(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_axis_value",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_axis_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_axis_value.htm",
          "blurb": "You can use this function to get the value of the different axes from a given gamepad slot. You supply the gamepad slot index to check, along with either an axis index constant (as listed here), or an integer value between 0 and gamepad_axis_count()-1. The returned value will be between -1 and 1 for each of the available horizontal and vertical axes.",
          "syntax": "gamepad_axis_value(device, axisIndex)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_button_check",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_button_check",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check.htm",
          "blurb": "This function will return true or false depending on whether the given gamepad button is detected as being held down or not. If you are checking an analogue button, then the check will take into consideration the threshold setting and only return true while the raw input value is over the given threshold (you can get this raw value using the function gamepad_button_value()).",
          "syntax": "gamepad_button_check(device, button)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_button_check_pressed",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_button_check_pressed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check_pressed.htm",
          "blurb": "This function will return true or false depending on whether the given gamepad button is detected as having been pressed or not. Note that this function will only trigger once for the button the first time it is pressed. For it to trigger again the button must first be released and then re-pressed. If you need to check a continuous press of the button you should be using the function gamepad_button_check().",
          "syntax": "gamepad_button_check_pressed(device, button)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_button_check_released",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_button_check_released",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check_released.htm",
          "blurb": "This function will return true or false depending on whether the given gamepad button is detected as having been released or not. Note that this function will only trigger once for the button the moment it has been released. For it to trigger again the button must first be pressed and then released once more. If you are checking an analogue button, then the check will take into consideration the threshold setting and only return true when the raw input value goes under the given threshold (you can get this raw value using the function gamepad_button_value()).",
          "syntax": "gamepad_button_check_released(device, button)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_button_count",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_button_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_count.htm",
          "blurb": "This function will return the total number of buttons available for the gamepad connected to the given device \"slot\".",
          "syntax": "gamepad_button_count(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_button_value",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_button_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_value.htm",
          "blurb": "With this function you can get the current value of an analogue button, from 0 to 1, where 0 is no pressure and 1 is full pressure. You supply the gamepad slot index to check, along with either a button constant (as listed here), or an integer value between 0 and gamepad_button_count() - 1.",
          "syntax": "gamepad_button_value(device, button)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_get_axis_deadzone",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_get_axis_deadzone",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_axis_deadzone.htm",
          "blurb": "This function can be used to get the \"dead zone\" value of the joystick axis. You specify the device slot to get, and the function will return a value between 0 to 1, where value reflects the threshold under which the joystick axis is considered to be at 0.",
          "syntax": "gamepad_get_axis_deadzone(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_get_button_threshold",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_get_button_threshold",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_button_threshold.htm",
          "blurb": "This function can be used to detect the current threshold setting of the analogue buttons for a given device. The default threshold for all analogue buttons is 0.5, with the range being from 0 to 1. The threshold defines at what point the button is considered as being \"pressed\" for games that require them to act as a digital button.",
          "syntax": "gamepad_get_button_threshold(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_get_description",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_get_description",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_description.htm",
          "blurb": "This function will return a string with the description of the given gamepad, for example, a PS3 controller may return a string similar to \"PLAYSTATION(R)3 Controller\", or an XBox360 controller could return \"Xbox 360 Controller (XInput STANDARD GAMEPAD)\". This string is hardware dependant and the returned value will depend on the gamepad plugged into the device \"slot\" that is being checked.",
          "syntax": "gamepad_get_description(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_get_device_count",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_get_device_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_device_count.htm",
          "blurb": "This function either gives you the number of game pads connected, or the number of available \"slots\" for game pads to be connected to.",
          "syntax": "gamepad_get_device_count()"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_get_guid",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_get_guid",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_guid.htm",
          "blurb": "With this function you can retrieve the GUID for the gamepad connected to the given slot index. You supply the gamepad slot to check (from 0 - 11), and the function will return one of the following strings:",
          "syntax": "gamepad_get_guid(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_get_mapping",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_get_mapping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_mapping.htm",
          "blurb": "This function can be used to retrieve the mapping string for the gamepad. This string will be either:",
          "syntax": "gamepad_get_mapping(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_get_option",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_get_option",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_option.htm",
          "blurb": "This function can be used to retrieve the given option value. You supply the gamepad \"slot\" to check, as well as the option string and the function will return the associated value. The available option string will depend on the platform that the project is being run on, as listed below:",
          "syntax": "gamepad_get_option(device, option_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_hat_count",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_hat_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_hat_count.htm",
          "blurb": "This function will return the total number of hats available for the gamepad connected to the given device \"slot\". Hats generally refer to up/down/left/right buttons, and note that on the Windows target, hats are only available on DirectInput controllers (so, from slot 4 upwards).",
          "syntax": "gamepad_hat_count(device)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_hat_value",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_hat_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_hat_value.htm",
          "blurb": "With this function you can get the current value of a gamepad \"hat\". Each hat value is a bit-mask for the different directions where:",
          "syntax": "gamepad_hat_value(device, hatindex)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_is_connected",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_is_connected",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_is_connected.htm",
          "blurb": "This function will return whether a gamepad is connected to the given \"slot\" (returns true) or not (returns false). You would normally use this function in conjunction with the gamepad_get_device_count() function to get the correct number of available game pads and/or gamepad \"slots\". Note that there may be a slight delay between the user connecting the gamepad and GameMaker detecting it as being connected (this is especially the case when dealing with bluetooth connected controllers).",
          "syntax": "gamepad_is_connected(numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_is_supported",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_is_supported",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_is_supported.htm",
          "blurb": "With this function you can find out whether the target platform supports game pads (returns true) or not (returns false).",
          "syntax": "gamepad_is_supported()"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_remove_mapping",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_remove_mapping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_remove_mapping.htm",
          "blurb": "This function can be used to remove the current device mapping from the given gamepad slot index. Once called, the slot index will need to be remapped using the gamepad_test_mapping() function if you want to be able to be able to use the gamepad constants to detect input correctly (direct input can always be retrieved using the gamepad_axis/button/hat_count() and gamepad_axis/button/hat_value() functions together).",
          "syntax": "gamepad_remove_mapping(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_set_axis_deadzone",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_set_axis_deadzone",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_axis_deadzone.htm",
          "blurb": "This function can be used to set the \"dead zone\" of the joystick axis. You specify the device slot to set, and then set a value from 0 to 1 and if the input amount is lower than the given value, the joystick axis is considered to be at 0. Note that this is a global setting that will affect all axis of all joysticks connected to the device slot specified. ",
          "syntax": "gamepad_set_axis_deadzone(device, deadzone)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_set_button_threshold",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_set_button_threshold",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_button_threshold.htm",
          "blurb": "This function can be used to set the current threshold setting of the analogue buttons for a given device. The default threshold for all analogue buttons is 0.5, with the range being from 0 to 1.",
          "syntax": "gamepad_set_button_threshold(device, threshold)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_set_colour",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_set_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_colour.htm",
          "blurb": "This function can be used to set the colour of the LEDs within a PlayStation controller. You specify the device slot to set, and then give a colour, which can be any of the colour constants or a colour value created using the specific colour functions or a HEX value(like $FFFFFFF).",
          "syntax": "gamepad_set_colour(device, colour)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_set_option",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_set_option",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_option.htm",
          "blurb": "This function can be used to set any of the available gamepad options. You supply the gamepad \"slot\" to set the option on, as well as the option string to set and the value to use. The available option string will depend on the platform that the project is being run on, as listed below:",
          "syntax": "gamepad_set_option(device, option_name, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_set_vibration",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_set_vibration",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_vibration.htm",
          "blurb": "With this function you can set the vibration of the gamepad motors, with either motor using a value from 0 (no vibration) to 1 (full vibration). Note that there is no time limit on this function, so you will need to use a variable or an alarm to switch off the vibration (set motors to 0) after a given time has passed otherwise the gamepad will continue to vibrate indefinitely.",
          "syntax": "gamepad_set_vibration(device, left_motor, right_motor)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamepad_test_mapping",
      "type": "key",
      "topics": [
        {
          "name": "gamepad_test_mapping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_test_mapping.htm",
          "blurb": "This function can be used to set the gamepad mapping on those targets that permit it. You supply the \"slot\" index for the gamepad to set, and then the map string, which should have been created using the SDL format with the following fields:",
          "syntax": "gamepad_test_mapping(index, mapping_string)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamespeed_fps",
      "type": "key",
      "topics": [
        {
          "name": "game_get_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_get_speed.htm",
          "blurb": "This function can be used to get the game speed as either the number of game frames to run per second or as the number of micro seconds per game frame. Note that this is not the actual running speed FPS value (for that use the fps_real variable) but rather the number of game frames (FPS) that the game will attempt to maintain each second, or the length of each game frame in microseconds that the game will try to maintain (MPF). When you use this function you need to give one of the following constants which will determine the type of the return value:",
          "syntax": "game_get_speed(type)"
        },
        {
          "name": "game_set_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_set_speed.htm",
          "blurb": "This function can be used to set the game speed. You can set this in one of two ways - as either game frames per second (FPS) or as microseconds per game frame (MPF) - using one of the following two constants:",
          "syntax": "game_set_speed(speed, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "gamespeed_microseconds",
      "type": "key",
      "topics": [
        {
          "name": "game_get_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_get_speed.htm",
          "blurb": "This function can be used to get the game speed as either the number of game frames to run per second or as the number of micro seconds per game frame. Note that this is not the actual running speed FPS value (for that use the fps_real variable) but rather the number of game frames (FPS) that the game will attempt to maintain each second, or the length of each game frame in microseconds that the game will try to maintain (MPF). When you use this function you need to give one of the following constants which will determine the type of the return value:",
          "syntax": "game_get_speed(type)"
        },
        {
          "name": "game_set_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/game_set_speed.htm",
          "blurb": "This function can be used to set the game speed. You can set this in one of two ways - as either game frames per second (FPS) or as microseconds per game frame (MPF) - using one of the following two constants:",
          "syntax": "game_set_speed(speed, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "gc_collect",
      "type": "key",
      "topics": [
        {
          "name": "gc_collect",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/gc_collect.htm",
          "blurb": "With this function you can trigger the garbage collector, forcing it to run at the end of the current frame (step). It is worth noting that the garbage collector does not need to be active for this to work. Calling this function after disabling the garbage collector (using the function gc_enable()) will enable the garbage collector for one frame in which all objects that have been flagged for collection will be removed from memory before the garbage collector is disabled again.",
          "syntax": "gc_collect()"
        }
      ],
      "keys": []
    },
    {
      "name": "gc_enable",
      "type": "key",
      "topics": [
        {
          "name": "gc_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/gc_enable.htm",
          "blurb": "With this function you can enable or disable the garbage collector. Calling the function with true as the argument enables it and using false disables it (not recommended). It is enabled by default.",
          "syntax": "gc_enable(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gc_get_stats",
      "type": "key",
      "topics": [
        {
          "name": "gc_get_stats",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/gc_get_stats.htm",
          "blurb": "With this function you can retrieve information about the current state of the garbage collector. The function will return a struct which will have the following member variables (note that \"objects\" here refers to anything that can be garbage collected and not general object instances as defined in the Asset Browser):",
          "syntax": "gc_get_stats()"
        }
      ],
      "keys": []
    },
    {
      "name": "gc_get_target_frame_time",
      "type": "key",
      "topics": [
        {
          "name": "gc_get_target_frame_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/gc_get_target_frame_time.htm",
          "blurb": "With this function you can retrieve the current target frame value for the garbage collector. The value returned is in microseconds (where 1,000,000 microseconds equals one second) and the default target frame time is 100 microseconds. If you wish to change this value then you should use the function gc_target_frame_time(). ",
          "syntax": "gc_get_target_frame_time(time)"
        }
      ],
      "keys": []
    },
    {
      "name": "gc_is_enabled",
      "type": "key",
      "topics": [
        {
          "name": "gc_is_enabled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/gc_is_enabled.htm",
          "blurb": "With this function you can check to see if the garbage collector is enabled or not. The function will return true if it is enabled or false otherwise.",
          "syntax": "gc_is_enabled()"
        }
      ],
      "keys": []
    },
    {
      "name": "gc_target_frame_time",
      "type": "key",
      "topics": [
        {
          "name": "gc_target_frame_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/gc_target_frame_time.htm",
          "blurb": "With this function you can indicate to the garbage collector that it shoulde aim to spend no more than the time specified running each frame. The function takes a time value specified in microseconds (where 1,000,000 microseconds equals one second) and the default target frame time is 100 microseconds.",
          "syntax": "gc_target_frame_time(time)"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_double_tap_distance",
      "type": "key",
      "topics": [
        {
          "name": "gesture_double_tap_distance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_double_tap_distance.htm",
          "blurb": "This function is used to set the distance within which you have to touch/click the screen again after a single tap in order to trigger a Double Tap Gesture. The distance is measured in inches and has a default value of 0.1.",
          "syntax": "gesture_double_tap_distance(distance)"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_double_tap_time",
      "type": "key",
      "topics": [
        {
          "name": "gesture_double_tap_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_double_tap_time.htm",
          "blurb": "This function is used to set the time it takes between two touches/clicks to trigger a Double Tap Gesture event. The time is measured in seconds and has a default value of 0.16.",
          "syntax": "gesture_double_tap_time(time)"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_drag_distance",
      "type": "key",
      "topics": [
        {
          "name": "gesture_drag_distance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_drag_distance.htm",
          "blurb": "This function is used to set the distance it takes for a Dragging Gesture event to be triggered by the movement of a touch or click. The distance is measured in inches and has a default value of 0.1.",
          "syntax": "gesture_drag_distance(distance)"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_drag_time",
      "type": "key",
      "topics": [
        {
          "name": "gesture_drag_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_drag_time.htm",
          "blurb": "This function is used to set the time it takes for a Drag Gesture event to be triggered by a touch or click. This time will also affect how the Tap Event is triggered as a touch/click and release before this time is up will be considered a Tap. The time is measured in seconds and has a default value of 0.16.",
          "syntax": "gesture_drag_time(time)"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_flick_speed",
      "type": "key",
      "topics": [
        {
          "name": "gesture_flick_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_flick_speed.htm",
          "blurb": "This function is used to set the speed required for a Flick Gesture event to be triggered when a touch or click is released. The speed is measured in inches per second and has a default value of 2.0.",
          "syntax": "gesture_flick_speed(speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_double_tap_distance",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_double_tap_distance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_double_tap_distance.htm",
          "blurb": "This function is used to get the distance within which you have to touch/click the screen again after a single tap in order to trigger a Double Tap Gesture. The distance is measured in inches and has a default value of 0.1.",
          "syntax": "gesture_get_double_tap_distance()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_double_tap_time",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_double_tap_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_double_tap_time.htm",
          "blurb": "This function is used to get the time it takes between two touches/clicks to trigger a Double Tap Gesture event. The time is measured in seconds and has a default value of 0.10.",
          "syntax": "gesture_get_double_tap_time()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_drag_distance",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_drag_distance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_drag_distance.htm",
          "blurb": "This function is used to get the distance it takes for a Dragging Gesture event to be triggered by the movement of a touch or click. The distance is measured in inches and has a default value of 0.1.",
          "syntax": "gesture_get_drag_distance()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_drag_time",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_drag_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_drag_time.htm",
          "blurb": "This function is used to get the time it takes for a Drag Start Gesture event to be triggered by a touch or click. This time will also affect how the Tap Event is triggered as a touch/click and release before this time is up will be considered a Tap. The time is measured in seconds and has a default value of 0.16.",
          "syntax": "gesture_get_drag_time()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_flick_speed",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_flick_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_flick_speed.htm",
          "blurb": "This function is used to get the speed required for a Flick Gesture event to be triggered when a touch or click is released. The speed is measured in inches per second and has a default value of 2.0.",
          "syntax": "gesture_get_flick_speed()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_pinch_angle_away",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_pinch_angle_away",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_pinch_angle_away.htm",
          "blurb": "This function is used to get the angle within which a touch must be moving away from another touch before a Pinch Out Gesture may potentially be started. The angle is measured in degrees and has a default value of 45°.",
          "syntax": "gesture_get_pinch_angle_away()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_pinch_angle_towards",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_pinch_angle_towards",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_pinch_angle_towards.htm",
          "blurb": "This function is used to get the angle within which a touch must be moving towards another touch before a Pinch In Gesture may potentially be started. The angle is measured in degrees and has a default value of 45°.",
          "syntax": "gesture_get_pinch_angle_towards()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_pinch_distance",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_pinch_distance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_pinch_distance.htm",
          "blurb": "This function is used to get the distance within which you have to touch/click the screen and move with two fingers before you trigger a Pinch Gesture. The distance is measured in inches and has a default value of 0.1.",
          "syntax": "gesture_get_pinch_distance()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_rotate_angle",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_rotate_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_rotate_angle.htm",
          "blurb": "This function is used to get the angle which a pair of touches must exceed in order to trigger a Rotate Start Gesture. The angle is measured in degrees and has a default value of 5°.",
          "syntax": "gesture_get_rotate_angle()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_rotate_time",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_rotate_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_rotate_time.htm",
          "blurb": "This function is used to get the time within which a pair of touches must be rotating in a consistent direction for a Rotate Start Gesture to be triggered. The time is measured in seconds and has a default value of 0.16s.",
          "syntax": "gesture_get_rotate_time()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_get_tap_count",
      "type": "key",
      "topics": [
        {
          "name": "gesture_get_tap_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_tap_count.htm",
          "blurb": "This function is used to check whether tap counting is enabled or disabled. The function will return true if it is enabled, and false otherwise and you can enable or disable tap counting using the function gesture_tap_count(). When enabled, each tap event will have an additional \"tapcount\" DS map entry which will have registered the number of taps, and when enabled it means that all tap events will be triggered, ie: two taps will trigger both the single tap event and the double tap event, with the single tap event tap count being 1 and the double tap event tap count being 2. The tap count value will be reset to 0 after the time set for a double-tap detection has passed (see the function gesture_double_tap_time()). If tap counting is disabled, then the initial tap won't be registered until the double-tap time has passed and no second tap has been detected. Note that this is enabled by default.",
          "syntax": "gesture_get_tap_count()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_pinch_angle_away",
      "type": "key",
      "topics": [
        {
          "name": "gesture_pinch_angle_away",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_pinch_angle_away.htm",
          "blurb": "This function is used to set the angle within which a touch must be moving away from another touch before a Pinch Out Gesture may potentially be started. The angle is measured in degrees and has a default value of 45°.",
          "syntax": "gesture_pinch_angle_away()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_pinch_angle_towards",
      "type": "key",
      "topics": [
        {
          "name": "gesture_pinch_angle_towards",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_pinch_angle_towards.htm",
          "blurb": "This function is used to set the angle within which a touch must be moving towards another touch before a Pinch In Gesture may potentially be started. The angle is measured in degrees and has a default value of 45°.",
          "syntax": "gesture_pinch_angle_towards()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_pinch_distance",
      "type": "key",
      "topics": [
        {
          "name": "gesture_pinch_distance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_pinch_distance.htm",
          "blurb": "This function is used to set the distance within which you have to touch/click the screen and move with two fingers before you trigger a Pinch Gesture. The distance is measured in inches and has a default value of 0.1.",
          "syntax": "gesture_pinch_distance()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_rotate_angle",
      "type": "key",
      "topics": [
        {
          "name": "gesture_rotate_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_rotate_angle.htm",
          "blurb": "This function is used to set the angle which a pair of touches must exceed in order to trigger a Rotate Start Gesture. The angle is measured in degrees and has a default value of 5°.",
          "syntax": "gesture_rotate_angle()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_rotate_time",
      "type": "key",
      "topics": [
        {
          "name": "gesture_rotate_time",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_rotate_time.htm",
          "blurb": "This function is used to set the time within which a pair of touches must be rotating in a consistent direction for a Rotate Start Gesture to be triggered. The time is measured in seconds and has a default value of 0.16s.",
          "syntax": "gesture_rotate_time()"
        }
      ],
      "keys": []
    },
    {
      "name": "gesture_tap_count",
      "type": "key",
      "topics": [
        {
          "name": "gesture_tap_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_tap_count.htm",
          "blurb": "This function is used to set whether tap counting is enabled or disabled. When set to true tap counting is enabled, and when set to false it is disabled, although you can check which state it is in using the function gesture_get_tap_count(). When enabled, each tap event will have an additional \"tapcount\" DS map entry which will have registered the number of taps, and when enabled it means that all tap events will be triggered, ie: two taps will trigger both the single tap event and the double tap event, with the single tap event tap count being 1 and the double tap event tap count being 2. The tap count value will be reset to 0 after the time set for a double-tap detection has passed (see the function gesture_double_tap_time()). If tap counting is disabled, then the initial tap won't be registered until the double-tap time has passed and no second tap has been detected. Note that this is enabled by default.",
          "syntax": "gesture_tap_count(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_integer",
      "type": "key",
      "topics": [
        {
          "name": "get_integer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/get_integer.htm",
          "blurb": "This creates a pop-up window showing a custom message, with a button labelled \"Ok\", and prompts the user to input an integer value. The function will return the typed in integer, or the default value if nothing has been entered.",
          "syntax": "get_integer(str, def)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_integer_async",
      "type": "key",
      "topics": [
        {
          "name": "get_integer_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/get_integer_async.htm",
          "blurb": "This function opens a window and displays message as well as a space for the user to input a value (which will contain the supplied default value to start with). This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the \"Okay\" button, an asynchronous Dialog event is triggered which, for the duration of that event only, will have a DS map stored in the variable async_load.",
          "syntax": "get_integer_async(string, default)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_login_async",
      "type": "key",
      "topics": [
        {
          "name": "get_login_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/get_login_async.htm",
          "blurb": "This function opens a window that asks the user to input a username and password. These arguments can be set as an empty string or you can store previously entered values to use if you wish. This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has input the details and pressed the \"Okay\" button, an asynchronous User Interaction event is triggered which, for the duration of that event only, will have a DS map stored in the variable async_load.",
          "syntax": "get_login_async(name, password)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_open_filename",
      "type": "key",
      "topics": [
        {
          "name": "get_open_filename",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/get_open_filename.htm",
          "blurb": "This function opens a dialogue and asks the player for a filename to open with the given filter. The filter has the form \"name1|mask1|name2|mask2|...\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"bitmaps|*.bmp;*.wmf\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does not open the file itself! It only returns a string with the full name and path of the file. If the user presses \"Cancel\" an empty string \"\" is returned.",
          "syntax": "get_open_filename(filter, fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_open_filename_ext",
      "type": "key",
      "topics": [
        {
          "name": "get_open_filename_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/get_open_filename_ext.htm",
          "blurb": "This function opens a dialogue and asks the player for a filename to open with the given filter. The filter has the form \"name1|mask1|name2|mask2|...\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"bitmaps|*.bmp;*.wmf\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does not open the file itself! It only returns a string with the full name and path of the file. If the user presses \"Cancel\" an empty string \"\" is returned. You may also add in a directory to start the search from, and a caption to be shown at the top of the window instead of the default one.",
          "syntax": "get_open_filename_ext(filter, fname, directory, caption)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_save_filename",
      "type": "key",
      "topics": [
        {
          "name": "get_save_filename",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/get_save_filename.htm",
          "blurb": "This function opens a dialogue and asks the player for a filename to save to with the given filter. The filter has the form \"name1|mask1|name2|mask2|...\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"bitmaps|*.bmp;*.wmf\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does not save the file itself! It only returns a string with the full name and path of the file. If the user presses \"Cancel\" an empty string \"\" is returned.",
          "syntax": "get_save_filename(filter, fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_save_filename_ext",
      "type": "key",
      "topics": [
        {
          "name": "get_save_filename_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_System/get_save_filename_ext.htm",
          "blurb": "This function opens a dialogue and asks the player for a filename to save to with the given filter. The filter has the form \"name1|mask1|name2|mask2|...\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"bitmaps|*.bmp;*.wmf\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does not save the file itself! It only returns a string with the full name and path of the file. If the user presses \"Cancel\" an empty string \"\" is returned. You may also add in a directory to start the search from, and a caption to be shown at the top of the window instead of the default one.",
          "syntax": "get_save_filename_ext(filter, fname, directory, caption)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_string",
      "type": "key",
      "topics": [
        {
          "name": "get_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/get_string.htm",
          "blurb": "This creates a pop-up window showing a standard message, with a button labelled \"Ok\", that prompts the user to input a string. The function will return the input string, or the default value if nothing has been entered.",
          "syntax": "get_string(str, def)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_string_async",
      "type": "key",
      "topics": [
        {
          "name": "get_string_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/get_string_async.htm",
          "blurb": "This function opens a window and displays message as well as a space for the user to input a string (which will contain the supplied default string to start with). This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the \"Okay\" button, an asynchronous Dialog event is triggered which, for the duration of that event only, will have a DS map stored in the variable async_load.",
          "syntax": "get_string_async(string, default)"
        }
      ],
      "keys": []
    },
    {
      "name": "get_timer",
      "type": "key",
      "topics": [
        {
          "name": "get_timer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/get_timer.htm",
          "blurb": "This function returns the time that your game has been running on the chosen platform in microseconds (there are 1 million microseconds per second).",
          "syntax": "get_timer()"
        }
      ],
      "keys": []
    },
    {
      "name": "gif_add_surface",
      "type": "key",
      "topics": [
        {
          "name": "gif_add_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/gif_add_surface.htm",
          "blurb": "With this function you can save a frame to a GIF file from a surface. You supply the GIF file ID (as returned by the function gif_open()) and a surface ID (as returned by the function surface_create()), as well as a delay time between frames. The delay time is calculated in 1/100ths of a second, but note that once the GIF has been created, if you use it for promotional purposes for example, different browsers may interpret the frame delay slightly differently - see here for more details. You may (optionally) supply X and Y offset values for the surface being used to add to the GIF, in which case the part drawn to the GIF will begin from the offset and not the default (0,0) position, permitting you to select only a section of the surface to add. You can also supply a quantization value, which is an integer between 0 and 3, where 0 is full quantization and 3 is zero quantization (lower values will have a subsequent degradation in quality, but create a smaller GIF). Note that there isn't much difference between the default quality of 2, and the highest of 3, and using 3 will significantly slow down the creation of the GIF so care should be taken when using the maximum value.",
          "syntax": "gif_add_surface(gif_index, surface, delay_time, [xoffset], [yoffset])"
        }
      ],
      "keys": []
    },
    {
      "name": "gif_open",
      "type": "key",
      "topics": [
        {
          "name": "gif_open",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/gif_open.htm",
          "blurb": "With this function you can create an empty GIF format image, ready to have data added to it. When you call the function, you need to specify the width and height of the GIF (in pixels, and there is no upper limit on size except for available memory), and the function will return the unique ID value used to identify the gift in subsequent functions, or it will return -1 if the gif could not be initialized (for example, if the width/height are too big for the memory available). You may also specify an optional argument to set the \"clear colour\" for the GIF. This is an RGB value (no alpha component), and will clear the gif to this colour before anything is added to it. If you do not supply a clear colour argument, the default colour of black will be used.",
          "syntax": "gif_open(width, height, [clear_colour])"
        }
      ],
      "keys": []
    },
    {
      "name": "gif_save",
      "type": "key",
      "topics": [
        {
          "name": "gif_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/gif_save.htm",
          "blurb": "With this function you can save out a GIF animation. You supply the GIF index (as returned by the function gif_open()) as well as a filename to save it with. Note that GameMaker does not automatically append the .gif file extension, so you should include this as part of the filename string if you wish the saved file to be identified as a GIF. The created GIF will be palletized using the Universal 884 Palette (see here for more information).",
          "syntax": "gif_save(gif_index, fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "gif_save_buffer",
      "type": "key",
      "topics": [
        {
          "name": "gif_save_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/gif_save_buffer.htm",
          "blurb": "With this function you can save out a GIF animation. You supply the GIF index (as returned by the function gif_open()) and the function will return a 1 byte-aligned grow buffer with the GIF data. Note that the final GIF data will have been palletized using the Universal 884 Palette (see here for more information).",
          "syntax": "gif_save_buffer(gif_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "global",
      "type": "key",
      "topics": [
        {
          "name": "Global Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Global_Variables.htm",
          "blurb": "A basic description of a global variable is one that, once declared, it belongs to no instance in particular and yet can be accessed by all. Just like local variables, global variables must be declared using an identifier, but unlike a local variable, a global variable remains in memory until the end of the game. So, you can create a global variable to keep track of (for example) the number of bullets that the player has and then just update this variable at different points in the game, form any instance or function and at any time. Essentially, a global variable does not belong to any specific instance and can be accessed, changed and used by all instances, and any changes made to the variable are \"global\", in that all instances using the variable will be affected by the change. Let's have a look at an example:"
        }
      ],
      "keys": []
    },
    {
      "name": "Global Variables",
      "type": "key",
      "topics": [
        {
          "name": "Global Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Global_Variables.htm",
          "blurb": "A basic description of a global variable is one that, once declared, it belongs to no instance in particular and yet can be accessed by all. Just like local variables, global variables must be declared using an identifier, but unlike a local variable, a global variable remains in memory until the end of the game. So, you can create a global variable to keep track of (for example) the number of bullets that the player has and then just update this variable at different points in the game, form any instance or function and at any time. Essentially, a global variable does not belong to any specific instance and can be accessed, changed and used by all instances, and any changes made to the variable are \"global\", in that all instances using the variable will be affected by the change. Let's have a look at an example:"
        }
      ],
      "keys": []
    },
    {
      "name": "globalvar",
      "type": "key",
      "topics": [
        {
          "name": "Global Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Global_Variables.htm",
          "blurb": "A basic description of a global variable is one that, once declared, it belongs to no instance in particular and yet can be accessed by all. Just like local variables, global variables must be declared using an identifier, but unlike a local variable, a global variable remains in memory until the end of the game. So, you can create a global variable to keep track of (for example) the number of bullets that the player has and then just update this variable at different points in the game, form any instance or function and at any time. Essentially, a global variable does not belong to any specific instance and can be accessed, changed and used by all instances, and any changes made to the variable are \"global\", in that all instances using the variable will be affected by the change. Let's have a look at an example:"
        }
      ],
      "keys": []
    },
    {
      "name": "GM Version Information",
      "type": "key",
      "topics": [
        {
          "name": "GameMaker Version Information",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/GMS2_Version_Information.htm",
          "blurb": "There are various different versions of the licences that you can get for GameMaker, the choice of which will depend largely on the audience that you want to target as well as on whether you just want to have some fun making games or wish to sell and distribute them as well."
        }
      ],
      "keys": []
    },
    {
      "name": "gm_AlphaRefValue",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "gm_AlphaTestEnabled",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "gm_BaseTexture",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "GM_build_date",
      "type": "key",
      "topics": [
        {
          "name": "GM_build_date",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/GM_build_date.htm",
          "blurb": "This constant holds the date and time on which the executable being run was built by GameMaker. The value can be parsed using the Date and Time functions and is taken from the system UTC value at compile time.",
          "syntax": "GM_build_date"
        }
      ],
      "keys": []
    },
    {
      "name": "gm_build_type",
      "type": "key",
      "topics": [
        {
          "name": "GM_build_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/GM_build_type.htm",
          "blurb": "This string constant holds the type of the build: \"exe\" for a created executable or \"run\" for a test run started from the IDE.",
          "syntax": "GM_build_type"
        }
      ],
      "keys": []
    },
    {
      "name": "gm_FogColour",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "gm_FogStart",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "gm_LightingEnabled",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "gm_Matrices",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "GM_project_filename",
      "type": "key",
      "topics": [
        {
          "name": "GM_project_filename",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/GM_project_filename.htm",
          "blurb": "This constant holds the full path and filename of the YYP project file.",
          "syntax": "GM_project_filename"
        }
      ],
      "keys": []
    },
    {
      "name": "gm_PS_FogEnabled",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "gm_RcpFogRange",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "GM_runtime_version",
      "type": "key",
      "topics": [
        {
          "name": "GM_runtime_version",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/GM_runtime_version.htm",
          "blurb": "This constant hold the runtime version number as defined in the Preferences as the runtime being used to build the project. The value is stored as a string.",
          "syntax": "GM_runtime_version"
        }
      ],
      "keys": []
    },
    {
      "name": "GM_version",
      "type": "key",
      "topics": [
        {
          "name": "GM_version",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/GM_version.htm",
          "blurb": "This constant hold the version number as defined in the Game Options for each target platform. The value is stored as a string.",
          "syntax": "GM_version"
        }
      ],
      "keys": []
    },
    {
      "name": "gm_VS_FogEnabled",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "GML",
      "type": "key",
      "topics": [
        {
          "name": "GML Code Reference",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/GML_Reference.htm",
          "blurb": "This section of the manual is a reference guide for the GameMaker Language (GML). You can find all the available functions documented here along with the required arguments and examples of code to show how they can be used. For information on how to use GML please see the  GML Overview section of the manual."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Code",
      "type": "key",
      "topics": [
        {
          "name": "GML Code",
          "type": "topic",
          "url": "GameMaker_Language/GameMaker_Language_Index.htm",
          "blurb": "The GameMaker Language (also called simply GML) is the proprietary GameMaker scripting language. This language is structured to permit users to create their games in an intuitive and flexible way while offering all the power of any other major programming language. It is also the basis for GML Visual and can be used in conjunction with that if required."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Overview",
      "type": "key",
      "topics": [
        {
          "name": "GML Code Overview",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/GML_Overview.htm",
          "blurb": "This section of the manual contains all the information required to understand and use GML Code. The runtime functions in this language can be used to create your games and is added into objects from the  Object Editor, although it can also be used along with GML Visual. Below you can see a typical image of an object with the code editor open on an event:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual",
      "type": "key",
      "topics": [
        {
          "name": "GML Visual",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Index.htm",
          "blurb": "GML Visual is the visual scripting method for programming with the GameMaker Language (GML). It consists of using action blocks to construct game logic in a visual and intuitive way, and is an ideal tool for people who are learning programming, or for people that have a more visual inclination."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Add To List",
      "type": "key",
      "topics": [
        {
          "name": "Add To List",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Add_To_List.htm",
          "blurb": "This action can be used to add a new value (of any data type) to the list, and this value will be added on at the end. You supply the variable that stores the list index (as returned by the action Create List) and the value to store."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Apply To...",
      "type": "key",
      "topics": [
        {
          "name": "Apply To...",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Apply_To...htm",
          "blurb": "This action can be used to change the Action Scope for all further actions to chained to this one. Like with an if action, if you drop further actions to the right of the Apply to... action then they will be run from the scoped object or instance. The scope is chosen from the pop up menu shown when you click the small arrow at the top right of the action, and in this way you can tell\na different set of objects - or even a single instance if you have the instance ID - to run multiple actions before continuing with the code of the current object."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Assign Variable",
      "type": "key",
      "topics": [
        {
          "name": "Assign Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Assign_Variable.htm",
          "blurb": "This action is used to either assign a variable a value (creating it in the process) or for changing the value of an existing variable."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - BPM to Seconds",
      "type": "key",
      "topics": [
        {
          "name": "BPM to Seconds",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/BPM_to_Seconds.htm",
          "blurb": "This action takes a beats-per-minute value, and returns the length of each beat in seconds."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Break",
      "type": "key",
      "topics": [
        {
          "name": "Break",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Loops/Break.htm",
          "blurb": "This action can only be used within a loop action (for example, Repeat or While), and calling it will break out of the loop in that moment. Normally a loop will run either a fixed number of times or until a specific condition is met, but you can use the Break action to prematurely end a loop at any moment (actions within the loop after the Break will not be run)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Burst Particles",
      "type": "key",
      "topics": [
        {
          "name": "Burst Particles",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Burst_Particles.htm",
          "blurb": "This action permits you to burst particles at any time without relying on an emitter. You supply the unique ID value for the system to create the particles within (as returned when you created the system with the action Create Particle System) and the unique ID of the particle type to create (as returned when you created the particle type with the action Create Particle Type), as well as the x/y position to create them at and the number to create.\nThe position can be an absolute position within the room, or you can flag it as being a relative position to the instance that is calling the action."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Call Parent Event",
      "type": "key",
      "topics": [
        {
          "name": "Call Parent Event",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm",
          "blurb": "This action block will perform the event of the parent object that the instance is a child of before continuing to run the actions in the actual instance. When you assign a parent object to an instance, all the events from that object are \"inherited\" by the child. However if you then add an event to the child object, it overrides the parent event. Using this action block, you can force a child object to run both the parent event and the event in the instance itself. See the Object Editor section for more information on parents."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Call User Event",
      "type": "key",
      "topics": [
        {
          "name": "Call User Event",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_User_Event.htm",
          "blurb": "With this action you can call any of the 12 available Other - User Events. A User Event is one that you can add scripts or action code to and then call at any time using this action, making them essentially custom object events."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Case",
      "type": "key",
      "topics": [
        {
          "name": "Case",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Switch/Case.htm",
          "blurb": "This action will create a new Case within a Switch. You give the value for the case and it will be compared with the input value for the Switch, and if they match the actions added under the Case will be performed. Actions that are added to a Case to be performed only in that Case should be dropped to the side of the action, much as you would add an action to an \"if\":"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Choose",
      "type": "key",
      "topics": [
        {
          "name": "Choose",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Random/Choose.htm",
          "blurb": "With this action you can give a number of different options (this can be a real number, a string, resource ID or a constant) from which the action will choose one to return. You can add additional options by clicking the plus icon  beside the action, and giving another value that could be returned. The returned value will then be stored in the target variable which can have been created previously or can be a new temporary local one (if you check the \"Temp\" check-box)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Clear Data Structure",
      "type": "key",
      "topics": [
        {
          "name": "Clear Data Structure",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Clear_Data_Structure.htm",
          "blurb": "This action will clear all values from the given data structure. You must first select the type of data structure to clear and then give the index of the data structure (the index is the value that is returned and stored in a variable when you created the data structure originally). A cleared data structure is considered \"empty\" (ie: it has no entries), except grids. With grids this action will simply clear all the grid cells to 0."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Clear Grid",
      "type": "key",
      "topics": [
        {
          "name": "Clear Grid",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Clear_Grid.htm",
          "blurb": "With this action you can clear a grid data structure to a single value (each cell within the grid will be set to the value given). You supply the variable that holds the grid index (as returned by the action Create Grid) and then give the value to clear the grid to."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Clear Particle System",
      "type": "key",
      "topics": [
        {
          "name": "Clear Particle System",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Clear_Particle_System.htm",
          "blurb": "With this action you can clear the given particle system to its default state, removing all emitters (there is also no need to call the Destroy Particle Emitter action as this is taken care of automatically) and clearing all particles from the screen. You supply the unique ID value for the system to clear, as returned when you created the system with the action Create Particle System. Care must be taken when using\nthis action since it destroys all the emitters associated with the particle system - this means that any instance in the room that uses an emitter may give an error as that emitter no longer exists, so make sure that the action is only called when\nyou are not going to be creating any new particles from that emitter (for more information on particle emitters see Create Particle Emitter)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Close Ini File",
      "type": "key",
      "topics": [
        {
          "name": "Close Ini File",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Close_Ini_File.htm",
          "blurb": "This action will close the currently open Ini file. This action should be called the moment you are finished reading or writing to any open Ini file (Ini files are opened using the action Open Ini File). If you do not use this action after you have used the Write To Ini File action, then nothing will be written to disk as the file information is held in memory until this action is called, at which point it is taken from memory and written to the file on disk. Also note that if you try to open an Ini file without having previously closed another one (or the same one) you will get an error."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Copy Buffer",
      "type": "key",
      "topics": [
        {
          "name": "Copy Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Copy_Buffer.htm",
          "blurb": "This action can be used to copy all of the data stored in one buffer to another. When using two buffers and copying from one to the other, both buffers must have previously been created using the Create Buffer action, and you supply the unique buffer ID returned as the from/to arguments."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Copy File",
      "type": "key",
      "topics": [
        {
          "name": "Copy File",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Copy_File.htm",
          "blurb": "With this action you can copy any file that has been saved by your game or has been bundled as part of the Included Files. You give the name of the file to copy (as a string) and then the name of the file to create as a copy of the original file (also as a string and including the file extension). The given file will be duplicated and given the new name."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Buffer",
      "type": "key",
      "topics": [
        {
          "name": "Create Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Create_Buffer.htm",
          "blurb": "This action can be used to allocate a portion of memory as a buffer in your game, with the function returning the unique buffer id value that should be stored in a variable and used for all further function calls to the buffer. You can supply a global variable, an instance variable or have the action create a temporary local variable for storing the buffer ID. Note that you can create additional buffers by clicking the plus icon  beside\nthe action, and selecting another variable to hold the buffer ID."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Grid",
      "type": "key",
      "topics": [
        {
          "name": "Create Grid",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Create_Grid.htm",
          "blurb": "This action will create a new grid data-structure and return the index value so you can later access the grid through the other Data Structure actions. The grid index will be returned to the Target Variable that you supply, which can have been created earlier using either Assign Variable or Declare Temp, or you can flag the \"Temp\" checkbox to name and create a temporary local variable\nto store the value until the end of the script or event. Note that unlike other data structures, grids are not created \"empty\", and each cell of a newly created grid will have the value 0. It's up to you to change the cell data\nor clear the grid yourself to another value using the action Clear Grid. Note that you can create additional DS grids by clicking the plus icon \nbeside the action, and selecting another variable to hold the grid ID and and giving the width and height values again."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create List",
      "type": "key",
      "topics": [
        {
          "name": "Create List",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Create_List.htm",
          "blurb": "This action will create a new list data-structure and return the index value so you can later access the list through the other Data Structure actions. The list index will be returned to the Target Variable that you supply, which can have been created earlier using either Assign Variable or Declare Temp, or you can flag the \"Temp\" checkbox to name and create a temporary local variable\nto store the value until the end of the script or event. A newly created list data structure is considered \"empty\", ie: it contains no list entries. Note that you can create additional DS lists by clicking the plus icon \nbeside the action, and selecting another variable to hold the list ID."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Map",
      "type": "key",
      "topics": [
        {
          "name": "Create Map",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Create_Map.htm",
          "blurb": "This action will create a new map data-structure and return the index value so you can later access the map through the other Data Structure actions. The map index will be returned to the Target Variable that you supply, which can have been created earlier using either Assign Variable or Declare Temp, or you can flag the \"Temp\" checkbox to name and create a temporary local variable to\nstore the value until the end of the script or event. A newly created map data structure is considered \"empty\", ie: it contains no map key/value entries. Note that you can create additional DS maps by clicking the plus icon  beside\nthe action, and selecting another variable to hold the map ID."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Object Instance",
      "type": "key",
      "topics": [
        {
          "name": "Create Object Instance",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Create_Object_Instance.htm",
          "blurb": "With this action you can create an instance of any object from the Asset Browser. You give the name of the object and an x/y position within the room where it is to be created as well as the name of the layer to create the instance on (it must be an Instance Layer). You can tick the \"relative\" flags to position the instance relative to the instance running the action code blocks. Whenever you create an instance in the game, it is given a unique ID value with which you can then\nidentify the instance in further actions, therefore this action permits you to define a \"target\" variable to hold this ID value (as shown in the example below). Note that the target can be flagged as a temporary (local) variable, which will\nbe created for the action and can be used in all subsequent actions."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Particle Emitter",
      "type": "key",
      "topics": [
        {
          "name": "Create Particle Emitter",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Create_Particle_Emitter.htm",
          "blurb": "To be able to see your particles you need to have first created a Particle System, then have defined some particle types and then finally created a particle emitter using this action. To create the emitter, you call this action and assign the emitter to a particle system that you have previously created (see Particle System) and then give a target variable to store it's unique ID value for use in further actions. You can choose to flag this variable as being a temporary local variable, but that will mean that it is discarded at the end of the action script or event, meaning that the emitter will still exist but leave\nyou without any means to access it, so care must be taken when using this (in general emitters will never need to be stored in a temporary local variable, but for certain things, like drawing particles to a surface, it may be required)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Particle System",
      "type": "key",
      "topics": [
        {
          "name": "Create Particle System",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Create_Particle_System.htm",
          "blurb": "This action will initialise the particle system ready for you to create and use particle types and emitters with it. You give the layer name as a string - for example \"Particle Layer\" (which must exist in the room editor) - and then flag the system as being Persistent or not. If the system is flagged as Persistent then it will stay active across all rooms after it has been created, and it will be assigned a managed layer if the initial layer does not exist in subsequent rooms.\nIf persistence is not flagged, then the system will be automatically destroyed at the end of the room it was created in as will any emitters associated with the system. If you wish to manually remove the system from memory, you need to use\nthe action Destroy Particle System."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Particle Type",
      "type": "key",
      "topics": [
        {
          "name": "Create Particle Type",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Create_Particle_Type.htm",
          "blurb": "In your projects you can have multiple different particle types, each with their own properties like direction and colour, etc... which are set using the different particle type actions. However you first need to create a particle type using this action, which essentially allocates a small amount of memory to hold all the particle details so that you can use the particles at any time in the future. You give a variable to hold the unique ID value for the particle type, and then in all future actions relating to this particle you can call the variable. You can choose to flag this variable as being a temporary local variable, but that will mean that it is discarded at the end of the action script or event, meaning that the particle\ntype will still exist but leave you without any means to access it, so care must be taken when using this (in general particle types will never need to be stored in a temporary local variable, but for certain things, like drawing particles to a surface,\nit may be required)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Sequence Element",
      "type": "key",
      "topics": [
        {
          "name": "Create Sequence",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Create_Sequence_Element.htm",
          "blurb": "With this action you can create a sequence element of any sequence from the Asset Browser. You give the name of the sequence and an x/y position within the room where it is to be created as well as the layer that it is to be created on (this layer must be an asset layer). You can tick the \"relative\" flags to position the sequence relative to the instance running the action code blocks. Whenever you create a sequence in the game in this way, it is given a unique element ID value with which you can then identify the sequence in further actions, therefore this action permits you to define a \"target\" variable to hold this ID value (as shown in the example below). Note that the target can be flagged as a temporary (local) variable, which will be created for the action and can be used in all subsequent actions for the event the action is in."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Stack",
      "type": "key",
      "topics": [
        {
          "name": "Create Stack",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Create_Stack.htm",
          "blurb": "This action will create a new stack data-structure and return the index value so you can later access the stack through the other Data Structure actions. The stack index will be returned to the Target Variable that you supply, which can have been created earlier using either Assign Variable or Declare Temp, or you can flag the \"Temp\" checkbox to name and create a temporary local\nvariable to store the value until the end of the script or event. A newly created stack data structure is considered \"empty\", ie: it contains no entries. Note that you can create additional DS stacks by clicking the plus icon  beside\nthe action, and selecting another variable to hold the stack ID."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Create Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Create Time Source",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Create_Time_Source.htm",
          "blurb": "This action creates a new Time Source, and stores it in the Target variable. Read Time Sources for an overview."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Decimal To Integer",
      "type": "key",
      "topics": [
        {
          "name": "Decimal To Integer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Decimal_To_Integer.htm",
          "blurb": "This action will take a decimal number and convert it into an integer. You give the value to convert and then select the type of rounding that should be done to turn it into an integer value. The types of rounding available are:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Declare A New Function",
      "type": "key",
      "topics": [
        {
          "name": "Declare A New Function",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm",
          "blurb": "This action can be used to create a new user-defined function, which can later be called at any time in your code. A user-defined function is one that you define to do a task that isn't covered by the built-in GML Visual actions or GML runner functions, and can be global, instance or local in scope (see here for more information on scope); they can also be used as constructors to create structs. To find out more about using this action to create global functions, please see the section on Creating Action Functions."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Declare Temporary Variable",
      "type": "key",
      "topics": [
        {
          "name": "Declare Temporary Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_Temporary_Variable.htm",
          "blurb": "This action is used to declare and give an initial value to a temporary variable (also called a local variable), which is a variable that only exists for the duration of the event or script that it was declared in. Temporary variables are very useful for storing values that are only needed for a single operation and prevent your objects becoming \"cluttered\" with variables that may only be used once. They are also very useful for breaking down complex operations, or for\nsetting values in other instances when you change the action scope. This is because variables declared as temporary arenotscoped to any particular instance, but instead scoped to the event or script itself, so if you create a temporary variable\nand then change the action scope using the Apply To... action, you can still check the temporary variable without issues and without changing its action scope."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Default",
      "type": "key",
      "topics": [
        {
          "name": "Default",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Switch/Default.htm",
          "blurb": "This action will create a new Default case within a Switch. The Default case is one that will be performed if the input value does not match any other case constants. Actions that are added to a Default case should be dropped to the side of the action, much as you would add an action to an \"if\":"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Delete Buffer",
      "type": "key",
      "topics": [
        {
          "name": "Delete Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Delete_Buffer.htm",
          "blurb": "This action can be used to delete a buffer from memory, releasing the resources used to create it and removing any data that it may currently contain. You supply the unique buffer ID value as returned by the action Create Buffer. Note that you can select multiple buffers for removal by clicking the plus icon  beside the action, and adding\nanother buffer ID."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Delete File",
      "type": "key",
      "topics": [
        {
          "name": "Delete File",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Delete_File.htm",
          "blurb": "With this action you can delete a file that has been created previously. You supply the file name (as a string) of the file to be deleted. Note that you cannot delete any files that are included in the game bundle, only those that have been created using the Close Ini or Save Buffer actions (see the section on The File System for more information)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Destroy At Position",
      "type": "key",
      "topics": [
        {
          "name": "Destroy At Position",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_At_Position.htm",
          "blurb": "This action block will destroy all instances found at the point given, calling the Destroy Event and then the Clean Up Event for all instances found. Note that this action is based on the collision mask of the instances, and if any part of the mask over-laps with the target point it then the function will destroy that instance (if the instances have no sprite or mask applied, then they will not be destroyed)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Destroy Object Instance",
      "type": "key",
      "topics": [
        {
          "name": "Destroy Object Instance",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm",
          "blurb": "You can call this action whenever you wish to \"destroy\" an instance, which will remove it from the room. You should note that when you destroy an instance, its Destroy Event is called immediately after the action that calls the destroy. Also note that although the Destroy Event is performed the instant that the action is called, the instance is not immediately removed from the game, and it will continue to perform the code contained in the current event until the end, and only when the current event is over will the instance be removed from the game, at which time the Clean Up Event will be called."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Destroy Particle Emitter",
      "type": "key",
      "topics": [
        {
          "name": "Destroy Particle Emitter",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Destroy_Particle_Emitter.htm",
          "blurb": "This action will \"destroy\" the given particle emitter, ie: free up the memory used by the particle emitter. You supply the particle system ID that the emitter belongs to (as returned by the action Create Particle System) and then the actual emitter ID (as returned by the action Create Particle Emitter). This action should be called whenever you no longer need a particle emitter in your game, or whenever you wish to re-create\nthe particle emitter (for example, just before calling a Game Restart). Note that if the particle system the emitter has been assigned to has not been flagged as Persistent then you do not need to call this action,\nas the emitter will be automatically cleaned up on room end along with the particle system."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Destroy Particle System",
      "type": "key",
      "topics": [
        {
          "name": "Destroy Particle System",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Destroy_Particle_System.htm",
          "blurb": "This action will \"destroy\" the given particle system (ie: free up the memory used by the particle system). You supply the unique ID value for the system to destroy, as returned when you created the system with the action Create Particle System. This action should be called whenever you no longer need a particle system in your game, or whenever you wish to re-create the particle system (for example, just before calling a Restart Game). Note that if the\nparticle system has not been flagged as Persistent then you do not need to call this action, as the particle system (and any emitters associated with it) will be automatically cleaned up on room end."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Destroy Particle Type",
      "type": "key",
      "topics": [
        {
          "name": "Destroy Particle Type",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Destroy_Particle_Type.htm",
          "blurb": "This action will \"destroy\" the given particle type created by the action Create Particle Type (ie: free up the memory used by the particle type). This action should be called whenever you no longer need a particle type in your game, or whenever you wish to re-create the particle type (for example, just before calling a Game Restart)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Destroy Sequence Element",
      "type": "key",
      "topics": [
        {
          "name": "Destroy Sequence",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Destroy_Sequence_Element.htm",
          "blurb": "You can call this action whenever you wish to \"destroy\" a previously created sequence element. You give the element ID, as returned by the action Create Sequence Element, and this action will destroy it, removing it from the room."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Destroy Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Destroy Time Source",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Destroy_Time_Source.htm",
          "blurb": "This action destroys the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Do Effect",
      "type": "key",
      "topics": [
        {
          "name": "Do Effect",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Do_Effect.htm",
          "blurb": "This action will create a built-in particle effect, either above or below the layers being drawn in your game room. You choose the type of effect to create from the drop down list (shown in the image below), and then set the position (which can be relative to the position of the instance) and select a size - small, medium, or large - for the effect. You can also set the colour to be used - the alpha value will be ignored - and decide whether you want the effect to be created beneath all the layers in\nthe room, or above all the layers in the room. Note that if you choose to use the rain or snow effects, then the position and size values will not be taken into account as the effect is designed to be visible across the full screen."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Ellipse",
      "type": "key",
      "topics": [
        {
          "name": "Draw Ellipse",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Ellipse.htm",
          "blurb": "This action will draw an ellipse at a given position within the room. You give the top left position and the bottom right position of the area that the ellipse is to \"fit\" into, and the ellipse will be drawn between them. The positions can either be an absolute position within the room, or a position relative to the instance calling the action, and you can also set whether the ellipse can be filled or outlined by checking the fill box at the bottom."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Gradient Ellipse",
      "type": "key",
      "topics": [
        {
          "name": "Draw Gradient Ellipse",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Gradient_Ellipse.htm",
          "blurb": "This action will draw an ellipse at a given position within the room, using a set of blend colours to create a gradient. You give the top left position and the bottom right position of the area that the ellipse is to \"fit\" into, and the ellipse will be drawn between them. The position can either be an absolute position within the room, or a position relative to the instance calling the action and you can set the colours to blend from the edge of the ellipse and from its center. The ellipse\ncan be drawn filled or outlined by checking the fill box at the bottom."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Gradient Rectangle",
      "type": "key",
      "topics": [
        {
          "name": "Draw Gradient Rectangle",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Gradient_Rectangle.htm",
          "blurb": "This action will draw a rectangle at a given position within the room, using a set of blend colours to create a gradient. You give the top left position and the bottom right position and the rectangle will be drawn between them, and the position can either be an absolute position within the room, or a position relative to the instance calling the action. You then set the colours to blend from each of the corners and can also set whether the rectangle can be filled or outlined by checking the\nfill box at the bottom."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Healthbar",
      "type": "key",
      "topics": [
        {
          "name": "Draw Healthbar",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Healthbar.htm",
          "blurb": "With this action you can draw a coloured bar to show a graphic representation of a value. The amount to be displayed is a percentage value and must fall within the range of 0 - 100, however you can still uses larger values with the formula (CURRENT_Value / MAXIMUM_value) * 100, so, for example, you can use this to display power, health, mana, time or anything else that would benefit from a bar display. Apart from the value to draw you can set the direction anchor for drawing the healthbar too (from left-to-right or right-to-left\nand top-to-bottom or bottom-to-top) as well as the position, either within the room or relative to the instance calling the action. Apart from the position you can also set the colour to be blended from each of the four corners of the healthbar, creating\ngradients from red to green (for example, but you can use any colours). Below you can see an image of how a simple healthbar looks with the different options:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Instance Health",
      "type": "key",
      "topics": [
        {
          "name": "Draw Instance Health",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Instance_Health.htm",
          "blurb": "With this action you can draw a coloured bar to show a graphic representation of the instance variable health (when you use any \"health\" action in GameMaker the instance that calls it will have a new instance scope variable called health added). The amount to be displayed is a percentage value that falls within the range of 0 - 100. You can set the direction anchor for drawing the healthbar (from left-to-right or right-to-left and top-to-bottom or bottom-to-top)\nas well as the position, either within the room or relative to the instance calling the action. You can also set the colour to be blended from each of the four corners of the healthbar, creating gradients from red to green (for example, but you can\nuse any colours). Below you can see an image of how a simple healthbar looks with the different options:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Instance Lives",
      "type": "key",
      "topics": [
        {
          "name": "Draw Instance Lives",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Instance_Lives.htm",
          "blurb": "This action will draw a sprite to represent each of the lives the instance currently have. The number to draw is taken from the current value of the local instance variable lives, which is a special variable that is created automatically within the instance if you use any of the actions that require it. You give the sprite to draw for the lives and the stack order, which can be either Row (horizontally, left to right), or column (vertically, top to bottom), as well as the position.\nThe position can be an absolute position within the room, or one relative to the position of the instance doing the drawing, and the spacing between images will be based on the width or height of the sprite. Note that this simply draws a static image\n- the initial single image (frame 0) of the given sprite - and any further frames will be ignored, as will any transforms that have been added to the instance through changing the instance variables (like image_xscale or image_blend).\nCaption text will be drawn preceding the lives value and if it is text it should be wrapped with \"\", and both will be formatted using the current draw font , colour and alignment."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Instance Score",
      "type": "key",
      "topics": [
        {
          "name": "Draw Instance Score",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Instance_Score.htm",
          "blurb": "With this action you can draw the score value of the instance. When you use any score action in GameMaker the instance that calls it will have a new instance scope variable called score added. This variable can then be checked and set as you would any other variable. In the case of this action, the variable will be drawn to the screen at the given position, along with any caption text that you wish to provide. Caption text will be drawn preceding the score value and if\nit is text it should be wrapped with \"\", and both will be formatted using the current draw font , colour and alignment."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Line",
      "type": "key",
      "topics": [
        {
          "name": "Draw Line",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Line.htm",
          "blurb": "This action will draw a line at a given position within the room. You give the initial x/y position and then the final x/y position and the line will be drawn between them using the current draw colour. The positions can either be an absolute position within the room, or a position relative to the instance calling the action."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Rectangle",
      "type": "key",
      "topics": [
        {
          "name": "Draw Rectangle",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Rectangle.htm",
          "blurb": "This action will draw a rectangle at a given position within the room. You give the top left position and the bottom right position and the rectangle will be drawn between them, and the position can either be an absolute position within the room, or a position relative to the instance calling the action. You can also set whether the rectangle can be filled or outlined by checking the fill box at the bottom."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Self",
      "type": "key",
      "topics": [
        {
          "name": "Draw Self",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Self.htm",
          "blurb": "When you add any type of action or code to the Draw Event of an object, you are telling GameMaker that you are taking over and that you will tell it what to draw from now on (by default an instance will draw the sprite assigned to it in the object editor when there are no actions in the main Draw Event). This means that any assigned sprite will no longer be drawn unless you explicitly say so, which is when you would use this action. This simply draws the assigned sprite for the\nobject with any transforms that may have been set in previous events (like scaling, blending or changes in alpha) at the current sub-image."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Sprite",
      "type": "key",
      "topics": [
        {
          "name": "Draw Sprite",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Sprite.htm",
          "blurb": "This action will draw a sprite somewhere in the room. You specify the sprite, the position (either an absolute position within the room, or a relative position to the instance doing the drawing) and the animation frame of the sprite, if it has multiple frames (note that image frames are numbered from 0 upwards). If you have an animated sprite and you want it to draw the frames as if it was assigned to the object, then use -1 for the frame index or the built in instance variable image_index,\nbut note that if the instance has no sprite assigned then it will not animate, and if the sprite assigned has a different number of frames to the one being drawn then the sprite will be drawn with extra frames or missed frames."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Sprite Transformed",
      "type": "key",
      "topics": [
        {
          "name": "Draw Sprite Transformed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Sprite_Transformed.htm",
          "blurb": "This function will draw the given sprite similar to the action Draw Sprite but with additional options to change the scale, blending, rotation and frame of the sprite being drawn. Changing these values does not modify the resource in any way (only how it is drawn), and you can use any of the available sprite property variables instead of direct values for all the arguments in the function. The image below illustrates\nhow different values affect the drawing of the sprite:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Stacked Sprites",
      "type": "key",
      "topics": [
        {
          "name": "Draw Stacked Sprites",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Stacked_Sprites.htm",
          "blurb": "This action will draw a sprite a given number of sprites one after another at a given position within the room. You give the sprite to draw and the stack order, which can be either Row (horizontally, left to right), or column (vertically, top to bottom), as well as the number of sprites to draw and the position. The position can be an absolute position within the room, or one relative to the position of the instance doing the drawing, and the spacing between images will be based on\nthe width or height of the sprite. Note that this simply draws a static image - the initial single image (frame 0) of the given sprite - and any further frames will be ignored, as will any transforms that have been added through changing the instance variables (like image_xscale or image_blend)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Transformed Value",
      "type": "key",
      "topics": [
        {
          "name": "Draw Transformed Value",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Transformed_Value.htm",
          "blurb": "With this action you can draw a string caption and/or a variable or value to the screen. The caption argument is a string that you wish to add preceding the value, and can be left blank if required, and the value can be a variable, a fixed value, or another string - in which case it should be enclosed in quotes, and can also be left blank if required. You then give the position where the string should be drawn, either as an absolute position or as a position relative to the instance drawing the\ntext. Additionally you can set the scale of the text, stretching it either along the horizontal or vertical axis, as well as the rotation (angles for rotating text are anti-clockwise, so setting it to 90° will rotate it to the left and -90° to the\nright). Scaling is done by the factor given, so a scale of 0.5 will half the width of the text and a scale of 2 will double the width, with 1 being the default value for no scaling. Note that how the text will look when drawn will depend on\nthe font used, the colour used, and the alignment. All these things can be changed before drawing, as shown in the example below."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Draw Value",
      "type": "key",
      "topics": [
        {
          "name": "Draw Value",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Value.htm",
          "blurb": "With this action you can draw a string caption and/or a variable or value to the screen. The caption argument is a string that you wish to add preceding the value, and can be left blank if required but if you wish to include text it should be wrapped in quotes, and the value can be a variable, a fixed value, or another string - in which case it should be enclosed in quotes too - but it cannot be left blank. You then give the position where the string should be drawn, either as an absolute position\nor as a position relative to the instance drawing the text. Note that how the text will look when drawn will depend on the font used, the colour used, and the alignment. All these things can be changed before drawing, as shown in the example below."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Else",
      "type": "key",
      "topics": [
        {
          "name": "Else",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Else.htm",
          "blurb": "The \"else\" action is only ever used in conjunction with If Variable (or any other \"if\" action), and is a way of defining a set of actions that should be performed if the \"if\" evaluation returns false. For example, you could have an \"if\" action that checks if the players health variable is less than or equal to 0, and if that evaluates to true you destroy the instance. However if you want to perform a different\nset of code actions if the player health is not less than 0 then you can add an \"else\" in and then specify the actions to be performed while the if evaluates to false."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Emit Particles",
      "type": "key",
      "topics": [
        {
          "name": "Emit Particles",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Emit_Particles.htm",
          "blurb": "This action is used to create particles from an emitter. You supply the particle system ID that the emitter belongs to (as returned by the action Create Particle System) and then the actual emitter ID (as returned by the action Create Particle Emitter), and finally the particle type to create (as returned by the action Create Particle Type). You can then select to \"Burst\"\nor \"Stream\" the particles from the emitter, as well as give the number of them you want to create."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Execute Code",
      "type": "key",
      "topics": [
        {
          "name": "Execute Code",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Execute_Code.htm",
          "blurb": "This action simply adds a code editor block into the GML Visual list where you can add any valid GML code that you require for the object. Note that all the code in the action will be run before the next action in the list is run. To make it easier to track what these actions do you can name them by using the JSDoc @description identifier, as shown in\nthe image below:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Execute Script",
      "type": "key",
      "topics": [
        {
          "name": "Execute Script",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Execute_Script.htm",
          "blurb": "This action can be used to call a script function or user-defined function. In general, this action would only be used for legacy support and shouldn't really be used in current or new projects. To use the action, you give the script asset to call - or the user-defined function variable name to call - and then supply any arguments that it requires, ie: any values (strings, integers, resource indices, etc...) that you wish to input into the script\nor function so that it can use them. You can add additional arguments as required by clicking the plus icon  beside the action."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Exit",
      "type": "key",
      "topics": [
        {
          "name": "Exit",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Exit.htm",
          "blurb": "This action is will do one of two things depending on the context within which it is called. If it is called from within an event, then it will exit the event and move on to the next one, skipping any action block code that may be placed after it. However if it is used within an Action Block Function, then it will exit the function only and return to the event that called the function, running any subsequent actions. Note that calling\nthis in the middle of a function will not return any value (for that use the return action)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Exit Game",
      "type": "key",
      "topics": [
        {
          "name": "Exit Game",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Game/Exit_Game.htm",
          "blurb": "With this action you can end the game, triggering the Other - Game End Event. Note that this does not happen the moment the action is called, but rather at the end of the current event or script, so any actions that you have after this action has been called will still run until the end of the event/script is reached."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - For",
      "type": "key",
      "topics": [
        {
          "name": "For",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Loops/For.htm",
          "blurb": "The For action is used to perform loops that only terminate when a value reaches the given condition. You give an initial value as a variable (which can be flagged as a temporary local variable - this is usually what you want), then you give the condition to check the variable against (for example if it is less than a certain value), and then finally the amount to increment the variable by each iteration of the loop. So, the general flow is as follows:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Free Data Structure",
      "type": "key",
      "topics": [
        {
          "name": "Free Data Structure",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Free_Data_Structure.htm",
          "blurb": "This action will free the data structure from memory and should be called whenever a data structure is no longer required, for example in the Destroy even of an instance or the Room End event, etc... Freeing a data structure means that no further actions can be used to reference it as it will no longer exist, although you can also check for this using the action If Data Structure Exists."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Function Call",
      "type": "key",
      "topics": [
        {
          "name": "Function Call",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Function_Call.htm",
          "blurb": "This action can be used to call any GML function or any user-defined function. You give the function to call and then supply any additional arguments that it requires, ie: any values (strings, integers, resource indices, etc...) that you wish to input into the function so that it can use them. You can add additional argument inputs by clicking the plus icon  beside\nthe action, and you should ensure that your argument count matches that of the function being used (ie: if the function requires 3 arguments, you should supply 3 arguments). Some functions can also return a value for later use in the action block\nlist, and so you can also specify the target variable that should store this return value, which can have been created previously or can be a new temporary local one (if you check the \"Temp\" check-box). Both the target\nand the argument fields can be left blank if they are not required."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Alarm",
      "type": "key",
      "topics": [
        {
          "name": "Get Alarm",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Alarm.htm",
          "blurb": "This action block retrieves the value of an alarm countdown and stores it in the given target variable. If you flag the target variable as \"Temp\" then this will create a new temporary (local) variable to hold the return value for you, as shown in the example below."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Audio Length",
      "type": "key",
      "topics": [
        {
          "name": "Get Audio Length",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Get_Audio_Length.htm",
          "blurb": "This action can be used to retrieve the length of a sound in your game. You supply the sound resource to get the length of and a target variable to return the value too (or you can flag the target as a temp variable to have the action create the variable for use until the end of the event or script). The length will be returned to the target variable (which can be made temporary) in seconds and can be a decimal value."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Audio Pitch",
      "type": "key",
      "topics": [
        {
          "name": "Get Audio Pitch",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Get_Audio_Pitch.htm",
          "blurb": "This action will retrieve the pitch of the sound resource you supply. The return value will be a multiplier for the actual recorded pitch of the sample, where a value of 1 is no change. For more information on pitch see the action Set Audio Pitch."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Audio Volume",
      "type": "key",
      "topics": [
        {
          "name": "Get Audio Volume",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Get_Audio_Volume.htm",
          "blurb": "This action returns the volume of the given sound. You pick the sound from the asset explorer and give a target variable to return the volume value to (you can flag this as being a temporary local variable). The returned value will be between 0 and 1, where 0 is silent and 1 is full volume."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Buffer Position",
      "type": "key",
      "topics": [
        {
          "name": "Get Buffer Position",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Get_Buffer_Position.htm",
          "blurb": "This action can be used to retrieve the current position for reading/writing to the buffer. When you create a buffer, the read/write position is set at 0 bytes, and as you add data to the buffer this position will move along sequentially, meaning that you can use this action to get the number of bytes into the buffer that it is set to at any time. You supply the unique buffer ID value as returned by the action Create Buffer and then give a target variable to return\nthe position value to. The target variable can be flagged as being a temporary local variable, in which case it will be created for you and removed from memory again at the end of the current action script or event."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Buffer Size",
      "type": "key",
      "topics": [
        {
          "name": "Get Buffer Size",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Get_Buffer_Size.htm",
          "blurb": "This action can be used to retrieve the size of a buffer, in bytes. You supply the unique buffer ID value as returned by the action Create Buffer and then give a target variable to return the size value to. The target variable can be flagged as being a temporary local variable, in which case it will be created for you and removed from memory again at the end of the current action script or event."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Children",
      "type": "key",
      "topics": [
        {
          "name": "Get Children",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Get_Children.htm",
          "blurb": "This action returns an array containing all the child Time Sources for the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Current Room",
      "type": "key",
      "topics": [
        {
          "name": "Get Current Room",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Rooms/Get_Current_Room.htm",
          "blurb": "This action will return the unique room index value for the current room. You need to supply a target variable to hold the returned value, and this variable can be flagged as a temporary local variable."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Draw Action",
      "type": "key",
      "topics": [
        {
          "name": "Get Draw Alpha",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Get_Draw_Alpha.htm",
          "blurb": "With this action you can get the general alpha being used drawing. The action will return the current alpha to the target variable that you specify, which can have been created previously or can be a new temporary one (if you check the \"Temp\" check-box)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Draw Colour",
      "type": "key",
      "topics": [
        {
          "name": "Get Draw Colour",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Get_Draw_Colour.htm",
          "blurb": "With this action you can get the colour being used for any shapes (rectangle/ellipse/line) or for any text that is drawn. The action will return the colour to the target variable that you specify, which can have been created previously or can be a new temporary one (if you check the \"Temp\" check-box)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Draw Font",
      "type": "key",
      "topics": [
        {
          "name": "Get Draw Font",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Get_Draw_Font.htm",
          "blurb": "With this action you can get the ID value of the font currently assigned for drawing. The value returned will be either -1 for no font assigned, or a value >= 0 that represents a font constant from the Asset Browser. The return value will be stored in the target variable that you specify, which can have been created previously or can be a new temporary one (if you check the \"Temp\" check-box)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Gamepad Axis",
      "type": "key",
      "topics": [
        {
          "name": "Get Gamepad Axis",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Get_Gamepad_Axis.htm",
          "blurb": "You can use this action to get the value of the different axes from a given gamepad. You supply the gamepad index (this is the number of \"slot\" that a gamepad occupies) and select the axis to check from either the left or right stick, horizontal or vertical. The value returned will be between -1 and 1 for each of the available horizontal and vertical axes: -1 is left and 1 is right for horizontal axis, and -1 is up and 1 is down for the vertical axis. This returned value will be stored in\nthe target variable that you supply for future use, which you can flag as a \"Temp\" variable, meaning that the action will create a new temporary (local) variable to hold the return value for you, as shown in the example below."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Gamepad Connected",
      "type": "key",
      "topics": [
        {
          "name": "Get Gamepad Connected",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Get_Gamepad_Connected.htm",
          "blurb": "You can use this action to check and see if a given gamepad \"slot\" has a gamepad connected. You supply the gamepad index (this is the number of \"slot\" that a gamepad occupies) and the returned value will be stored in the target variable that you supply for future use (this can be flagged as a temporary local variable that you create for this event or script)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Gamepad Count",
      "type": "key",
      "topics": [
        {
          "name": "Get Gamepad Count",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Get_Gamepad_Count.htm",
          "blurb": "You can use this action to get the number of gamepads connected to the device running your game. The number returned will be between 0 and 12."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Gamepad Trigger",
      "type": "key",
      "topics": [
        {
          "name": "Get Gamepad Trigger",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Get_Gamepad_Trigger.htm",
          "blurb": "You can use this action to get the value of the different triggers from a given gamepad. You supply the gamepad index (this is the number of \"slot\" that a gamepad occupies) and select the the trigger to check (left or right). The value returned will be between 0 and 1, where 0 is no pressure on the trigger and 1 full pressure. This returned value will be stored in the target variable that you supply for future use. Note that this function does not take into account the threshold setting."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Global Variable",
      "type": "key",
      "topics": [
        {
          "name": "Get Global Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Get_Global_Variable.htm",
          "blurb": "This action is used to retrieve the value of a global variable and assign it to another instance or temporary (local) variable. The variable you assign the global value to can be one that was previously created, or you can check the \"Temp\" check-box and give a new variable name to have the action create a new temporary (local) variable specifically to hold the returned value."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Grid Value",
      "type": "key",
      "topics": [
        {
          "name": "Get Grid Value",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Get_Grid_Value.htm",
          "blurb": "With this action you can set a specific cell within the grid data structure to a value. You supply the variable that holds the grid index (as returned by the action Create Grid) and then give the x and y position (the column and row) for the cell to set, and then finally the value for that cell. You must also set a target variable (which can be flagged as a temporary local variable) to store the returned cell value, and the value can be any valid data type. Note that\nthe x and y position for the cell must be whole integers within the bounds of the grid."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Health",
      "type": "key",
      "topics": [
        {
          "name": "Get Health",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/Get_Health.htm",
          "blurb": "You can use this action to retrieve the value of the instance variable created for the \"health\" of the object. You supply the target variable to store the returned \"health\" value (which can be flagged as a temporary local variable), but note that if the variable has not been set previously (using Set Health) then the variable will be created for you and the action will return 0 (unlike regular instance variables which will give an error if you try\nto access them without having set them first)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Index Of List Item",
      "type": "key",
      "topics": [
        {
          "name": "Get Index Of List Item",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Get_Index_Of_List_Item.htm",
          "blurb": "With this action you can recover the index position of an item within the given list. You supply the variable that stores the list index (as returned by the action Create List) and the value you want to find the index position of within the list, as well as a target variable to store the returned index position for the item (which can be flagged as a temporary local variable to be used until the end of the script or event). Note that if the value you are looking for does\nnot exist within the list, then there will be no list index position to return, and so the return value will be -1."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Instance Count",
      "type": "key",
      "topics": [
        {
          "name": "Get Instance Count",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm",
          "blurb": "With this action you can find the number of instances of any given object currently active within the room. You can select any object from the resource list or you can use the special keyword all to get the number of all the instances active. You also need to supply a target variable to return the value to so that you can then use it in further actions. If you flag the target variable as \"Temp\" then this will create a new temporary\n(local) variable to hold the return value for you, as shown in the example below."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Instance Variable",
      "type": "key",
      "topics": [
        {
          "name": "Get Instance Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Variable.htm",
          "blurb": "With this action you can get any one of the listed built in variables. All instances of all objects have a number of variables already created within them to hold essential information like the current x/y position, the speed, the direction, visibility and many other things. The instance variables that you can get the values of are:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get List Item At",
      "type": "key",
      "topics": [
        {
          "name": "Get List Item At",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Get_List_Item_At.htm",
          "blurb": "With this action you can recover the index position of an item within the given list. You supply the variable that stores the list index (as returned by the action Create List) and the index position within the list to get the item value from, as well as a target variable to store the returned item value (which can be flagged as a temporary local variable to be used until the end of the script or event)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get List Item Count",
      "type": "key",
      "topics": [
        {
          "name": "Get List Item Count",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Get_List_Item_Count.htm",
          "blurb": "You can use this action to find out how many entries there are in a list. You supply the variable that holds the list index (as returned by the action Create List) and the target variable to store the returned number of items in the list (which can be flagged as a temporary local variable to be used until the end of the script or event)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Lives",
      "type": "key",
      "topics": [
        {
          "name": "Get Lives",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/Get_Lives.htm",
          "blurb": "You can use this action to retrieve the value of the instance variable created for the \"lives\". You supply the target variable to store the returned \"lives\" value (which can be flagged as a temporary local variable), but note that if the variable has not been set previously (using Set Lives) then the variable will be created for you and the action will return 0 (unlike regular instance variables which will give an error if you try to access them\nwithout having set them first)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Map Value",
      "type": "key",
      "topics": [
        {
          "name": "Get Map Value",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Get_Map_Value.htm",
          "blurb": "With this action you can retrieve the value associated with a given key in a map data structure. You supply the variable that holds the map index (as returned by the action Create Map) and then give a \"key\" (which is the identifier within the map for a value), and also supply a target variable to hold the returned value (which can be flagged as a temporary local variable)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Master Volume",
      "type": "key",
      "topics": [
        {
          "name": "Get Master Volume",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Get_Master_Volume.htm",
          "blurb": "This action returns the master volume for the sound system. You give a target variable to return the volume value to (you can flag this as being a temporary local variable). The returned value will be between 0 and 1, where 0 is silent and 1 is full volume."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Parent",
      "type": "key",
      "topics": [
        {
          "name": "Get Parent",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Get_Parent.htm",
          "blurb": "This action gets the parent Time Source for the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Path Follow Speed",
      "type": "key",
      "topics": [
        {
          "name": "Get Path Follow Speed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Paths/Get_Path_Follow_Speed.htm",
          "blurb": "This action will get the speed, in pixels per game frame, that an instance is set to follow a path (note that you must have called the Start Following Path action to assign a path to the instance for this to to return a value other than 0). The returned value will be stored in the target variable you give, or you can flag the variable as a temporary local variable to create it and assign the value."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Period",
      "type": "key",
      "topics": [
        {
          "name": "Get Period",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Get_Period.htm",
          "blurb": "This action gets the period length for the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Position Along Path",
      "type": "key",
      "topics": [
        {
          "name": "Get Position Along Path",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Paths/Get_Position_Along_Path.htm",
          "blurb": "This action will get the position of an instance along a path. The returned value is normalised from 0 - 1, so if you get a result of, for example, 0.5, the instance exactly in the middle of the path. Note that you must have called the Start Following Path action to assign a path to the instance for this action to return a value other than 0. The returned value will be stored in the target variable you give, or you can flag the variable as a temporary local variable to create it and assign the value."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - get Random Number",
      "type": "key",
      "topics": [
        {
          "name": "Get Random Number",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Random/Get_Random_Number.htm",
          "blurb": "This action will generate a random number within the bounds of a set of minimum and maximum values. You can choose the type of number to generate (either a decimal or an integer) and then set the range for the number to be generated within by supplying a minimum and maximum value. The random value generated will be returned to the target variable (which can be flagged as a temporary local variable)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Reps Completed",
      "type": "key",
      "topics": [
        {
          "name": "Get Reps Completed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Get_Reps_Completed.htm",
          "blurb": "This action gets the number of repetitions that the given Time Source has completed, since its last reset."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Reps Remaining",
      "type": "key",
      "topics": [
        {
          "name": "Get Reps Remaining",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Get_Reps_Remaining.htm",
          "blurb": "This action gets the number of repetitions that the given Time Source has left, until it completely stops."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Score",
      "type": "key",
      "topics": [
        {
          "name": "Get Score",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/Get_Score.htm",
          "blurb": "You can use this action to retrieve the value of the instance variable created for the \"score\". You supply the target variable to store the returned \"score\" value (which can be flagged as a temporary local variable), but note that if the variable has not been set previously (using Set Score) then the variable will be created for you and the action will return 0 (unlike regular instance variables which will give an error if you try to access them\nwithout having set them first)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Sequence Head",
      "type": "key",
      "topics": [
        {
          "name": "Get Sequence Head",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Get_Sequence_Head.htm",
          "blurb": "With this action you can retrieve the current playhead position of the given sequence element in the room. You supply the sequence element ID (as returned by the action Create Sequence), and this action will return the current frame that the sequence playhead is on, in the target variable. For information on the playhead, see Using The Dope Sheet."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Sequence Length",
      "type": "key",
      "topics": [
        {
          "name": "Get Sequence Length",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Get_Sequence_Length.htm",
          "blurb": "With this action you can retrieve the length (in frames) of the given sequence element in the room. You supply the sequence element ID (as returned by the action Create Sequence), and this action will return its length in the target variable. This will be the number of frames that the Sequence runs for."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Sequence Position",
      "type": "key",
      "topics": [
        {
          "name": "Get Sequence Position",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Get_Sequence_Position.htm",
          "blurb": "With this action you can retrieve the current position for the given sequence element in the room. You supply the sequence element ID (as returned by the action Create Sequence), and this action will return its X and Y position in target variables. Note that the target variables can be flagged as temporary (local) variables, which will be created for the action and can be used in all subsequent actions for the event the action is in."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get State",
      "type": "key",
      "topics": [
        {
          "name": "Get State",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Get_State.htm",
          "blurb": "This action gets the state of the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Text Alignment",
      "type": "key",
      "topics": [
        {
          "name": "Get Text Alignment",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Get_Text_Alignment.htm",
          "blurb": "This action will get the font alignment for all current draw text actions. You can choose whether to retrieve the horizontal or vertical alignment to check, and the action will return one of the following constant values, that represent a different type of horizontal or vertical alignment:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Tile Data At Pixel",
      "type": "key",
      "topics": [
        {
          "name": "Get Tile Data At Pixel",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Get_Tile_Data_At_Pixel.htm",
          "blurb": "With this action you can get the tile data for a tile cell on a tile-map layer from a position. The tile data is simply a value that reflects the index of the tile along with the flip, mirror, and rotate values, as well as any custom tile masks that you have used. With this action you first supply the layer to target using the name of the layer (a string) as defined in the room editor, and then the x and y axis in the room to get the tile-data for. The tile data value returned will coincide with\nwhatever tile-map cell happens to be at that point. For example, if your tile-set tiles are 16x16, then the tile-map layer will hold tiles in cells of 16x16 pixels, so if you use this action to target the room position (8, 8), you will be getting\nthe tile-data for the cell (0, 0) of the tile-map."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Tile Data In Cell",
      "type": "key",
      "topics": [
        {
          "name": "Get Tile Data In Cell",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Get_Tile_Data_In_Cell.htm",
          "blurb": "With this action you can get the tile data for a tile cell on a tile map layer. The tile data is simply a value that reflects the index of the tile along with the flip, mirror, and rotate values, as well as any custom tile masks that you have used. With this action you first supply the layer to target using the name of the layer (a string) as defined in the room editor, and then the column and row of the tile map layer to get the tile-data\nfor. The \"cell\" is the area on the tile map grid that holds the tile you want to get the data from, so if your tiles are 16x16, for example, and the room is 1024x768 the tile-map will have 64 columns and 48 rows."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Tile Data Transform",
      "type": "key",
      "topics": [
        {
          "name": "Get Tile Data Transform",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Get_Tile_Data_Transform.htm",
          "blurb": "With this action you can find out if the tile data for a tile has been transformed in one of three ways: flipped, mirrored or rotated. The tile data is simply a value that reflects the index of the tile along with the transforms applied, and you will normally want to get the tile data first using either Get Tile Data In Cell or Get Tile Data At Pixel before using this action. The action will return true if\nthe chosen transform has been applied to the tile-data, or false otherwise, and the returned value will then be stored in the target variable which can have been created previously or can be a new temporary one (if you check the \"Temp\"\ncheck-box). For more information on tile data, please see the GML section on Tile Map Functions."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Tile Index At Pixel",
      "type": "key",
      "topics": [
        {
          "name": "Get Tile Index At Pixel",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Get_Tile_Index_At_Pixel.htm",
          "blurb": "This action is used to get a tile index on a given layer. The layer is specified from the layer name given (a string, as used to name the layer in the Room Editor), and then you give an x and y position to find the tile to get the index of. The tile will be the one that the given position falls within in the room, and the index will be returned to the target variable, where 0 is no tile, and a positive integer is the index of the tile. The x and y position can be flagged as being relative to\nthe position of the calling instance, and the target variable can be flagged as a temporary (local) variable that can be used until the end of the event."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Tile Index In Cell",
      "type": "key",
      "topics": [
        {
          "name": "Get Tile Index In Cell",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Get_Tile_Index_In_Cell.htm",
          "blurb": "With this action you can get a tile index on a given layer. The layer is specified from the layer name given (a string, as used to name the layer in the Room Editor), and then you give the row and column of the cell within the layer to get the tile index from. Finally you supply the target variable to store the returned tile index in, where 0 is no tile, and a positive integer is the index of the tile. Note that the target variable can be flagged as a temporary (local) variable that can be used\nuntil the end of the event."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Tilemap Variable",
      "type": "key",
      "topics": [
        {
          "name": "Get Tilemap Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Get_Tilemap_Variable.htm",
          "blurb": "With this action you can retrieve any one of a given number of variables for the tile map element on a layer. When you create a tile layer in the room editor, this layer holds a tile map element which is then populated with tiles from a tile-set. This tile map element has certain values associated with it, like an offset position, the tile-set being used, the width, height, etc... The complete list of values that you can get is:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Time Remaining",
      "type": "key",
      "topics": [
        {
          "name": "Get Time Remaining",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Get_Time_Remaining.htm",
          "blurb": "This action gets the time remaining for the given Time Source to expire. This value is expressed in the units used for the Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Units",
      "type": "key",
      "topics": [
        {
          "name": "Get Units",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Get_Units.htm",
          "blurb": "This action gets the type of units used for the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get View Variable",
      "type": "key",
      "topics": [
        {
          "name": "Get View Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Cameras/Get_View_Variable.htm",
          "blurb": "This action permits you to get the value of certain built in variables related to a given view port. You select the view port variable to retrieve, then give the view port to target (from 0 to 7) and finally the target variable to hold the returned value (this can be flagged as being a temporary local variable). The view port is the area of the screen that will be used to draw a given camera view (as set up in the room editor), and the different variables that you are able to get in this way\nare outlined in the table below:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Get Virtual Keyboard Height",
      "type": "key",
      "topics": [
        {
          "name": "Get Virtual Keyboard Height",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/Get_Virtual_Keyboard_Height.htm",
          "blurb": "This action will return the current height in pixels of the virtual keyboard, based on the size of the display. If the keyboard is not visible, 0 will be returned."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Go To Next Room",
      "type": "key",
      "topics": [
        {
          "name": "Go To Next Room",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Rooms/Go_To_Next_Room.htm",
          "blurb": "This action will make your game go to the next room as listed in the Room Manager at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event or script where the action was called, so any code after this action will still run."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Go To Previous Room",
      "type": "key",
      "topics": [
        {
          "name": "Go To Previous Room",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Rooms/Go_To_Previous_Room.htm",
          "blurb": "This action will make your game go to the previous room as listed in the Room Manager at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event or script where the action was called, so any code after this action will still run."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Go To Room",
      "type": "key",
      "topics": [
        {
          "name": "Go To Room",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Rooms/Go_To_Room.htm",
          "blurb": "This action will end the current room and go to the room specified by the input index. The room must exist or else an error will be given, and if you use the same room as the current room it will have the same effect as using Restart Room. Note that the room will not change until the end of the event or script where the action was called, so any actions after this one will still run."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Hide Virtual Keyboard",
      "type": "key",
      "topics": [
        {
          "name": "Hide Virtual Keyboard",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/Hide_Virtual_Keyboard.htm",
          "blurb": "This action can be used to hide the virtual keyboard on the device running the game. Calling this action will generate a System Asynchronous Event, in which the async_load  DS map will be populated with the following key/value pairs:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Any Object At Place",
      "type": "key",
      "topics": [
        {
          "name": "If Any Object At Place",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Collisions/If_Any_Object_At_Place.htm",
          "blurb": "This action is used to check and see if there is an instance of any object placed at a position based on the collision mask of the calling instance. You give the position, which can be an absolute position or a position relative to the instance, and the action will return true if there is a collision or false if there is not. You can also check the \"Not\" flag to check if there is not a collision at the given position, and the action will then return true if no collisions are found and false otherwise. Collisions are calculated based on the collision mask of the calling instance overlapping the collision mask of any instance at the position (as if it was being \"placed\" at the position)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Audio Is Paused",
      "type": "key",
      "topics": [
        {
          "name": "If Audio Is Paused",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/If_Audio_Is_Paused.htm",
          "blurb": "This action can be used to check whether an instance of any sound resource is currently paused in your game. You give the sound resource to check for from the asset explorer and the function will return true if it is paused and false if it is not, although if you check the \"not\" flag, this is reversed and the function will return true if the sound is not paused and false otherwise."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Audio Is Playing",
      "type": "key",
      "topics": [
        {
          "name": "If Audio Is Playing",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/If_Audio_Is_Playing.htm",
          "blurb": "This action can be used to check whether an instance of any sound resource is currently playing in your game. You give the sound resource to check for from the asset explorer and the function will return true if it is playing and false if it is not, although if you check the \"not\" flag, this is reversed and the function will return true if the sound is not playing and false otherwise."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Buffer Exists",
      "type": "key",
      "topics": [
        {
          "name": "If Buffer Exists",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/If_Buffer_Exists.htm",
          "blurb": "This action can be used to check if a given buffer ID is valid and the buffer actually exists in memory. If the buffer ID is valid and exists, the action will return true otherwise it will return false. You can flag \"not\" to make the action check if a buffer does not exist."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Collision Point",
      "type": "key",
      "topics": [
        {
          "name": "If Collision Point",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Collisions/If_Collision_Point.htm",
          "blurb": "This action is used to check and see if there is a collision with one or more instances of a given object at a specific point in the room and will evaluate to true if a collision is detected, or false otherwise. You give the object to check for and the position to check at - which can be an absolute position in the room or a position relative to the instance - and you can also check the Not flag to check if there is not a collision at the given position, meaning\nthat the action will then only evaluate as true if no collisions are found, otherwise it will evaluate as false. You can also set the Exclude Self option to exclude the calling instance from the collision check."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Collision Shape",
      "type": "key",
      "topics": [
        {
          "name": "If Collision Shape",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Collisions/If_Collision_Shape.htm",
          "blurb": "This action is used to check and see if there is a collision with an instance of a given object within a given shaped area or along a line. You give the shape (rectangle, ellipse or line), the object to check for, and then supply the coordinates for the upper-left and lower-right corners of the shape being used, or in the case of a line, the start and end positions. These can be absolute positions within the game room, or positions relative to the instance performing the action. You can see how\nthis works in the image below:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Data Structure Empty",
      "type": "key",
      "topics": [
        {
          "name": "If Data Structure Empty",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/If_Data_Structure_Empty.htm",
          "blurb": "With this action you can check a to see if the given data structure is empty or not. You first need to pick the type of data structure to check for (either a List, a Map, or a Stack - no grids since they cannot even be empty) and then you supply the variable that holds the data structure index (as returned by the actions Create List, Create Map, and Create Stack). The action will return true if\nthe data structure is empty, and false if it is not. Note that you can flag \"not\" in the action to check if a data structure does hold data by checking if it is not empty."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Data Structure Exists",
      "type": "key",
      "topics": [
        {
          "name": "If Data Structure Exists",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/If_Data_Structure_Exists.htm",
          "blurb": "With this action you can check a variable to see if it indexes a data structure or not . You first need to pick the type of data structure to check for (either a List, a Map, a Grid or a Stack) and then you supply the variable that holds the data structure index (as returned by the actions Create List, Create Map, Create Grid, and Create Stack). The action will return true if the data structure exists, and false if it does not. Note that you can flag \"not\" in the action to check if a variable does not hold a data structure index."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If End Of Buffer",
      "type": "key",
      "topics": [
        {
          "name": "If End Of Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/If_End_Of_Buffer.htm",
          "blurb": "This action can be used to check if the read/write position has reached the end of the buffer. You supply the unique buffer ID value as returned by the action Create Buffer and then the action will return true if the read/write position has reached the end of all the available data in the buffer, or false if it has not. You can flag \"not\" to make the action check if the read/write position is not at the end of the buffer."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Expression",
      "type": "key",
      "topics": [
        {
          "name": "If Expression",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/If_Expression.htm",
          "blurb": "This action is used to check that an expression as either true or false, and you can check any logical expression here as long as it evaluates to one or the other value. For example, any of the following expressions could be used:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If File Exists",
      "type": "key",
      "topics": [
        {
          "name": "If File Exists",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/If_File_Exists.htm",
          "blurb": "With this action you can check to see if a file with the given name exists. You select the file to check for (as a sting and including the extension) and the function will return true if it exists, and false if it does not. Note that this will return true if the file exists in the game bundle as an Included File or if the file has been saved out while the game was running (see the section on The File System for more information)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Gamepad Button Down",
      "type": "key",
      "topics": [
        {
          "name": "If Gamepad Button Down",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/If_Gamepad_Button_Down.htm",
          "blurb": "With this action you can poll a gamepad to see if a given button is currently being held down. The action will return true every step that the button is being held down, or false otherwise, although if you click the not modifier you can then check to see if the button is not being held, ie: the action will return true while no button is down and false if there is. If you only need to check for a single button press then use the action If Gamepad Button Pressed."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Gamepad Button Pressed",
      "type": "key",
      "topics": [
        {
          "name": "If Gamepad Button Pressed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/If_Gamepad_Button_Pressed.htm",
          "blurb": "With this action you can poll the gamepad to see if any button is currently being pressed. The action will return true every step that the gamepad button is being pressed (and held) down, or false otherwise, although if you click the not modifier you can then check to see if the button is not being pressed, ie: the action will return true while no button is pressed and false if there is. If you only need to check for a single button press then\nuse the action if gamepad button down."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Gamepad Button Released",
      "type": "key",
      "topics": [
        {
          "name": "If Gamepad Button Released",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/If_Gamepad_Button_Released.htm",
          "blurb": "This action checks for when a gamepad button has been released for the given gamepad index. It will return true on the single game tick that the button is released on and false at all other times. If you enable the not modifier, this action will be reversed, and check if the button has not been released, returning false on the game tick that it has been released on and true at all other times."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Health",
      "type": "key",
      "topics": [
        {
          "name": "If Health",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/If_Health.htm",
          "blurb": "This action is used to check the value of the instance variable health using a specific expression. You give the type of expression to check with and the value to check the current health against, and the \"if\" statement will always return either true or false depending on the expressions and values used. The available expressions are:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Instance Exists",
      "type": "key",
      "topics": [
        {
          "name": "If Instance Exists",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/If_Instance_Exists.htm",
          "blurb": "This action can be used to check if an instance of a specific object exists in the game room, or if a specific instance itself exists. You give the object from the asset explorer, and if any instance exists in the room then the action will return true otherwise it will return false. Note that you can use a variable here with the unique ID for specific instance (for example as returned by the action Create Object Instance) or even the instance ID value as returned by the room editor when you added the instance."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Key Down",
      "type": "key",
      "topics": [
        {
          "name": "If Key Down",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/If_Key_Down.htm",
          "blurb": "With this action you can poll the keyboard to see if any key is currently being held down. The action will return true every step that the keyboard key is being held down, or false otherwise, although if you click the not modifier you can then check to see if the key is not being help, ie: the action will return true while no key is down and false if there is. If you only need to check for a single key press then use the action If Key Pressed."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Key Pressed",
      "type": "key",
      "topics": [
        {
          "name": "If Key Pressed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/If_Key_Pressed.htm",
          "blurb": "This action checks for the initial press on a keyboard key. It will return true on the single game step (frame) that the key is initially pressed down and false at all other times. If you enable the not modifier, this action will be reversed, and check if the key has not been pressed down, returning false on the game step (frame) that it has been pressed down and true at all other times. If you need to check for a key being held down and not just\nthe initial press event, then use the action If Key Down."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Key released",
      "type": "key",
      "topics": [
        {
          "name": "If Key Released",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/If_Key_Released.htm",
          "blurb": "This action checks for when a keyboard key has been released. It will return true on the single game step (frame) that the key is released on and false at all other times. If you enable the not modifier, this action will be reversed, and check if the key has not been released, returning false on the game step (frame) that it has been released on and true at all other times."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Lives",
      "type": "key",
      "topics": [
        {
          "name": "If Lives",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/If_Lives.htm",
          "blurb": "This action is used to check the value of the instance variable lives using a specific expression. You give the type of expression to check with and the value to check the current lives against, and the \"if\" statement will always return either true or false depending on the expressions and values used. The available expressions are:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Mouse Down",
      "type": "key",
      "topics": [
        {
          "name": "If Mouse Down",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/If_Mouse_Down.htm",
          "blurb": "With this action you can poll the mouse to see if the selected button is currently being held down. The action will return true every step that the button is being held down, or false otherwise, although if you click the not modifier you can then check to see if the button is not being held, ie: the action will return true while no button is down and false if there is. If you only need to check for a single button press then use the action If Mouse Pressed."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Mouse Pressed",
      "type": "key",
      "topics": [
        {
          "name": "If Mouse Pressed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/If_Mouse_Pressed.htm",
          "blurb": "This action checks for the initial press on a mouse button. It will return true on the single game step (frame) that the button is initially pressed down and false at all other times. If you enable the not modifier, this action will be reversed, and check if the button has not been pressed down, returning false on the game step (frame) that it has been pressed down and true at all other times.. If you need to check for a button being held down and not just the initial press event, then use the action If Mouse Down."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Mouse Released",
      "type": "key",
      "topics": [
        {
          "name": "If Mouse Released",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/If_Mouse_Released.htm",
          "blurb": "This action checks for when a mouse button has been released. It will return true on the single game step (frame) that the mouse button is released on and false at all other times. If you enable the not modifier, this action will be reversed, and check if the mouse button has not been released, returning false on the game step (frame) that it has been released on and true at all other times."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Object At Place",
      "type": "key",
      "topics": [
        {
          "name": "If Object At Place",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Collisions/If_Object_At_Place.htm",
          "blurb": "This action is used to check and see if there is a collision with one or more instances of a given object with the current instance placed at a point in the room, based on the collision mask of the calling instance. The action will evaluate to true if a collision is detected, or false otherwise. You give the object to check for and the position to \"place\" the instance to perform the check - which can be an absolute position in the room or a position relative to the instance - and you can also check the Not flag to check if there is not a collision at the given position, in which case the action will then only evaluate as true if no collisions are found, otherwise it will evaluate as false."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Room Is First",
      "type": "key",
      "topics": [
        {
          "name": "If Room Is First",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Rooms/If_Room_Is_First.htm",
          "blurb": "This action will check to see if the current room is the first room as listed in the Room Manager. The action will return true if the current room is the first in the Room Manager and false if it is not. You can flag the not checkbox to turn this into \"If Room Is NOT first\"."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Room Is Last",
      "type": "key",
      "topics": [
        {
          "name": "If Room Is Last",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Rooms/If_Room_Is_Last.htm",
          "blurb": "This action will check to see if the current room is the last room as listed in the Room Manager. The action will return true if the current room is the last in the Room Manager and false if it is not. You can flag the not checkbox to turn this into \"If Room Is NOT Last\"."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Score",
      "type": "key",
      "topics": [
        {
          "name": "If Score",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/If_Score.htm",
          "blurb": "This action is used to check the value of the instance variable score using a specific expression. You give the type of expression to check with and the value to check the current score against, and the \"if\" statement will always return either true or false depending on the expressions and values used. The available expressions are:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Sequence Exists",
      "type": "key",
      "topics": [
        {
          "name": "If Sequence Exists",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/If_Sequence_Exists.htm",
          "blurb": "This action can be used to check if the given sequence element exists in the game room. You give the element ID, as returned by the action Create Sequence, and if the sequence element exists in the room then the action will return true otherwise it will return false."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Time Source Exists",
      "type": "key",
      "topics": [
        {
          "name": "If Time Source Exists",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/If_Time_Source_Exists.htm",
          "blurb": "This action allows you to control other actions based on whether the given Time Source exists or not."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Time Source Parent",
      "type": "key",
      "topics": [
        {
          "name": "If Time Source Parent",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/If_Time_Source_Parent.htm",
          "blurb": "This action allows you to control other actions based on the parent of the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Time Source State",
      "type": "key",
      "topics": [
        {
          "name": "If Time Source State",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/If_Time_Source_State.htm",
          "blurb": "This action allows you to control other actions based on the state of the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Time Source Units",
      "type": "key",
      "topics": [
        {
          "name": "If Time Source Units",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/If_Time_Source_Units.htm",
          "blurb": "This action allows you to control other actions based on the unit type of the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Undefined",
      "type": "key",
      "topics": [
        {
          "name": "If Undefined",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/If_Undefined.htm",
          "blurb": "This action is used to check if a variable or expression returns a value of \"undefined\", and if it is then this action will return true and if it isn't it will return false. \"Undefined\" can be returned for a number of reasons, and an undefined value can cause a crash or serious error in your project, so you can use this to check for that and catch it before it happens. If you flag the \"Not\" argument, then you are checking to see if a value is\nnot \"undefined\"."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Variable",
      "type": "key",
      "topics": [
        {
          "name": "If Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/If_Variable.htm",
          "blurb": "This action is used to check the state of a given variable against a given value using a specific expression. An \"if\" statement will always return either true or false and the expressions for checking can be any one of the following:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - If Virtual Keyboard Is Showing",
      "type": "key",
      "topics": [
        {
          "name": "If Virtual Keyboard Is Showing",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/If_Virtual_Keyboard_Is_Showing.htm",
          "blurb": "This action can be used to check if the OS virtual keyboard is being shown or not. The action will evaluate to true when the keyboard is open or opening, or false if the virtual keyboard is closed or closing. If you enable the not modifier, this action will be reversed and you can store the return true / false value in a target variable, which can be flagged as temp (local)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Insert Into List",
      "type": "key",
      "topics": [
        {
          "name": "Insert Into List",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Insert_Into_List.htm",
          "blurb": "With this action you can recover the index position of an item within the given list. You supply the variable that stores the list index (as returned by the action Create List) and the value you want to find the index position of within the list, as well as a target variable to store the returned index position for the item (which can be flagged as a temporary local variable to be used until the end of the script or event). When you insert a value into a list, all indices\nabove the given index for inserting will be moved up one, so if you have a list with 4 items in it (index position 0 to 3) and place a new item at index position 2, the previous item 2 will become item 3 and the previous item 3 will become item 4.\nNote that if the value you are looking for does not exist within the list, then there will be no list index position to return, and so the return value will be -1."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Jump To Point",
      "type": "key",
      "topics": [
        {
          "name": "Jump To Point",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Jump_To_Point.htm",
          "blurb": "This action is used to move an instance from one location to another. The instance will not move smoothly to the new position, but will \"jump\" to be placed there, so if the values are large enough then it will \"skip over\" any other instances on the way. You can set absolute values to move the instance to, or you can tick the \"relative\" flag to have the instance move relative to the current position. For example, if you want the instance to jump 10 pixels to left only,\nyou would set the x value to -10 and the y value to 0 and tick relative for both. You can use negative values for absolute coordinates and the instance will be moved outside of the base room area."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Jump To Start",
      "type": "key",
      "topics": [
        {
          "name": "Jump To Start",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Jump_To_Start.htm",
          "blurb": "This action is used to move an instance from its current position to the position where it was originally created. The original position where an instance is created is stored in two instance variables called xstart and ystart. These variables can be used in any other action and can also be set to change the recorded start position."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Load Buffer",
      "type": "key",
      "topics": [
        {
          "name": "Load Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Load_Buffer.htm",
          "blurb": "With this action you can load a buffer that was previously saved with the action Save Buffer. The action will create a new buffer, load the data file into it, and return the unique ID value to identify the buffer to the variable. You supply the name of the file to load (as a string) and a variable to store the returned buffer ID in. Note that if you flag the variable as a temporary local variable, you need to make sure to delete the buffer this function creates before\nthe end of the action script or event, otherwise you will lose the reference to it and get a memory leak when the variable is discarded."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Load Game",
      "type": "key",
      "topics": [
        {
          "name": "Load Game",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Game/Load_Game.htm",
          "blurb": "This action will load a game that has previously been saved using the Save Game action. You give the filename of the file to load (as a string, and including the extension) and the game will be loaded and continue running from the saved point. Note that this is not designed as a universal save/load system, and trying to load a game saved from a previous run of the project may give errors (especially if you have used things like Data Structures or Particles), and as such you should only try and load games that have been saved in the progress of a single game play-through (for things like checkpoints). Also note that the file will not be loaded until the end of the current event or script, so any actions after the load action is called will still be performed. For a more comprehensive approach to loading saved game data, see the File Actions."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Loop",
      "type": "key",
      "topics": [
        {
          "name": "Loop",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Loops/Loop.htm",
          "blurb": "The Loop action will loop infinitely until a Break action is called. Care should be taken with this action to ensure that regardless of the actions placed within the loop, a Break will always be called, otherwise the game will cause a \"not responding\" error on the target OS and stop working. You add this action into the action code workspace and then add the actions to be performed within the loop, much as you would add an action to an \"if\",\nie: dropping it to the side of the action rather than under it:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Macro",
      "type": "key",
      "topics": [
        {
          "name": "Macro",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Macro.htm",
          "blurb": "This action permits you to define one or more macros. Macros are simply unique constant values - or expressions that evaluate to a unique constant value - which can then be used in a similar way to a regular constant. You can also use a function call in this this action to generate a single return value, in which case the macro will evaluate the function every time it is called. Note that macros are global in scope, and once declared they can be used by any instance, script\nor action block in your game, but they cannot be changed after being defined. Note that you can define additional macros in the same action by clicking the plus icon  beside the action. For more information on macros, please see here."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - New",
      "type": "key",
      "topics": [
        {
          "name": "New Struct",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/New.htm",
          "blurb": "This action is only used when creating structs using a function that has been flagged as a constructor function (see Declare A New Function for more information). This action takes the function method for a previously defined function, as well as a number of arguments, which you can expand to add more if required using the  icon on the left. These arguments should correspond to the inputs required by the function, and will be used to populate the struct that is being created. The struct will be returned to the target variable, which can be flagged as a temporary local variable or not."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Number To String",
      "type": "key",
      "topics": [
        {
          "name": "Number To String",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Number_To_String.htm",
          "blurb": "This action will convert a real number into a string. If the number is not an integer value and has decimal places, these will be rounded to the nearest two places, so, for example, the number 123.45678 would return the string \"123.46\"."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Open Ini File",
      "type": "key",
      "topics": [
        {
          "name": "Open Ini File",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Open_Ini_File.htm",
          "blurb": "With this action you can open an Ini file for reading and/or writing. If the Ini file does not exist at the location you are checking, GameMaker may create one, but only if you write data to it. If you have only read information from the Ini file, then the default values for the read function will be returned, but the Ini file will not actually be created."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Pause All Audio",
      "type": "key",
      "topics": [
        {
          "name": "Pause All Audio",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Pause_All_Audio.htm",
          "blurb": "This action can be used to pause all sounds currently playing, but this will not pause any sounds played after the action has been called. You can start them playing again using the action Resume All Audio."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Pause Audio",
      "type": "key",
      "topics": [
        {
          "name": "Pause Audio",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Pause_Audio.htm",
          "blurb": "This action can be used to pause the chosen sound if it is currently playing. Note if you have played multiple instances of the same sound, all of them will be paused, and this does not pause any sounds played after the action has been called. You can start a paused sound playing again using the action Resume Audio."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Pause Particle System",
      "type": "key",
      "topics": [
        {
          "name": "Pause Particle System",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Pause_Particle_System.htm",
          "blurb": "This action will pause the given particle system. You supply the unique ID value for the system to pause, as returned when you created the system with the action Create Particle System. A paused particle system will still draw the particles that have been spawned but they will no longer update their colour, position or alpha, nor will they complete their lifespan and disappear until you resume the system. You can choose to pause or resume the system using the\n\"State\" option."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Pause Sequence",
      "type": "key",
      "topics": [
        {
          "name": "Pause Sequence",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Pause_Sequence.htm",
          "blurb": "With this action you can pause a playing sequence. You supply the sequence element ID (as returned by the action Create Sequence), and the action will pause it playing."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Pause Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Pause Time Source",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Pause_Time_Source.htm",
          "blurb": "This action pauses the given Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Play Audio",
      "type": "key",
      "topics": [
        {
          "name": "Play Audio",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Play_Audio.htm",
          "blurb": "This action will set the given sound playing. You select the sound from the Asset Explorer and then set whether you would like the sound to be looped or not (a looped sound will play again and again until stopped) by setting the \"Loop\" flag."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Play Sequence",
      "type": "key",
      "topics": [
        {
          "name": "Play Sequence",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Play_Sequence.htm",
          "blurb": "With this action you can start a (previously paused) sequence playing. You supply the sequence element ID (as returned by the action Create Sequence), and the action will start it playing."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Pop Stack",
      "type": "key",
      "topics": [
        {
          "name": "Pop Stack",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Pop_Stack.htm",
          "blurb": "With this action you can pop a value off the top of a stack data structure. You supply the variable that holds the stack index (as returned by the action Create Stack) and then give the target variable that should hold the returned variable (which can be flagged as a temporary local variable)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Push Onto Stack",
      "type": "key",
      "topics": [
        {
          "name": "Push Onto Stack",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Push_Onto_Stack.htm",
          "blurb": "With this action you can push a value onto a stack data structure. You supply the variable that holds the stack index (as returned by the action Create Stack) and then give the value to push onto the top. With stack data structures, values are always added onto the \"top\" of the stack, and never at the end or in the middle (if you require this functionality, then use a list data structure)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Randomise",
      "type": "key",
      "topics": [
        {
          "name": "Randomise",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Random/Randomise.htm",
          "blurb": "This action sets the \"seed\" for the random number generator to a random value. When using the random number functions in GameMaker the initial seed is always the same, as this makes tracing errors and debugging far easier (compiled games do not have this behaviour). Should you wish to test with true random, you should call this action once at the start of the game."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Read Buffer",
      "type": "key",
      "topics": [
        {
          "name": "Read Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Read_Buffer.htm",
          "blurb": "This action can be used to read data from a previously created buffer. You supply the unique buffer ID value (as returned by the action Create Buffer) and give a variable to store the returned value. If you flag the variable as a temporary local variable then it will be created for you and discarded again at the end of the event or action script. All data is returned as a string so if you have stored any real numbers you will have to use one of the Data Type Actions to convert it from the string to the value. Keep in mind too that buffers are read and written to sequentially and so reading from a buffer will move the \"seek\" position to the next entry, meaning that to read various pieces of data\nyou simply call this action the number of times required and store each returned piece of data to a variable."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Read Ini File",
      "type": "key",
      "topics": [
        {
          "name": "Read Ini File",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Read_Ini_File.htm",
          "blurb": "With this action you can read a piece of data from an Ini file. You must previously have opened the Ini file for reading/writing using the action Open Ini File, and then with this action you give the type of data to read (either a real number or a string enclosed in \"\"), as well as the section header and the key within that section to get the data from. You can also supply a default value which can be either a real number of a string, and the type should\ncoincide with the \"Type\" set in the action. This default action will be returned by the action should any of the following occur:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Reconfigure Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Reconfigure Time Source",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Reconfigure_Time_Source.htm",
          "blurb": "This action allows you to change the settings for an existing Time Source, specified in the \"Time Source\" field."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Remove From List",
      "type": "key",
      "topics": [
        {
          "name": "Remove From List",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Remove_From_List.htm",
          "blurb": "This action can be used to remove an index item from the given list. You supply the variable that stores the list index (as returned by the action Create List) and the index position within the list to remove, where the index position is between 1 and (list length -1). This action does not return anything so if you need the value at the index position you should use Get List Item At before removing the index."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Remove Map Entry",
      "type": "key",
      "topics": [
        {
          "name": "Remove Map Entry",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Remove_Map_Entry.htm",
          "blurb": "With this action you can remove a key (and its corresponding value) from a map data structure. You supply the variable that holds the map index (as returned by the action Create Map) and then give a \"key\" (which is the identifier within the map for a value), and the action will remove that key from the map. Note that this action does not return anything, and if you need the value for the given key you should use the Get Map Value action before removing it."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Rename File",
      "type": "key",
      "topics": [
        {
          "name": "Rename File",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Rename_File.htm",
          "blurb": "With this action you can rename any file that has been saved by your game. You give the name of the file to change (as a string) and then the new name (also as a string and including the file extension), and the file will be renamed. Note that you cannot rename any file that was bundled as an Included File with your game (see the section on The File System for more information)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Repeat",
      "type": "key",
      "topics": [
        {
          "name": "Repeat",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Loops/Repeat.htm",
          "blurb": "This action will repeat any actions added to it the number of times specified. You give the number of times that the actions are to be repeated and then add the action to the repeat loop, much as you would add an action to an \"if\", ie: dropping it to the side of the action rather than under it:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Reset Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Reset Time Source",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Reset_Time_Source.htm",
          "blurb": "This action resets the given Time Source. It can later be started again manually."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Restart Game",
      "type": "key",
      "topics": [
        {
          "name": "Restart Game",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Game/Restart_Game.htm",
          "blurb": "With this action you can restart the game. This is similar to running the game for the first time and so the Other - Game Start Event will be triggered, as well as the Other - Game End Event. However it should be noted that global variables will not be re-initialised unless explicitly coded as such - meaning that if you don't define and set them in the very first room of the game they will retain their previous values - and that\nData Structures and Particles will not be freed either and so that should be done before the Restart Game action is called or in the Game End Event. Also note that the game will not restart the moment this action is called, but rather at the end of the script or event where the action is placed, so if there are any actions placed after this one, they will still be called and the game restarted at the end of the block."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Restart Room",
      "type": "key",
      "topics": [
        {
          "name": "Restart Room",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Rooms/Restart_Room.htm",
          "blurb": "This action will restart the current room. Note that the room will not restart until the end of the event or script where the action was called, so any code after this action will still run."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Resume All Audio",
      "type": "key",
      "topics": [
        {
          "name": "Resume All Audio",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Resume_All_Audio.htm",
          "blurb": "This action can be used to resume all previously paused sounds that have been paused using Pause Audio or Pause All Audio. It will have no effect on those sounds that have not been paused previously."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Resume Audio",
      "type": "key",
      "topics": [
        {
          "name": "Resume Audio",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Resume_Audio.htm",
          "blurb": "This action can be used to resume a previously paused sound. This can be used on any sound that has been paused using Pause Audio or Pause All Audio, and will have no effect on those sounds that have not been paused previously."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Resume Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Resume Time Source",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Resume_Time_Source.htm",
          "blurb": "This action resumes the given Time Source and its children. It must have been previously paused using Pause Time Source."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Return",
      "type": "key",
      "topics": [
        {
          "name": "Return",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Return.htm",
          "blurb": "This action is for use when creating Action Block Functions and is used to return a value to the instance calling the script. The return value can be anything that a variable can hold - like a string, a numeric value, a pointer or a resource ID - or it can be a variable itself. Note that when we call the return action in a function, the function will be exited - returning the given value - and no further actions after the return will be called,\nalthough if you have actions in the event after you call the function, these will still be run."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Reverse",
      "type": "key",
      "topics": [
        {
          "name": "Reverse",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Reverse.htm",
          "blurb": "This action is used to reverse certain values related to direction and movement. The available options are:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Save Buffer",
      "type": "key",
      "topics": [
        {
          "name": "Save Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Save_Buffer.htm",
          "blurb": "With this action you can save a file containing the data from a buffer. You supply the unique buffer ID (as returned when you created the buffer with Create Buffer) and give a name for the file (as a string, with the extension of your choice) and the buffer will be written out to this file ready to be loaded again using Load Buffer."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Save Game",
      "type": "key",
      "topics": [
        {
          "name": "Save Game",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Game/Save_Game.htm",
          "blurb": "This action will do a basic save of the game to a given file. You give a filename (as a string and including the extension) and the action will perform a limited save out of the current game state. It's important to understand that the action is designed to take a \"snapshot\" of the current game state and is for use more as a checkpoint system than a universal save system, since it does not save any of the dynamic resources (like Data Structures or Particles). As such the action should be used very carefully so as not to get errors or memory leaks. For a more comprehensive approach to saving your game data, see the File Actions."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Seconds to BPM",
      "type": "key",
      "topics": [
        {
          "name": "Seconds to BPM",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Seconds_to_BPM.htm",
          "blurb": "This action takes the length of a beat in seconds, and returns a beats-per-minute value."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Seek Buffer",
      "type": "key",
      "topics": [
        {
          "name": "Seek Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Seek_Buffer.htm",
          "blurb": "This action can be used to move (seek) to a position within a buffer. You supply the unique buffer ID value as returned by the action Create Buffer and then the offset value in bytes to move to. The offset value will be applied from the start of the buffer, so calling this function will move the read/write position to the start of the the buffer then move the number of bytes given along and position the new read/write position there. However, if you flag\nthe offset as relative, it will move the read/write position forward (or backwards if the offset is a negative value) from the current position."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Alarm",
      "type": "key",
      "topics": [
        {
          "name": "Set Alarm",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Alarm.htm",
          "blurb": "This action block sets a given alarm to countdown, and when the alarm reaches zero the associated Alarm Event will be triggered. You supply the alarm number from 0 to 11, and then the value to set the alarm to. The value used is the number of \"game steps\" that you want to pass before the alarm event is triggered, and you can set this to be relative to the current alarm value (adding or subtracting to the current\nvalue). Note that the value must be an integer value, and you can set it to -1 to stop the alarm. Note that when an alarm counts down, the event is run when it reaches 0, but the alarm then counts down to -1 to show that it has finished. Setting an\nalarm to 0 will not run the event, since it will then count down to -1 next step, so to run an alarm immediately it should be set to 1. Note that you can set additional alarms in the same action by clicking the plus icon  beside the action."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Animation Speed",
      "type": "key",
      "topics": [
        {
          "name": "Set Animation Speed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Animation_Speed.htm",
          "blurb": "This action block sets the image_speed (animation speed) for the sprite assigned to the instance. You set the ideal frames per second in the Sprite Editor and then you can use this value to modify it. The default animation speed is set to 1, meaning that the game will try to maintain the number of frames per second that you have defined for the sprite, but you can use values greater than 1 to animate faster (frames may be skipped),\nor decimal values to animate slower (frames will be shown over various steps) or even negative values to reverse the speed of the animation."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Audio Pitch",
      "type": "key",
      "topics": [
        {
          "name": "Set Audio Pitch",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Set_Audio_Pitch.htm",
          "blurb": "This action can be used to set the pitch of a sound. You supply the sound asset from the Asset Browser, and then give the desired pitch to change it to, and all further instances of that sound which you play will have their pitch changed. This action will not change the pitch of any sound currently playing, however, and should be used before you use the Play Audio action for the sound."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Audio Position",
      "type": "key",
      "topics": [
        {
          "name": "Set Audio Position",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Set_Audio_Position.htm",
          "blurb": "With this action you can set a sound to play at a specific time. You give the sound to play, and the time to start it from, but this action will not play the sound for you, it will simply set the play position for the sound. To use this action you must first set the position then play the sound using the action Play Audio, otherwise you will here no change in position until the next time you play the same sound resource (which will start at the\nnew position). The position is set in seconds - you can use decimal values - and you can get the total sound length using the action Get Audio Length, although if you provide a value greater than the length of the\ndesired sound this will be wrapped so if the sound is 10 seconds long and you give 12 seconds as the start position, the sound will start at 2 second in."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Audio Volume",
      "type": "key",
      "topics": [
        {
          "name": "Set Audio Volume",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Set_Audio_Volume.htm",
          "blurb": "With this action you can set the volume of a given sound. You select the sound from the asset explorer and then set the volume value. The volume can be between 0 (silent) and 1 (full volume) and the scale is linear, such that a value of 0.5 would be half volume. Note that this action will affect all instances of the sound that are playing currently in the room, and will affect all future instances of the sound played."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Direction Fixed",
      "type": "key",
      "topics": [
        {
          "name": "Set Direction Fixed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Set_Direction_Fixed.htm",
          "blurb": "This action is used to set a fixed movement direction. The available directions are indicated by the different buttons in the action block, and clicking on any of them will set that direction. Note that directions in GameMaker are measured in degrees, with right being 0°, up being 90°, left being 180° and down being 270°."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Direction Random",
      "type": "key",
      "topics": [
        {
          "name": "Set Direction Random",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Set_Direction_Random.htm",
          "blurb": "This action is used to set the movement direction of the instance to one or more random directions chosen from the 8 cardinal points. You can click one or more of the 8 directional arrows within the action and the action will choose one of them at random to use as the direction for the instance. If you select none of the arrows then the action will have no effect on the current direction of the instance."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Direction Variable",
      "type": "key",
      "topics": [
        {
          "name": "Set Direction Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Set_Direction_Variable.htm",
          "blurb": "This action is used to set a direction for the instance that is not fixed to 45° increments. You supply the direction value from 0° to 360° - where right is 0°, up is 90°, left is 180° and down is 270° - and you can also set the relative flag to add/subtract the value you give to the current direction."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Draw Alpha",
      "type": "key",
      "topics": [
        {
          "name": "Set Draw Alpha",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Set_Draw_Alpha.htm",
          "blurb": "With this action you can set the alpha to use for any shapes (rectangle/ellipse/line) or for any text that is drawn subsequently. Note that this does not have to be called before every draw action, and can be set once only at the start of the game. Alpha is the setting that controls how \"transparent\" things will be drawn and is based on a scale of 0 to 1, where 0 is fully transparent and 1 is fully opaque."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Draw Colour",
      "type": "key",
      "topics": [
        {
          "name": "Set Draw Colour",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Set_Draw_Colour.htm",
          "blurb": "With this action you can set the colour to use for any shapes (rectangle/ellipse/line) or for any text that is drawn subsequently. Note that this does not have to be called before every draw action, and can be set once only at the start of the game. For example, if all your text is going to be yellow, you can call this action in the Create Event of the first room of the game, and all text (and shapes) will then be drawn yellow from then onwards. However if you need to use multiple different colours,\nthen you will need to call this before each text or shape that requires a different colour."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Emitter Region",
      "type": "key",
      "topics": [
        {
          "name": "Set Emitter Region",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Emitter_Region.htm",
          "blurb": "This action is used to set the region and shape of an emitter within a particle system. You supply the particle system ID that the emitter belongs to (as returned by the action Create Particle System) and then the actual emitter ID (as returned by the action Create Particle Emitter), and then give a shape for the emitter to take within the given bounding box values. The possible emitter shapes are:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Font",
      "type": "key",
      "topics": [
        {
          "name": "Set Font",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Set_Font.htm",
          "blurb": "With this action you can set the font to use for all subsequent draw text actions. Clicking the dialogue will open the following window where you can then select the font that you wish to use:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Friction",
      "type": "key",
      "topics": [
        {
          "name": "Set Friction",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Set_Friction.htm",
          "blurb": "This action is used to set the \"friction\" for the instance. Friction simply means that a specific amount will be deducted from the speed vector each game frame, where you specify the amount to deduct. Usually smaller values work best, like 0.2, but the actual amount will depend on the setup of your project. If you set the relative flag, then the amount given will be added to the current friction value instead of setting it."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Gamepad Axis Deadzone",
      "type": "key",
      "topics": [
        {
          "name": "Set Gamepad Axis Deadzone",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Set_Gamepad_Axis_Deadzone.htm",
          "blurb": "This action can be used to set the \"dead zone\" of the gamepad stick axis. You specify the gamepad index to set, and then set a value from 0 to 1 and if the input amount is lower than the given value, the gamepad stick axis is considered to be at 0. Note that this is a global setting that will affect all axis of the stick connected."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Global Variable",
      "type": "key",
      "topics": [
        {
          "name": "Set Global Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Set_Global_Variable.htm",
          "blurb": "This action is used to either assign a global variable a value (creating it in the process) or for changing the value of an existing global variable. Global variables are variables that \"belong\" to no specific instance, but rather the whole project, and as such can be accessed and changed by any instance, script or code. For more advanced information on global variables please see here."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Gravity Direction",
      "type": "key",
      "topics": [
        {
          "name": "Set Gravity Direction",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Set_Gravity_Direction.htm",
          "blurb": "This action is used to set the direction of the built in gravity variable. Each instance can have it's own gravity effect, and if the gravity value is set to anything other than zero, then the instance will be \"pulled\" in the direction set by this action. You can set a direction between 0° and 360° where right is 0°, up is 90°, left is 180° and down is 270°. Note that you can set this to be relative to the current gravity value, so whatever you input will be added/subtracted\nfrom that."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Gravity Force",
      "type": "key",
      "topics": [
        {
          "name": "Set Gravity Force",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Set_Gravity_Force.htm",
          "blurb": "This action is used to set the force of gravity acting on an instance. Each instance can have a different gravity force (and direction) independently of all others. The force applied is a value in pixels per game frame, and is cumulative, ie: it is added on each step, so if you have a speed of 2 and a gravity of 1, speed will increment by 1 each step, meaning that normally you'll want very low values here. Note that you can input negative values for gravity and the instance will be \"pulled\"\nin the opposite direction to the gravity direction."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Grid Value",
      "type": "key",
      "topics": [
        {
          "name": "Set Grid Value",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Set_Grid_Value.htm",
          "blurb": "With this action you can set a specific cell within the grid data structure to a value. You supply the variable that holds the grid index (as returned by the action Create Grid) and then give the x and y position (the column and row) for the cell to set, and then finally the value for that cell. The value can be any valid data type, but the x and y position must be whole integers within the bounds of the grid."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Health",
      "type": "key",
      "topics": [
        {
          "name": "Set Health",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/Set_Health.htm",
          "blurb": "With this action you can create or set an instance variable for health. You supply the value to either set the health variable to or to add to the health variable (if you tick the relative checkbox then the value will be added to the current \"health\" value). Note that if you wish to use the Draw Instance Healthbar action then this value should be between 0 and 100, otherwise it can be any amount you require. Also note that unlike\nregular instance variables the variable name for \"health\" is stored internally so to retrieve the score value you need to use the action Get Health."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Instance Alpha",
      "type": "key",
      "topics": [
        {
          "name": "Set Instance Alpha",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Alpha.htm",
          "blurb": "This action block sets the image_alpha value for the instance. The image alpha is the \"transparency\" value for drawing any sprite assigned to the instance and has a value between 0 and 1, where 0 would be fully transparent and 1 would be fully opaque. Note that if the sprite has transparent or semi-transparent pixels, then their transparency will be scaled by the amount, so if you have some 50% transparent pixels in the sprite and set the instance alpha to 0.5, the final alpha\nfor the transparent pixels would be 25%. You can set this value to be a relative amount"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Instance Colour",
      "type": "key",
      "topics": [
        {
          "name": "Set Instance Colour",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Colour.htm",
          "blurb": "This action block sets the image_blend colour for \"blending\" with the instance sprite. The default value is the hex code $FFFFFFFF (which represents the colour white using ARGB format) and this will draw the sprite using no blending and full alpha. Any other value (including internal colour constants like c_red, or c_aqua) will blend the specified colour with the original sprite as well as set the image_alpha component for the instance, but only when the Use Alpha checkbox is ticked. This will overwrite any alpha value set previously using the action Set Instance Alpha."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Instance Rotation",
      "type": "key",
      "topics": [
        {
          "name": "Set Instance Rotation",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Rotation.htm",
          "blurb": "This action block sets the image_angle (rotation) of the instance. The angle is measured in degrees, with the right being 0°, up being 90°, left being 180° and down being 270°. Set this variable to 0 to reset the instance, meaning that it will draw any sprite assigned to as it was defined in the sprite editor. Please note that for changes in this action to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn\nusing Draw Self action."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Instance Scale",
      "type": "key",
      "topics": [
        {
          "name": "Set Instance Scale",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Scale.htm",
          "blurb": "This action block sets the image_xscale and image_yscale values for the instance. The input values here are modifiers which will be applied to the sprite assigned to the instance, where a scale of 1 (the default value) indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sprite), and larger values will scale up. You can use negative values to flip the sprite and scale it unless the value used is exactly -1 (in which case the\nsprite is just flipped or mirrored about its origin with no scaling). You can choose to set the horizontal or vertical scale relative to the current values, in which case you will be adding or subtracting the new value from the current scale values."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Instance Timeline",
      "type": "key",
      "topics": [
        {
          "name": "Set Instance Timeline",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Timelines/Set_Instance_Timeline.htm",
          "blurb": "This action assigns a timeline from the Asset Browser to the instance. You give the timeline to assign , and then you can choose to have the timeline loop when it reaches the last moment (the next frame after the last moment is run will loop back to the first moment of the timeline again) as well as whether to start the timeline immediately or not. If you do not start the timeline immediately you can use the action Set Timeline State to start it later in another\nevent or script."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Instance Variable",
      "type": "key",
      "topics": [
        {
          "name": "Set Instance Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Variable.htm",
          "blurb": "With this action you can set one of the built in variables. All instances of all objects have a number of variables already created within them to hold essential information like the current x/y position, the speed, the direction, visibility and many other things. The instance variables that you can use are:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Lives",
      "type": "key",
      "topics": [
        {
          "name": "Set Lives",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/Set_Lives.htm",
          "blurb": "With this action you can create or set an instance variable for lives. You supply the value to either set the lives variable to or to add to the lives variable (if you tick the relative checkbox then the value will be added to the current \"lives\" value). Note that unlike regular instance variables the variable name for \"lives\" is stored internally so to retrieve the score value you need to use the action Get Lives."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Map Value",
      "type": "key",
      "topics": [
        {
          "name": "Set Map Value",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Set_Map_Value.htm",
          "blurb": "With this action you can add a key/value pair into the map data structure. You supply the variable that holds the map index (as returned by the action Create Map) and then give a \"key\" (which is the identifier within the map for a value), and then the \"value\" to be associated with that key. Both keys can be either integer values (like 0, 200, 36712, etc...) or strings (like \"Name\", \"Shield\" etc...), but the value can be any\nvalid data type."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Master Volume",
      "type": "key",
      "topics": [
        {
          "name": "Set Master Volume",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Set_Master_Volume.htm",
          "blurb": "With this action you can set the volume for the whole sound system. The volume value you give can be between 0 (silent) and 1 (full volume) and the scale is linear, such that a value of 0.5 would be half volume. Note that this action will affect all instances of all sounds that are playing currently in the room, and will affect all future instances of all sounds played. This action is also independent of the volume set for any individual sound, so if you have a sound set to play at 0.5 volume\nand then set the master volume to 0.5, the sound will play at 0.25 volume."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particle Alpha",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Alpha",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Alpha.htm",
          "blurb": "This action will set the alpha for when you create the particle as well as the alpha over its lifetime. You first specify the particle type ID value (which should be the same as the value returned when you created the particle using the Create Particle Type action) and then you can set the alpha values to use."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particle Colour",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Colour",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Colour.htm",
          "blurb": "This action will set the colour or colours to use when your sprite is created and over its lifetime. You first specify the particle type ID value (which should be the same as the value returned when you created the particle using the Create Particle Type action) and then you can set the colours to use."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particle Gravity",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Gravity",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Gravity.htm",
          "blurb": "This action will simulate the effect of gravity on all particles of the given type. You first specify the particle type ID value (which should be the same as the value used when you created the particle using the Create Particle Type action) and then you can set the gravity force and the direction. Force is a cumulative value and will be added on to the speed vector each game frame, so a gravity of 1 will add one to the speed value each game frame, while the direction value is simply the direction in which gravity should \"pull\" the particle. Note that for both force and direction you can use negative values, and that direction in GameMaker is calculated with 0° to the right, 90° to the top,\n180° to the left and 270° to the bottom."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particle Life",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Life",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Life.htm",
          "blurb": "This action will set the lifespan of the given particle type. You first specify the particle type ID value (which is the value returned when you created the particle using the Create Particle Type action) and then you can set the minimum and maximum lifespan of the particle in game frames. For example, if your game has a frames per second of 60, then setting both the lifespan values here to 60 will mean that the particles will last 1 second on screen before\ndisappearing. If you use two different values then each particle spawned will have a random lifespan set within the given minimum and maximum. Note that all values should be positive integers."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particle Orientation",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Orientation",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Orientation.htm",
          "blurb": "This action is used to set the particle orientation - the angle at which the particle images will be drawn - which can be static or set to increase / decrease over time. You supply the unique ID value for the type to set the size of (as returned when you created the type with the action Create Particle Type) and then give a range of initial starting orientations, then the increase amount and finally the \"wiggle\". The orientation a particle is created\nat is calculated such that 0 is right, 90 is up, 180 is left and 270 is down, so a minimum setting of 0 and a maximum setting of 360 will emit particles where each one will be rotated by a random amount around 360° (note that this does not affect particle direction)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particle Shape",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Shape",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Shape.htm",
          "blurb": "This action can be used to set the built in sprite shape that a particle should use when drawing. You supply the unique ID value for the type to set the shape of (as returned when you created the type with the action Create Particle Type) and the shape to use. Particle shapes are simply white sprites that have been created for GameMaker to use specifically as particles and consist of the following forms:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particle Size",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Size",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Size.htm",
          "blurb": "This action is used to set the particle size, which can be static or set to increment / decrement over time. You supply the unique ID value for the type to set the size of (as returned when you created the type with the action Create Particle Type) and then give a range of initial starting sizes, then the increase amount and finally the \"wiggle\". The size a particle is created at is a scalar value, where 1 is the same size as the base particle image, 0.5 would be half the size of the\nbase image and a value of 2 would be double. If the minimum and maximum sizes are not the same, then initial size for any particle created will be a random value between them."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particle Sprite",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Sprite",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Sprite.htm",
          "blurb": "This action can be used to set the sprite that a particle can use when drawing. You supply the unique ID value for the type to set the sprite of (as returned when you created the type with the action Create Particle Type) and the sprite resource to use. If the sprite has sub-images, then the particle will animate through the frames at the speed set in the Image Editor for the sprite. Also note that if you set a colour value for the particle (using the Set Particle Colour action) then this colour will be blended with the sprite used, much like setting the image blend on an instance will blend a colour with the instance sprite (use white for no blending)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Particler Direction",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Direction",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Direction.htm",
          "blurb": "This action is used to set the particle direction, which can be static or set to increase / decrease over time. You supply the unique ID value for the type to set the size of (as returned when you created the type with the action Create Particle Type) and then give a range of initial starting directions, then the increase amount and finally the \"wiggle\". The direction a particle is created at is calculated such that 0 is right, 90 is up, 180 is left and 270 is down, so a minimum setting\nof -45 and a maximum setting of 45 will emit particles only moving to the right, for example."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Path Follow Speed",
      "type": "key",
      "topics": [
        {
          "name": "Set Path Follow Speed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Paths/Set_Path_Follow_Speed.htm",
          "blurb": "This action will set the speed, in pixels per game frame, that an instance should follow a path (note that you must have called the Start Following Path action to assign a path to the instance for this to have any effect). You can use negative values to signify that the instance should follow the path in reverse and it's worth noting that the speed you set here can be modified by the speed modifier set in the path editor for each path point, so if you\nset a path speed to 2 and in the path one of the points has a speed modifier of 200% the actual pixels per game frame speed at that point will be 4."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Point Direction",
      "type": "key",
      "topics": [
        {
          "name": "Set Point Direction",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Set_Point_Direction.htm",
          "blurb": "This action is used to set a direction from a vector formed by the current position of the instance and the position given. You supply the x and y position to \"point\" at - these can be flagged as relative to the instance position - and the direction from the instance to that point will be used for the instance."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Position Along Path",
      "type": "key",
      "topics": [
        {
          "name": "Set Position Along Path",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Paths/Set_Position_Along_Path.htm",
          "blurb": "This action will set the position of an instance along a path. The value is normalised from 0 - 1, so if you set it to, for example, 0.5, the instance will be moved to exactly the middle of the path. Note that you must have called the Start Following Path action to assign a path to the instance for this to have any effect."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Score",
      "type": "key",
      "topics": [
        {
          "name": "Set Score",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/Set_Score.htm",
          "blurb": "With this action you can create or set an instance variable for score. You supply the value to either set the score variable to or to add to the score variable (if you tick the relative checkbox then the value will be added to the current \"score\" value). Note that unlike regular instance variables the variable name for \"score\" is stored internally so to retrieve the score value you need to use the action Get Score."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Secondary Particles",
      "type": "key",
      "topics": [
        {
          "name": "Set Secondary Particles",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Secondary_Particles.htm",
          "blurb": "This action permits you to use a second particle type along with the primary particle. You give the primary particle type ID value (which should be the same as the value used when you created the particle using the Create Particle Type action) and then you can choose to have it emit a secondary particle type each game frame that it exists and/or at the end of each primary particle's lifespan. You must give another particle ID value for the \"Secondary\" and then a number to be created in the \"Count\"."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Sequence Head",
      "type": "key",
      "topics": [
        {
          "name": "Set Sequence Head",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Set_Sequence_Head.htm",
          "blurb": "With this action you can set the playhead position of the given sequence element in the room to a specified frame. You supply the sequence element ID (as returned by the action Create Sequence) and the new playhead position in frames. For information on the playhead, see Using The Dope Sheet."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Sequence Position",
      "type": "key",
      "topics": [
        {
          "name": "Set Sequence Position ",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Set_Sequence_Position.htm",
          "blurb": "With this action you can set the position for the given sequence element in the room. You supply the sequence element ID (as returned by the action Create Sequence), and then the new X and Y position. If you tick the \"relative\" checkbox, then the values given for X and Y will be added to the current sequence position, otherwise they will be an absolute position."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Speed",
      "type": "key",
      "topics": [
        {
          "name": "Set Speed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Set_Speed.htm",
          "blurb": "This action is used to set the movement speed of the instance. The speed as calculated as the number of pixels that an instance has to move in a single game frame (step). By default the speed value will be added to the direction vector - so if you set speed to 2 and the direction to 45° the instance will move up and right 2 pixels every game frame - but you can also click on the direction field and select either Horizontal or Vertical speed."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Sprite",
      "type": "key",
      "topics": [
        {
          "name": "Set Sprite",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Sprite.htm",
          "blurb": "This action block sets the sprite_index of the instance to another sprite from the Asset Browser. You select the sprite to change to, and then give the image (animation frame) to show. Note that if you don't want the sprite to animate after setting the frame, you'll need to use the Set Animation Speed action and set it to 0, or if you want the sprite to continue animating then set the value to use the image_index built-in variable variable\ninstead."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Text Alignment",
      "type": "key",
      "topics": [
        {
          "name": "Set Text Alignment",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Set_Text_Alignment.htm",
          "blurb": "This action will set the font alignment for all subsequent draw text actions. You can set the horizontal alignment to be the left, center or right, and the vertical alignment to be top, middle or bottom and the text will be aligned relative to the x/y position of the draw action, as shown in the images below:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Tile At Pixel",
      "type": "key",
      "topics": [
        {
          "name": "Set Tile Index At Pixel",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Set_Tile_Index_At_Pixel.htm",
          "blurb": " "
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Tile Data At Pixel",
      "type": "key",
      "topics": [
        {
          "name": "Set Tile Data At Pixel",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Set_Tile_Data_At_Pixel.htm",
          "blurb": "With this action you can set the tile data for a tile cell found at a specific position on a tile map layer. The tile data is simply a value that reflects the index of the tile along with the flip, mirror, and rotate values, as well as any custom tile masks that you have used. With this action you first supply the layer to target using the name of the layer (a string) as defined in the room editor, and then the x and y axis in the room\nto set the tile data for. Note that the tile data will be set for the tile map \"cell\" in which the given position lands. For example, if your tile set tiles are 16x16, then the tile map layer will hold tiles in cells of 16x16 pixels, so\nif you use this action to target the room position (8, 8), you will be changing the tile in the cell (0, 0) of the tile map."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Tile Data In Cell",
      "type": "key",
      "topics": [
        {
          "name": "Set Tile Data In Cell",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Set_Tile_Data_In_Cell.htm",
          "blurb": "With this action you can set the tile data for a tile cell on a tile map layer. The tile data is simply a value that reflects the index of the tile along with the flip, mirror, and rotate values, as well as any custom tile masks that you have used. With this action you first supply the layer to target using the name of the layer (a string) as defined in the room editor, and then the column and row on the tile map layer to set the tile-data\nfor. The \"cell\" is the area on the tile map grid that holds the tile you want to set the data for, so if your tiles are 16x16, for example, and the room is 1024x768 the tile map will have 64 columns and 48 rows."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Tile Data Transform",
      "type": "key",
      "topics": [
        {
          "name": "Set Tile Data Transform",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Set_Tile_Data_Transform.htm",
          "blurb": "With this action you can change one of three tile transforms in the tile data. You supply the variable that holds the tile data for the tile, then select the transform to change. Clicking the \"Apply\" check-box will apply that transform and un-checking it will remove it. The tile data is simply a value that reflects the index of the tile along with the transforms applied as well as any custom tile masks that you have used, and this action permits you to change three of those values:\nFlip, mirror and rotate. Note that you will normally want to get the tile data first using either Get Tile Data In Cell or Get Tile Data At Pixel, then apply the required\ntransform(s) and then set the tile in the tile map again using Set Tile Data In Cell or Set Tile Data At Pixel, since this action only sets a value but does not apply it to the tile it was taken from.\nFor more information on tile data, please see the GML section on Tile Map Functions."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Tile Index In Cell",
      "type": "key",
      "topics": [
        {
          "name": "Set Tile Index In Cell",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Set_Tile_Index_In_Cell.htm",
          "blurb": "With this action you can set a tile on a given layer to a new index. The layer is specified from the layer name given (a string, as used to name the layer in the Room Editor), and then you give the row and column of the cell within the layer to get the tile to set. Finally you supply the tile index to set the tile to (tiles are indexed from left to right from top to bottom, with 0 at the top left). Note you can always set the tile index to 0 to clear the tile."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Tile Set",
      "type": "key",
      "topics": [
        {
          "name": "Set Tile Set",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Set_Tile_Set.htm",
          "blurb": "With this action you can set a layer to use different tile sets from those created in the Asset Browser. You give the name of the layer (a string, as defined in the Room Editor), and then the tile set resource to use, and all tiles in the room on that layer will be drawn with the new tile set."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Timeline Moment",
      "type": "key",
      "topics": [
        {
          "name": "Set Timeline Moment",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Timelines/Set_Timeline_Moment.htm",
          "blurb": "This action be used to skip a timeline from the current moment to a new one. Timelines move forward through different \"moments\", and each moment typically takes up one game frame (like the Step Event of an object). Once a timeline has started it will progress through the moments until it reaches the end at which point it will either loop back to the first moment in the timeline or stop altogether. However, this linear approach to timelines can be modified using this action to set a different\nmoment at any time, permitting you to create your own timeline loops, or to skip sections of a timeline under certain circumstances, etc... With this action you simply set the moment to jump to within the timeline and the next game frame will run\nthat moment (note that you need to have assigned a timeline to the instance using the action Set Instance Timeline)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Timeline Speed",
      "type": "key",
      "topics": [
        {
          "name": "Set Timeline Speed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Timelines/Set_Timeline_Speed.htm",
          "blurb": "This action can be used to set the speed at which a timeline will move through the moments it contains. Normally, in each game frame you'd want the position in the timeline to be increased by 1, however you can change this amount by setting this action to a different value. The value you choose will be treated as a multiplier so a value of 2, for example, will make the timeline run at twice the speed, while a value of 0.5 would make it run at half the speed.\nWhat this means for the moments is that if the value is greater than one, then several moments could occur within the same game frame (no moments are ever skipped), and if the speed is less than one, then after a moment has run, there will be frames\nwhere nothing happens until the next moment runs - if you set the timeline speed to 0.1, for example, you will get a moment on one game frame, then 9 game frames with no moments, and on the tenth game frame the next moment will be run."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Timeline State",
      "type": "key",
      "topics": [
        {
          "name": "Set Timeline State",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Timelines/Set_Timeline_State.htm",
          "blurb": "This action can be used to start, stop, pause or resume a timeline. The timeline must first have been set for the instance using the action Set Instance Timeline, and then you can use this action at any time to change its running state from the following options"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set View Variable",
      "type": "key",
      "topics": [
        {
          "name": "Set View Variable",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Cameras/Set_View_Variable.htm",
          "blurb": "This action permits you to set certain built in variables related to how the view port will display camera views of the room. You select the view port variable to edit, then give the view port to target (from 0 to 7) and finally the new value for the variable. The view port is the area of the screen that will be used to draw a given camera view (as set up in the room editor), and the different variables that you are able to set in this way are outlined in the table below:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Set Window State",
      "type": "key",
      "topics": [
        {
          "name": "Set Window State",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Miscellaneous/Set_Window_State.htm",
          "blurb": "With this action you can set the state of the game window to either fullscreen or windowed. There are three options here:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Show Debug Message",
      "type": "key",
      "topics": [
        {
          "name": "Show Debug Message",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Miscellaneous/Show_Debug_Message.htm",
          "blurb": "With this action you can send a debug message to the Compiler Output. This message can be either a string or a real number, but if you wish to use both then the number must be converted to a string (see the action Number To String). Note that you can output multiple messages using this action by clicking the  icon to expand the action with further output fields."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Show Virtual Keyboard",
      "type": "key",
      "topics": [
        {
          "name": "Show Virtual Keyboard",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/Show_Virtual_Keyboard.htm",
          "blurb": "This action can be used to show the virtual keyboard on the device running the game. When you call this action you will be asked to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Snap Position",
      "type": "key",
      "topics": [
        {
          "name": "Snap Position",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Snap_Position.htm",
          "blurb": "This action is used to \"snap\" an instance to a specific grid coordinate position. You supply the size of the grid \"cell\" and the instance will be snapped to that grid, for example, if you set the grid snap values for horizontal and vertical to 8, and the instance is at (4, 6), then it will be snapped to the position (0, 8) - essentially the current position is rounded to the nearest value divisible by the horizontal and vertical snap settings where the grid cells start at the\ntop left corner of the room (0, 0). The default values are set to a snap of (32, 32) but you can change them to whatever positive integer value you require."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Start Following Path",
      "type": "key",
      "topics": [
        {
          "name": "Start Following Path",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Paths/Start_Following_Path.htm",
          "blurb": "This action will start an instance following along a path that has been created in the Asset Browser. You would then use this action to tell your instance which path to follow, what speed to follow the path (measured in pixels per game frame), how to behave when it reaches the end of the path, and whether to follow the absolute or relative path position. When setting the speed you can use negative values to signify that the instance should follow the path in reverse and it's worth noting that\nthe speed you set here can be modified by the speed modifier set in the path editor for each path point, so if you set the path speed to 2 and in the path one of the points has a speed modifier of 200%, then the actual speed at that point will be\n4 pixels per game frame."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Start Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Start Time Source",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Start_Time_Source.htm",
          "blurb": "This action is used to start a Time Source after it was created, paused or stopped."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Stop All Audio",
      "type": "key",
      "topics": [
        {
          "name": "Stop All Audio",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Stop_All_Audio.htm",
          "blurb": "This action can be used to stop all audio that is currently playing (note that even if audio is flagged as paused it will be stopped with this function and you cannot resume it again later)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Stop Audio",
      "type": "key",
      "topics": [
        {
          "name": "Stop Audio",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Stop_Audio.htm",
          "blurb": "This action can be used to stop a sound from playing. You select the sound from the asset explorer and all instances of that sound will stop playing (so if you have set the same sound to play in three different events then all of them will stop)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Stop Following Path",
      "type": "key",
      "topics": [
        {
          "name": "Stop Following Path",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Paths/Stop_Following_Path.htm",
          "blurb": "This action will end movement along the current path that the instance is following."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Stop Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Stop Time Source",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Time_Sources/Stop_Time_Source.htm",
          "blurb": "This action stops the given Time Source. It can later be started again manually."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - String To Number",
      "type": "key",
      "topics": [
        {
          "name": "String To Number",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/String_To_Number.htm",
          "blurb": "This action can convert a string into a number. You provide the string to change and then give a target variable to return the real number back to (this variable can be flagged as a temporary local variable). Note that if the string has any characters other than numbers and a decimal point, it will not be converted, although if the string starts with a number then those will be converted and the rest of the string excluded. It is important to note that when passing decimals into this\naction, the returned string will be rounded to two decimal places only. Below is a table of input values and what you'd expect returned"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Switch",
      "type": "key",
      "topics": [
        {
          "name": "Switch",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Switch/Switch.htm",
          "blurb": "This action will create a new Switch statement to which you can then add further cases for evaluation. You give the value that is to be used for comparing to the cases in the Switch and then add the different Case actions, much as you would add an action to an \"if\", ie: dropping it to the side of the action rather than under it:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Update Particle System",
      "type": "key",
      "topics": [
        {
          "name": "Update Particle System",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Update_Particle_System.htm",
          "blurb": "This action will force the given particle system to update the position, colour, alpha, etc... You supply the unique ID value for the system to update (as returned when you created the system with the action Create Particle System), and each time you call the action the given system will update one game frame, meaning that you can - for example - call this action within a Repeat loop and make the particle system update multiple times in\na single game frame (useful for when you want a level to have any effect that requires particles to be present at the very start, like snow or rain). You can also use this action when the particle system has been paused using the Pause Particle System to manually update the particles in the system."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - While",
      "type": "key",
      "topics": [
        {
          "name": "While",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Loops/While.htm",
          "blurb": "The While action is used to perform loops that only terminate when a specific condition returns true. For example, you can use a variable and set it to false then run the While loop and have it checking this variable, then at some time in the loop you set the variable to true and the loop will terminate. Note that no matter where you set the condition within the while loop, all actions within the loop will be run to the end before the rest of the script\nor event continues, changing the condition does not instantly break out of the loop."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Wrap Around Room",
      "type": "key",
      "topics": [
        {
          "name": "Wrap Around Room",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Wrap_Around_Room.htm",
          "blurb": "With this action you can let an instance wrap around a room, that is, when it leaves on one side of the room it reappears at the other side. This action is normally used in the Other - Outside Room Event or the Step Event and you can indicate whether to wrap only horizontally, only vertically, or in both directions, as well as set a margin. The margin value is the number of pixels outside of the room area that the instance must have moved before it will be wrapped around to the other side. Note that the instance must have a speed for wrapping to work, because the direction of wrapping is based on the direction of the motion."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Write Buffer",
      "type": "key",
      "topics": [
        {
          "name": "Write Buffer",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Write_Buffer.htm",
          "blurb": "This action can be used to write data to a buffer. You supply the unique buffer ID to write to (as returned by the action Create Buffer) and then the value to write, which can be either a real or a string, but note that all values are stored as strings so when you read from the buffer (using Read Buffer) you may need to use one of the Data Type Actions to convert it from a string\nback to the original value. Keep in mind too that buffers are read and written to sequentially and so writing to a buffer will move the \"seek\" position along one, meaning that to write various pieces of data you simply call this action\nthe number of times required."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Action - Write To Ini File",
      "type": "key",
      "topics": [
        {
          "name": "Write To Ini File",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/Write_To_Ini_File.htm",
          "blurb": "With this action you can write a numeric value or a string to an Ini file. You must previously have opened the Ini file for reading/writing using the action Open Ini File, and then with this action you give the type of data to write (either a real number or a string enclosed in \"\"), as well as the section header, the key within that section and the value for the key. To help visualise the structure of an Ini file, see this image:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Actions",
      "type": "key",
      "topics": [
        {
          "name": "GML Visual​​​​​​​ Reference",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/DnD_Reference.htm",
          "blurb": "This section of the manual lists all the different actions available to you when using GML Visual to program your game. Below you can find each of the different Action Libraries available to you from the object GML Visual Toolbox, and within each library section the individual actions are explained, along with examples of use."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Action Block Script Functions",
      "type": "key",
      "topics": [
        {
          "name": "Action Block Script Functions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm",
          "blurb": "One of the most important assets in the Asset Browser is the Script asset. Scripts are special assets in that they are essentially \"containers\" for user defined functions and are not themselves actually called by you directly in your games. All scripts are global in scope and will be run automatically by GameMaker when your game starts, so you can use them to define global variables and functions that you want to use throughout your game."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Applying Actions To Other Instances",
      "type": "key",
      "topics": [
        {
          "name": "Applying Actions To Other Instances",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Overview/Applying_Actions_To_Other_Instances.htm",
          "blurb": "Most actions in the GML Visual libraries have an option to apply the action in different ways. This is called setting the action scope and it can be one of several things:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Audio Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Audio Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Audio/Audio_Actions.htm",
          "blurb": "GameMaker has a complete audio engine that is based on the *.ogg, *.mp3 and *.wav sound formats. Sounds of these types added to the IDE can then be used in your game using the basic audio actions shown below. For things more complex than basic sound effects or playing a single\npiece of music you can refer to the advanced audio functions dedicated to streaming audio, positioning audio - to give 3D sound - and grouping audio."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Buffer Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Buffer Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Buffers/Buffer_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Camera Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Camera Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Cameras/Camera_Actions.htm",
          "blurb": "The Cameras library has actions that relate to setting the different variables associated with the camera view. A camera is a point in the room from which the room is viewed, and the camera view is what the camera sees (and what is drawn to the screen). These actions permit you to manipulate the different parts of the camera view and define areas of the room to show through the view position or view size as well as a few other basic functions."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Changing GML Visual To Code",
      "type": "key",
      "topics": [
        {
          "name": "Changing GML Visual To Code",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Overview/Changing_DnD_To_Code.htm",
          "blurb": "Another feature of GML Visual is that you can convert it into GML Code, and in this way see what exactly is going on behind the scenes when you use actions. Before actually changing the actions into code however, you can first Preview them by using the right mouse button  menu option Live Preview:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Collision Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Collision Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Collisions/Collision_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Common Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Common Actions Library",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Common/Common_Actions_Library.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Constructing Action Block Code",
      "type": "key",
      "topics": [
        {
          "name": "Constructing Action Block Code",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Overview/Constructing_Action_Block_Code.htm",
          "blurb": "To add behaviours to objects you can construct your code using Actions from the different libraries available to you from the Action Toolbox. To start with you'll need to make a new GML Visual project and then make a new object (you can assign a sprite to the object too if required). In your new object you can start to add events, and in the events add your GML Visual code actions."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Data Structure Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Data Structure Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Structures/Data_Structure_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Data Types Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Data Type Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Data_Type_Actions.htm",
          "blurb": "GameMaker has a number of different data types, like integers, strings, pointers, etc... and some of those can be converted to others. This section of the manual shows the different actions available for dealing with and converting different data types."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Drawing Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Drawing Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Drawing_Actions.htm",
          "blurb": "The Drawing action library is where you can find the actions required to draw sprites, text or shapes as well as set certain draw properties. Most of these actions are only for use in the various Draw Events of an object, and may not work if used outside\nof the Draw Event. The exceptions to this are the Set actions, which can be added to any event and will affect all drawing for all instances afterwards."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - File Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "File Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Files/File_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Game Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Game Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Game/Game_Actions.htm",
          "blurb": "The Game action library is related to things that affect the main game loop and has the following actions:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Gamepad Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
          "blurb": "GameMaker has a number of dedicated actions that can be used to detect both analog and digital controls from multiple connected game pads. These actions require you to specify a gamepad index value, which is a number (counting from 0) that represents the gamepad being selected. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered (however to deal with this you may need to use code)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Instance Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Instance Actions Library",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance/Instance_Actions_Library.htm",
          "blurb": "The Instance action library is where you can create and destroy instances as well as change their properties and use their alarms. For more information on instances (and objects) please see here."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Instance Variable Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Instance Variable Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Instance_Vars/Instance_Variable_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Loop Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Loop Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Loops/Loop_Actions.htm",
          "blurb": "The Loop action library contains those actions that are required for creating loops in your game action code. A loop is simply a way of iterating over the same set of actions 1 or more times depending on certain conditions and are handy in any situation where you need to repeat the same actions over and over again."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Miscellaneous Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Miscellaneous Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Miscellaneous/Miscellaneous_Actions.htm",
          "blurb": "This action library contains those actions that don't fit into any other library category. The following Miscellaneous actions exist:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Mouse And Keyboard Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Mouse And Keyboard Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Mouse_And_Keyboard/Mouse_And_Keyboard_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Movement Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Movement Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Movement/Movement_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Overview",
      "type": "key",
      "topics": [
        {
          "name": "GML Visual​​​​​​​ Overview",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Overview/DnD_Overview.htm",
          "blurb": "GML Visual is a visual scripting tool that can be used to create your games without actually typing any code. That's not to say that you aren't programming code when you use GML Visual, as you are, only that your code is created and presented in a visual way using \"blocks\" of actions rather than text. Actions are simple expressions or statements that can be \"chained\" together to have an instance of an object do something when placed in a room. For example, you could have an action in a Create Event to move an instance in a random direction, and another action in a Collision Event to make it bounce off the things it collides with (for more information on the different events available and how they work together see the section on Object Events)."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Particle Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Particle Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Particle_Actions.htm",
          "blurb": "For complex things in GameMaker you would normally have an object and then create instances of that object within the room. However, for graphics effects, this can be expensive as every instance comes with a \"cost\" in processing due to the variables it contains and the codes it has in the different events. You can reduce this cost by turning to tiles for drawing your graphics, or even using the asset layer in the room editor, but both of those are generally only used for drawing simple graphics that maintain the same position over time and have few special effects. However, there is one other option for drawing fast yet versatile graphics effects in your games, and that is to use particles."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Path Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Path Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Paths/Path_Actions.htm",
          "blurb": "The Path library has actions for dealing with path resource made in the  Path Editor:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Random Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Random Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Random/Random_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Right Mouse Button Menu Options",
      "type": "key",
      "topics": [
        {
          "name": "Right Mouse Button Menu Options",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Overview/Right_Mouse_Button_Menu_Options.htm",
          "blurb": "When working on your GML Visual code, you can click the right mouse button  on the action, on the workspace, or on the text in the shortlist on the left to open up the Right Mouse button menu:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Room Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Room Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Rooms/Room_Actions.htm",
          "blurb": "The Room library permits you to change and check game rooms, based on the order defined in the Room Manager. Note that all actions which change the room will also trigger the  Other - Room Events\n."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Sequences Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Sequence Actions Library",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Sequences/Sequence_Actions_Library.htm",
          "blurb": "The Sequence action library is where you can create and destroy sequences in the room, as well as play/pause them and get/set information about them. For more information on Sequences, please see here."
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Switch Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Switch Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Switch/Switch_Actions.htm",
          "blurb": "The Switches action library contains those actions that are required for creating switch statements in your game action code. In a number of situations you want to let your instances complete an action depending on a particular value, and while you can do this using a number of consecutive \"if\" statements, this\ncan get messy when the possible choices gets above two or three. In these cases it is better to use the \"switch\" action. A switch action works as follows:"
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Tile Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Tile Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Tiles/Tile_Actions.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "GML Visual Overview - Timeline Actions Library",
      "type": "key",
      "topics": [
        {
          "name": "Timeline Actions",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Timelines/Timeline_Actions.htm",
          "blurb": "Timelines are a powerful mechanism for controlling events in your game, and are based on \"moments\", where a \"moment\" is simply a single game step. These timelines are generally created from the Asset Browser in a similar way to an object, ie: you create a timeline in the Timeline Editor,\nthen in each moment that you require it to perform an action you add some code or a GML Visual action for it to perform."
        }
      ],
      "keys": []
    },
    {
      "name": "gml_pragma",
      "type": "key",
      "topics": [
        {
          "name": "gml_pragma",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/gml_pragma.htm",
          "blurb": "The gml_pragma function affects how the given target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively pre-processed before the game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:",
          "syntax": "gml_pragma(command, [optional...])"
        }
      ],
      "keys": []
    },
    {
      "name": "gml_release_mode",
      "type": "key",
      "topics": [
        {
          "name": "gml_release_mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/gml_release_mode.htm",
          "blurb": "When your game is compiled, it also includes certain internal functions to error check while running. These internal checks cover many aspects of a games code, including ranges, parameters and some general aspects of the internal GML compiler and are what spawn the final error messages in many cases. However this function can be used to switch these internal checks off (ie: remove them completely from the compiled game), giving a speed boost to your final project.",
          "syntax": "gml_release_mode(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_acceleration_x",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_acceleration_y",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_acceleration_z",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_angular_velocity_x",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_angular_velocity_y",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_angular_velocity_z",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_orientation_w",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_orientation_x",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_orientation_y",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axis_orientation_z",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axislh",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axislv",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axisrh",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_axisrv",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_face1",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_face2",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_face3",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_face4",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_padd",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_padl",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_padr",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_padu",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_select",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_shoulderl",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_shoulderlb",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_shoulderr",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_shoulderrb",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_start",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_stickl",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gp_stickr",
      "type": "key",
      "topics": [
        {
          "name": "Gamepad Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
          "blurb": "GameMaker has a number of dedicated functions that can be used to detect both analog and digital controls from multiple connected gamepads. These functions work similar to the Device Inputs, in that you can detect up to four different XInput game pads that are connected (and up to 8 DirectInput gamepads) and deal with the input from each one using the same functions. Note that when a gamepad is plugged in to your device (or it is removed) then an asynchronous System Event is triggered where you can deal with the situation using the appropriate functions."
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_alphatestenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_alphatestenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_alphatestenable.htm",
          "blurb": "With this function you can check to see whether alpha testing is enabled (returns true) or not (returns false). For more information on alpha testing, see the function gpu_set_alphatestref().",
          "syntax": "gpu_get_alphatestenable()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_alphatestref",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_alphatestref",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_alphatestref.htm",
          "blurb": "You can use this function to find the current value for the alpha test reference (default is 0, but you can use gpu_set_alphatestref() to set this value to something other than this).",
          "syntax": "gpu_get_alphatestref()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_blendenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendenable.htm",
          "blurb": "This function can be used to retrieve the alpha-blending state. If it returns true then alpha-blending is enabled, and if it returns false it is disabled. By default this is on and so the function will return true",
          "syntax": "gpu_get_blendenable()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_blendmode",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
          "blurb": "This function can be used to retrieve the current blend mode being used for drawing. The returned value will be one of the following constants (the default value is bm_normal):",
          "syntax": "gpu_get_blendmode()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_blendmode_dest",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_dest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_dest()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_blendmode_destalpha",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_destalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm",
          "blurb": "This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_destalpha()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_blendmode_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_blendmode_ext_sepalpha",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm",
          "blurb": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
          "syntax": "gpu_get_blendmode_ext_sepalpha()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_blendmode_src",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_src",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
          "syntax": "gpu_get_blendmode_src()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_blendmode_srcalpha",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_blendmode_srcalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm",
          "blurb": "This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
          "syntax": "gpu_get_blendmode_srcalpha()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_colorwriteenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_colourwriteenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_colourwriteenable.htm",
          "blurb": "This function can be used to retrieve the current colour write-enable values. The function returns a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled). By default all colour writing is set to true:"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_colourwriteenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_colourwriteenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_colourwriteenable.htm",
          "blurb": "This function can be used to retrieve the current colour write-enable values. The function returns a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled). By default all colour writing is set to true:"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_cullmode",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_cullmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_cullmode.htm",
          "blurb": "This function can be used to retrieve the backface culling mode. The returned value will be one of the following constants (the default value is cull_noculling):",
          "syntax": "gpu_get_cullmode()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_fog",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_fog",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_fog.htm",
          "blurb": "This function can be used to retrieve the fog settings. The function returns a 4 element 1D array with the following information:",
          "syntax": "gpu_get_fog()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_state",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_state",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_state.htm",
          "blurb": "This function will get the current GPU state, returning it as a DS Map. This can then be manipulated or even saved, and you can return this map to the GPU using the function gpu_set_state().",
          "syntax": "gpu_get_state()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_max_aniso",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_max_aniso",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_max_aniso.htm",
          "blurb": "With this function you can get the current maximum level of anisotropy when using the tf_anisotropic filter mode (see gpu_get_tex_mip_filter() for more information). The returned value will range between 1 and 16.",
          "syntax": "gpu_get_tex_max_aniso()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_max_aniso_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_max_aniso_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_max_aniso_ext.htm",
          "blurb": "With this function you can get the current maximum level of anisotropy when using the tf_anisotropic filter mode (see gpu_get_tex_mip_filter() for more information) on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return a value within the range of 1 and 16.",
          "syntax": "gpu_get_tex_max_aniso_ext(sampler_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_max_mip",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_max_mip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_max_mip.htm",
          "blurb": "With this function you can get the currently set maximum mipmap level which is to be used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
          "syntax": "gpu_get_tex_max_mip()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_max_mip_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_max_mip_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_max_mip_ext.htm",
          "blurb": "With this function you can get the currently set maximum mipmap level which is to be used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return the current maximum mipmap level, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
          "syntax": "gpu_get_tex_max_mip_ext(sampler_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_min_mip",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_min_mip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_min_mip.htm",
          "blurb": "With this function you can get the minimum mipmap level which is currently used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc...",
          "syntax": "gpu_get_tex_min_mip()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_min_mip_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_min_mip_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_min_mip_ext.htm",
          "blurb": "With this function you can get the minimum mipmap level which is currently used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return a value of 0 for full resolution, 1 for the first mipmap, 2 for the second etc...",
          "syntax": "gpu_get_tex_min_mip_ext(sampler_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_mip_bias",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_bias",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_bias.htm",
          "blurb": "With this function you can retrieve the mipmap bias value, where a value of 0 equals no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make rendered textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this can return negative values too, in which case rendered textures will be sharper over a greater distance the lower the value.",
          "syntax": "gpu_get_tex_mip_bias()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_mip_bias_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_bias_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_bias_ext.htm",
          "blurb": "With this function you can retrieve the mipmap bias value for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return a value of 0.0 for no bias, or a greater value where 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make the shader textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this can return negative values too, in which case shader textures will be sharper over a greater distance the lower the value.",
          "syntax": "gpu_get_tex_mip_bias_ext(sampler_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_mip_enable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable.htm",
          "blurb": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager. The function will return one of the constants listed below, with the default setting being mip_markedonly.",
          "syntax": "gpu_get_tex_mip_enable()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_mip_enable_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_enable_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable_ext.htm",
          "blurb": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the constants listed below.",
          "syntax": "gpu_get_tex_mip_enable_ext(sampler_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_mip_filter",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_filter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter.htm",
          "blurb": "With this function you can get the current mip filter mode. The mode value returned by the function will be one of the constants listed below.",
          "syntax": "gpu_get_tex_mip_filter()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_tex_mip_filter_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_filter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter_ext.htm",
          "blurb": "With this function you can get the current mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the mode value constants listed below.",
          "syntax": "gpu_get_tex_mip_filter_ext(sampler_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_texfilter",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_texfilter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_texfilter.htm",
          "blurb": "With this function you can check to see whether texture filtering (linear interpolation) is enabled (returns true) or not (returns false). For more information on texture filtering, see the function gpu_set_texfilter().",
          "syntax": "gpu_get_texfilter()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_texfilter_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_texfilter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_texfilter_ext.htm",
          "blurb": "With this function you can check to see whether texture interpolation (linear interpolation) is enabled (returns true) or not (returns false) for a given shader sampler texture.",
          "syntax": "gpu_get_texfilter_ext(sampler_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_texrepeat",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_texrepeat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_texrepeat.htm",
          "blurb": "With this function you can check to see whether texture repeating is enabled (returns true) or not (returns false). For more information on texture repeating, see the function gpu_set_texrepeat().",
          "syntax": "gpu_get_texrepeat()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_texrepeat_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_texrepeat_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_texrepeat_ext.htm",
          "blurb": "With this function you can check to see whether texture repeating is enabled (returns true) or not (returns false) for a given shader sampler texture.",
          "syntax": "gpu_get_texrepeat_ext(sampler_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_zfunc",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm",
          "blurb": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_get_zfunc()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_ztestenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_ztestenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_ztestenable.htm",
          "blurb": "This function can be used to retrieve whether z-testing is enabled (the function returns true) or not (the function returns false). The default value is that z-testing is disabled, so the function will return false.",
          "syntax": "gpu_get_ztestenable()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_get_zwriteenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_zwriteenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zwriteenable.htm",
          "blurb": "This function can be used to retrieve whether z-writing is enabled (the function returns true) or not (the function returns false). The default value is that z-writing is enabled, so the function will return true.",
          "syntax": "gpu_get_zwriteenable()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_pop_state",
      "type": "key",
      "topics": [
        {
          "name": "gpu_pop_state",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_pop_state.htm",
          "blurb": "This function pops the previous GPU state from the stack and applies it. See gpu_push_state() for more information.",
          "syntax": "gpu_pop_state()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_push_state",
      "type": "key",
      "topics": [
        {
          "name": "gpu_push_state",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_push_state.htm",
          "blurb": "With this function you can push the current GPU state onto a stack to be used later. You would generally use this if you want to \"save\" the current GPU state (things like blend mode, alpha writing, culling, etc... will all be pushed to the stack), then draw something with different settings, and then reset the GPU stack to what it was before (by calling gpu_pop_state()).",
          "syntax": "gpu_push_state()"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_alphatestenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_alphatestenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm",
          "blurb": "This function will enable or disable alpha testing for your game (by default this is disabled). By switching alpha testing on you can then use the companion function gpu_set_alphatestref() to set the \"cut-off\" value at which all alpha values will be set to 0. The image below shows the difference that can be seen when alpha testing is switched on or off:",
          "syntax": "gpu_set_alphatestenable(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_alphatestref",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_alphatestref",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm",
          "blurb": "This function will set the reference value for the alpha testing (when it has been enabled using the gpu_set_alphatestenable()). This is the \"cut-off\" threshold at which pixels with alpha will not be drawn.",
          "syntax": "gpu_set_alphatestref(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_blendenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_blendenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm",
          "blurb": "This function can be used to toggle alpha-blending on and off. Basically, if you have this set to false, all images being drawn will be drawn 100% opaque, meaning that any transparent, or semi transparent, areas of a sprite or background will be visible as a solid colour. It is a good idea to have alpha blending off whenever possible (especially when developing for mobile devices) as this greatly increases the draw speed.",
          "syntax": "gpu_set_blendenable(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_blendmode",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_blendmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
          "syntax": "gpu_set_blendmode(mode)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_blendmode_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_blendmode_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_blendmode_ext_sepalpha",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_blendmode_ext_sepalpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm",
          "blurb": "When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component."
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_colorwriteenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_colorwriteenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_colourwriteenable.htm",
          "blurb": "With this function you can switch on or off the colour channels and the alpha channel for all further drawing. For example, you can use this function to create alpha-channel only surfaces (switch off the RGB writing before using the surface), or to create special effects while drawing to the screen. The default value for each of the components is true, and can be supplied as either four unique arguments or as a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled):",
          "syntax": "gpu_set_colorwriteenable(red, green, blue, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_colourwriteenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_colorwriteenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_colourwriteenable.htm",
          "blurb": "With this function you can switch on or off the colour channels and the alpha channel for all further drawing. For example, you can use this function to create alpha-channel only surfaces (switch off the RGB writing before using the surface), or to create special effects while drawing to the screen. The default value for each of the components is true, and can be supplied as either four unique arguments or as a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled):",
          "syntax": "gpu_set_colorwriteenable(red, green, blue, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_cullmode",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_cullmode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_cullmode.htm",
          "blurb": "This function can be used to set the backface culling mode. A polygon (primitive) has a front and a back side. The front side is said to be the side where the vertices are defined in counter-clockwise order. Normally both sides are drawn, but if you make a closed shape (like a pyramid) then this is a waste of processing power because the back side of the triangle can never be seen. It's in these cases that you can switch on backface culling, as this saves about half the amount of drawing time, although it means you have the task of defining your polygons in the correct way to prevent issues.",
          "syntax": "gpu_set_cullmode(cullmode)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_fog",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_fog",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_fog.htm",
          "blurb": "This function can be used to enable or disable fog drawing. Fog can be used in 3D games to make instances in the distance look faded or even invisible, which helps in creating atmosphere as well as masking the fact that you are not drawing instances that are far away.",
          "syntax": "gpu_set_fog(enable, colour, start, end)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_state",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_state",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_state.htm",
          "blurb": "This function will set the current GPU state using the passed-in DS Map. The supplied map can be created using the function gpu_get_state().",
          "syntax": "gpu_set_state(ds_map)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_filter",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_texfilter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texfilter.htm",
          "blurb": "This function can be used to set the texture filtering (linear interpolation) of all images drawn on the game screen. When this is enabled (true) all textures will be smoothed when drawn (this includes sprites as they too are considered textures), meaning that when scaled or moved if there is not a 1:1 pixel ratio then there will be a \"smudging\" across various pixels which may make images appear blurry depending on the art style used. If this is disabled (false) then images will be drawn based on the nearest pixel when scaled or moving which may lead to \"blocky\" images. The default value is false, and this can also be changed in the Global Game Options for individual target platforms.",
          "syntax": "gpu_set_texfilter(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_filter_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_texfilter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texfilter_ext.htm",
          "blurb": "This function can be used to set the linear interpolation for a single sampler \"slot\" when using Shaders in GameMaker. When this is enabled (true) the sampler texture will be smoothed and if this is disabled (false) then images will be drawn based on the nearest pixel. The default value is that set by the Global Game Options for your game, or that set using the function gpu_set_texfilter().",
          "syntax": "gpu_set_texfilter_ext(sampler_id, enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_max_aniso",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_max_aniso",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_max_aniso.htm",
          "blurb": "With this function you can set the current maximum level of anisotropy when using the tf_anisotropic filter mode (see gpu_get_tex_mip_filter() for more information). The input value must range between 1 and 16.",
          "syntax": "gpu_set_tex_max_aniso(maxaniso)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_max_aniso_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_max_aniso_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_max_aniso_ext.htm",
          "blurb": "With this function you can set the maximum level of anisotropy when using the tf_anisotropic filter mode (see gpu_get_tex_mip_filter() for more information) on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then a value within the range of 1 and 16 to set the level.",
          "syntax": "gpu_set_tex_max_aniso_ext(sampler_index, maxaniso)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_max_mip",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_max_mip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_max_mip.htm",
          "blurb": "With this function you can set the currently set maximum mipmap level which is to be used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
          "syntax": "gpu_set_tex_max_mip(maxmip)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_max_mip_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_max_mip_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_max_mip_ext.htm",
          "blurb": "With this function you can get the currently set maximum mipmap level which is to be used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return the current maximum mipmap level, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
          "syntax": "gpu_set_tex_max_mip_ext(sampler_index, maxmip)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_min_mip",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_min_mip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_min_mip.htm",
          "blurb": "With this function you can set the minimum mipmap level which is currently used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc...",
          "syntax": "gpu_set_tex_min_mip(minmip)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_min_mip_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_min_mip_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_min_mip_ext.htm",
          "blurb": "With this function you can set the minimum mipmap level which is currently used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then give a value, where 0 is for full resolution, 1 is for the first mipmap, 2 for the second etc...",
          "syntax": "gpu_set_tex_min_mip_ext(sampler_index, minmip)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_mip_bias",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_mip_bias",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_bias.htm",
          "blurb": "With this function you can set the mipmap bias value, where a value of 0 equals no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make rendered textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this function can take negative values too, in which case rendered textures will be sharper over a greater distance the lower the value.",
          "syntax": "gpu_set_tex_mip_bias(bias)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_mip_bias_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_mip_bias_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_bias_ext.htm",
          "blurb": "With this function you can set the mipmap bias value for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then the bias value, where 0 is for no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make the shader textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this function can also take negative values too, in which case shader textures will be sharper over a greater distance the lower the value.",
          "syntax": "gpu_set_tex_mip_bias_ext(sampler_index, bias)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_mip_enable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_mip_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable.htm",
          "blurb": "With this function you can change whether mipmapping is switched off, switched on for everything, or switched on only for texture groups selected in the Texture Group Manager. The function requires one of the constants listed below.",
          "syntax": "gpu_set_tex_mip_enable(setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_mip_enable_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_mip_enable_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable_ext.htm",
          "blurb": "With this function you can set whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the constants listed below.",
          "syntax": "gpu_set_tex_mip_enable_ext(sampler_index, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_mip_filter",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_mip_filter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter.htm",
          "blurb": "With this function you can set the current mip filter mode to one of the three types supported. You give the constant that refers to the mip filtering mode that you require, where you can choose between point filtering (default setting, meaning no filtering), linear filtering (this is also known as trilinear filtering) or aniostropic filtering (see the constants table below).",
          "syntax": "gpu_set_tex_mip_filter(filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_mip_filter_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_tex_mip_filter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter_ext.htm",
          "blurb": "With this function you can set the mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the mode value constants listed below.",
          "syntax": "gpu_set_tex_mip_filter_ext(sampler_index, filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_repeat",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_texrepeat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texrepeat.htm",
          "blurb": "This function can be used to indicate to GameMaker whether textures should repeat (true) or not (false) when used for models and primitives. Normally texture widths and heights lie in the range 0 - 1, but if you specify a value larger than 1 by default the rest is not drawn (the entire texture will be drawn with an \"empty\" section corresponding to the percentage over 1 that is used. So a value of 2 for a texture width or height would draw the texture in half the space and leave the other half empty). However, by using this function to set repeat to true the texture is repeated automatically over all models and primitives. The likely use case for these functions is for repeating a texture in 3D but in order for it to work and not pull images from the rest of the texture page, the sprite used will need to be marked as being on a \"Separate Texture Page\" in the Sprite Editor.",
          "syntax": "gpu_set_texrepeat(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_tex_repeat_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_texrepeat_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texrepeat_ext.htm",
          "blurb": "This function can be used to set whether a single sampler \"slot\" repeats the given texture when using Shaders in GameMaker . Setting it to true will repeat the texture if the uv coordinates are out with the 0-1 range, while a setting of false will mean no repeating. The likely use case for these functions is for repeating a texture in 3D but in order for it to work and not pull images from the rest of the texture page, the sprite used will need to be marked as being on a \"Separate Texture Page\" in the Sprite Editor.",
          "syntax": "gpu_set_texrepeat_ext(sampler_id, enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_texfilter",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_texfilter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texfilter.htm",
          "blurb": "This function can be used to set the texture filtering (linear interpolation) of all images drawn on the game screen. When this is enabled (true) all textures will be smoothed when drawn (this includes sprites as they too are considered textures), meaning that when scaled or moved if there is not a 1:1 pixel ratio then there will be a \"smudging\" across various pixels which may make images appear blurry depending on the art style used. If this is disabled (false) then images will be drawn based on the nearest pixel when scaled or moving which may lead to \"blocky\" images. The default value is false, and this can also be changed in the Global Game Options for individual target platforms.",
          "syntax": "gpu_set_texfilter(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_texfilter_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_texfilter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texfilter_ext.htm",
          "blurb": "This function can be used to set the linear interpolation for a single sampler \"slot\" when using Shaders in GameMaker. When this is enabled (true) the sampler texture will be smoothed and if this is disabled (false) then images will be drawn based on the nearest pixel. The default value is that set by the Global Game Options for your game, or that set using the function gpu_set_texfilter().",
          "syntax": "gpu_set_texfilter_ext(sampler_id, enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_texrepeat",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_texrepeat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texrepeat.htm",
          "blurb": "This function can be used to indicate to GameMaker whether textures should repeat (true) or not (false) when used for models and primitives. Normally texture widths and heights lie in the range 0 - 1, but if you specify a value larger than 1 by default the rest is not drawn (the entire texture will be drawn with an \"empty\" section corresponding to the percentage over 1 that is used. So a value of 2 for a texture width or height would draw the texture in half the space and leave the other half empty). However, by using this function to set repeat to true the texture is repeated automatically over all models and primitives. The likely use case for these functions is for repeating a texture in 3D but in order for it to work and not pull images from the rest of the texture page, the sprite used will need to be marked as being on a \"Separate Texture Page\" in the Sprite Editor.",
          "syntax": "gpu_set_texrepeat(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_texrepeat_ext",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_texrepeat_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texrepeat_ext.htm",
          "blurb": "This function can be used to set whether a single sampler \"slot\" repeats the given texture when using Shaders in GameMaker . Setting it to true will repeat the texture if the uv coordinates are out with the 0-1 range, while a setting of false will mean no repeating. The likely use case for these functions is for repeating a texture in 3D but in order for it to work and not pull images from the rest of the texture page, the sprite used will need to be marked as being on a \"Separate Texture Page\" in the Sprite Editor.",
          "syntax": "gpu_set_texrepeat_ext(sampler_id, enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_zfunc",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_zfunc",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm",
          "blurb": "This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
          "syntax": "gpu_set_zfunc(cmp_func)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_ztestenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_ztestenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_ztestenable.htm",
          "blurb": "This function can be used to toggle z-buffer testing on or off, affecting how things will be drawn (in general only of use when working with 3D projects). Essentially, by default when z-testing is off and you have two objects drawing to the same space, both objects will be rendered regardless of whether one will over-draw the other, resulting in unnecessary draw calls. If you switch this on then the z-buffer is tested to see whether an object will be \"visible\" and not drawn if it's\nnot. Note that this is the default behaviour, but you can change this by changing the type of comparison used for z-buffer testing (see the function gpu_set_zfunc().",
          "syntax": "gpu_set_ztestenable(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gpu_set_zwriteenable",
      "type": "key",
      "topics": [
        {
          "name": "gpu_set_zwriteenable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zwriteenable.htm",
          "blurb": "This function can be used to toggle on (true) and off (false) depth ordering using the z-buffer. When an instance is rendered in GameMaker , the depth of a generated pixel (its z coordinate) is stored in the z-buffer, then, if another instance of the scene must be rendered at the same pixel, the two depths are compared (z-testing - see gpu_set_ztestenable()) and the one \"closer\" to the observer is then saved to the z-buffer, replacing the old one. However, this is not always what you wish to happen and there are moments when you may want something to be drawn over everything else, no matter what its z value is. In those cases you can use this function to switch off writing to the z-buffer and so force whatever is being drawn to be drawn over everything else. Note that the description given here is for the default z-testing comparison mode, but that can be changed",
          "syntax": "gpu_set_zwriteenable(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "gravity",
      "type": "key",
      "topics": [
        {
          "name": "gravity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/gravity.htm",
          "blurb": "gravity is one of the \"built in\" variables all instances have and, when set, will apply a constant force in the gravity_direction of the instance, influencing both the instance speed and direction. Note that gravity is a cumulative force and will accelerate the object if you choose not to cap the final speed, and it's usual that you'd set this variable to small decimal values like 0.01. If you set the gravity to 0, then no gravity will be applied to the instance (this is the default value).",
          "syntax": "gravity"
        }
      ],
      "keys": []
    },
    {
      "name": "gravity_direction",
      "type": "key",
      "topics": [
        {
          "name": "gravity_direction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/gravity_direction.htm",
          "blurb": "gravity_direction is one of the \"built in\" properties all instances have and can be used to set the direction of movement when the instances gravity is greater than 0. Note that directions in GameMaker are usually calculated as 0° being right, 90° being up, 180° being left and 270° being down.",
          "syntax": "gravity_direction"
        }
      ],
      "keys": []
    },
    {
      "name": "Guide To Primitives And Vertex Building",
      "type": "key",
      "topics": [
        {
          "name": "Guide To Primitives And Vertex Building",
          "type": "topic",
          "url": "Additional_Information/Guide_To_Primitives_And_Vertex_Building.htm",
          "blurb": "This guide briefly covers how to build and use primitives using custom vertex formats and vertex buffers. "
        }
      ],
      "keys": []
    },
    {
      "name": "Guide To Using Blendmodes",
      "type": "key",
      "topics": [
        {
          "name": "Guide To Using Blendmodes",
          "type": "topic",
          "url": "Additional_Information/Guide_To_Using_Blendmodes.htm",
          "blurb": "If you've been using GameMaker for any length of time, you will almost certainly have come across blend modes, and probably even used them in your games. Blend modes are a great way to change how something is drawn to give interesting and specific graphical effects, but do you know how they work and how do you use them? This is a subject that can confuse people and so in this section we hope to dispel some of the mystery surrounding blend modes and enable you to use them to their fullest extent in your games."
        }
      ],
      "keys": []
    },
    {
      "name": "Guide To Using Buffers",
      "type": "key",
      "topics": [
        {
          "name": "Guide To Using Buffers",
          "type": "topic",
          "url": "Additional_Information/Guide_To_Using_Buffers.htm",
          "blurb": "A buffer (in programming) is basically a space within the system memory that is used to store small packets of data for just about anything (for example: data transfer, collisions, colour data etc...). Since it is held in system memory it is very fast to access, and a buffer would generally be used for very short-term storage, like receiving network information before processing it, or for storing a checkpoint in your game (this is explained in the example given further down the page)."
        }
      ],
      "keys": []
    },
    {
      "name": "Guide To Using Particles",
      "type": "key",
      "topics": [
        {
          "name": "Guide To Using Particles",
          "type": "topic",
          "url": "Additional_Information/Guide_To_Using_Particles.htm",
          "blurb": "This guide is for those of you that want to understand how to use and create particles. This page will cover both the GameMaker Language functions and GML Visual actions for particles, so if you've never used particles before, we hope that this guide can get you started as they are very useful and quite fun to make."
        }
      ],
      "keys": []
    },
    {
      "name": "Guide To Using Shaders",
      "type": "key",
      "topics": [
        {
          "name": "Guide To Using Shaders",
          "type": "topic",
          "url": "Additional_Information/Guide_To_Using_Shaders.htm",
          "blurb": "Shaders are often used to create beautiful graphical effects in games. They are also among the most advanced features offered by GameMaker, so it is necessary that you have a basic understanding of programming and how GameMaker works before getting started with them."
        }
      ],
      "keys": []
    },
    {
      "name": "health",
      "type": "key",
      "topics": [
        {
          "name": "health",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/health.htm",
          "blurb": "This variable is global in scope and is used to hold a numeric value which is usually used for the player health. This variable is only designed to support legacy projects from previous versions of GameMaker and should not be used in new projects as it may be deprecated in the future.",
          "syntax": "health"
        }
      ],
      "keys": []
    },
    {
      "name": "highscore_add",
      "type": "key",
      "topics": [
        {
          "name": "highscore_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/highscore_add.htm",
          "blurb": "With this function you can add a name and a score to the internal global high score list. There is no need to check the value to see if it is high enough to enter into the score list as GameMaker will only store those values that are greater than the tenth position stored.",
          "syntax": "highscore_add(str, numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "highscore_clear",
      "type": "key",
      "topics": [
        {
          "name": "highscore_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/highscore_clear.htm",
          "blurb": "With this function you can clear the internal global high score list, resetting all names to the default value of \"Unknown\" and all scores to the default value of 0.",
          "syntax": "highscore_clear()"
        }
      ],
      "keys": []
    },
    {
      "name": "highscore_name",
      "type": "key",
      "topics": [
        {
          "name": "highscore_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/highscore_name.htm",
          "blurb": "With this function you can retrieve the name string that has been stored in the high score list at the given position. If no name has been entered, the string \"Unknown\" will be returned.",
          "syntax": "highscore_name(place)"
        }
      ],
      "keys": []
    },
    {
      "name": "highscore_value",
      "type": "key",
      "topics": [
        {
          "name": "highscore_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/General_Game_Control/highscore_value.htm",
          "blurb": "With this function you can retrieve the score value that has been stored in the high score list at the given position. If no score has been entered, the function will return 0.",
          "syntax": "highscore_value(place)"
        }
      ],
      "keys": []
    },
    {
      "name": "hspeed",
      "type": "key",
      "topics": [
        {
          "name": "hspeed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/hspeed.htm",
          "blurb": "hspeed is one of the \"built in\" properties that all instances have and defines the horizontal movement speed (along the x-axis) of the instance in pixels per step. So, an hspeed of 3 means 3 pixels of movement to the right (+x) every step, and an hspeed of -3 would mean 3 pixels of movement to the left (-x) every step.",
          "syntax": "hspeed"
        }
      ],
      "keys": []
    },
    {
      "name": "http_get",
      "type": "key",
      "topics": [
        {
          "name": "http_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_get.htm",
          "blurb": "With this function, you connect to the specified URL in order to retrieve information. As this is an asynchronous function, GameMaker will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an Async Event in any instance that has one defined in their object properties. You should also note that HTTP request parameters (the bits sometimes \"tacked on\" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function, for example:",
          "syntax": "http_get(url)"
        }
      ],
      "keys": []
    },
    {
      "name": "http_get_file",
      "type": "key",
      "topics": [
        {
          "name": "http_get_file",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_get_file.htm",
          "blurb": "With this function, you can connect to the specified URL in order to retrieve information in the form of a file. As this is an asynchronous function, GameMaker will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an Async Event in any instance that has one defined in their object properties.",
          "syntax": "http_get_file(url, local_target)"
        }
      ],
      "keys": []
    },
    {
      "name": "http_get_request_crossorigin",
      "type": "key",
      "topics": [
        {
          "name": "http_get_request_crossorigin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_get_request_crossorigin.htm",
          "blurb": "This function can be used to get the cross-origin type set for HTML5 games and will return a string (on all other platforms an empty string \"\" will be returned).",
          "syntax": "http_get_request_crossorigin()"
        }
      ],
      "keys": []
    },
    {
      "name": "http_post_string",
      "type": "key",
      "topics": [
        {
          "name": "http_post_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_post_string.htm",
          "blurb": "In computing, a post request is used when the client needs to send data to the server as part of the retrieval request, such as when uploading a file or submitting a completed form, and the same is true of this function in GameMaker. In contrast to the http_get() request method where only a URL is sent to the server, http_post_string() also includes a string that is sent to the server and may result in the creation of a new resource or the update of an existing resource or both. It should be noted that HTTP request parameters (the bits sometimes \"tacked on\" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function too.",
          "syntax": "http_post_string(url, string)"
        }
      ],
      "keys": []
    },
    {
      "name": "http_request",
      "type": "key",
      "topics": [
        {
          "name": "http_request",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_request.htm",
          "blurb": "With this function, you can create an HTTP header request to define the operating parameters of an HTTP transaction, which can be used for many things like (for example) authentication via HTTP headers if you use RESTful APIs. The function requires the full IP address of the server to request from as well as the type of request to make (as a string, see the note below): \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"TRACE\", \"OPTIONS\", or \"CONNECT\". You will also need to supply a DS map of key/value pairs (as strings, where the key is the header field and the value is the required data for the header), and the final argument is an optional data string that you can add to the request, and if it's not needed then it can be either 0 or an empty string \"\". Note that you can also send a buffer (see the section on Buffers for more details), in which case the last argument would be the index of the buffer to send.",
          "syntax": "http_request(url, method, header_map, body)"
        }
      ],
      "keys": []
    },
    {
      "name": "http_set_request_crossorigin",
      "type": "key",
      "topics": [
        {
          "name": "http_set_request_crossorigin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_set_request_crossorigin.htm",
          "blurb": "With this function you can set the cross origin type to use when loading images from a file. The function is exclusively for the HTML5 platform and is only useful when loading sprites from a file using the sprite_add() function. Note that when set to \"use-credentials\" you no longer need to give an absolute path to the sprite being loaded, but instead would give a relative path (as shown in the example below). By default the cross origin type is set to \"anonymous\".",
          "syntax": "http_set_request_crossorigin(origin_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_acquire (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_activate (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_consume (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_data (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_enumerate_products (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_product_details (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_purchase_details (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_restore_all (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "iap_status (Obsolete)",
      "type": "key",
      "topics": [
        {
          "name": "In App Purchases",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/In_App_Purchases/In_App_Purchases.htm",
          "blurb": "You can add In App Purchases to your games using the extensions available from the Marketplace and following the setup guides listed below (each extension comes with its own \"mini-manual\" that explains how to use it and lists all of the functions it contains):"
        }
      ],
      "keys": []
    },
    {
      "name": "id",
      "type": "key",
      "topics": [
        {
          "name": "id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm",
          "blurb": "This read-only variable holds the unique identifying number for the instance. Every instance that you create - whether through code or by adding them to a room in the Room Editor - is given a number that is used internally to identify this instance and the variable id is what you can use to reference it. The id is also returned (and can be stored in a variable) when an instance is created using instance_create_layer() or instance_create_depth(), as well as other instance functions.",
          "syntax": "id"
        }
      ],
      "keys": []
    },
    {
      "name": "IDE",
      "type": "key",
      "topics": [
        {
          "name": "GameMaker IDE",
          "type": "topic",
          "url": "The_IDE/The_IDE.htm",
          "blurb": "GameMaker's Integrated Development Environment (or IDE) is the main interface where you create your games and make use of all functionality provided by the software. Essentially, the program itself -- from the Start Screen to every editor window you use to make your game -- is known and referred to as the IDE throughout the manual and various tutorials."
        }
      ],
      "keys": []
    },
    {
      "name": "IDE Input",
      "type": "key",
      "topics": [
        {
          "name": "IDE Input And Navigation",
          "type": "topic",
          "url": "IDE_Navigation/IDE_Input.htm",
          "blurb": "The GameMaker IDE accepts mouse and keyboard input, and many operations can be carried out using one or the other or both. In general you can click the left mouse button   to select anything, use  /  +  to select multiple items, hold  to drag items into different docks or onto the workspaces, and also the  to open context specific menus. Note that if you are running GameMaker on a macOS system and are using a single button mouse, please use  +  to get a right mouse click ."
        }
      ],
      "keys": []
    },
    {
      "name": "IDE Menus",
      "type": "key",
      "topics": [
        {
          "name": "Menus",
          "type": "topic",
          "url": "IDE_Navigation/Menus.htm",
          "blurb": "The top of the GameMaker IDE is occupied by the  Menu Bar. Here you can find a number of drop-down menus that can be used to navigate the IDE, perform tasks or open additional windows with tools to help you craft your games. Note that we list here the  default menus that are available, but some of the asset editors will add additional menus depending on context. These additional\nmenus are explained on the pages relevant to the editor that created them."
        }
      ],
      "keys": []
    },
    {
      "name": "IDE Navigation",
      "type": "key",
      "topics": [
        {
          "name": "IDE Input And Navigation",
          "type": "topic",
          "url": "IDE_Navigation/IDE_Input.htm",
          "blurb": "The GameMaker IDE accepts mouse and keyboard input, and many operations can be carried out using one or the other or both. In general you can click the left mouse button   to select anything, use  /  +  to select multiple items, hold  to drag items into different docks or onto the workspaces, and also the  to open context specific menus. Note that if you are running GameMaker on a macOS system and are using a single button mouse, please use  +  to get a right mouse click ."
        }
      ],
      "keys": []
    },
    {
      "name": "IDE Preferences",
      "type": "key",
      "topics": [
        {
          "name": "IDE Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences.htm",
          "blurb": "The Preferences Window is an essential part of GameMaker, as it is where you can set up and customise your experience using the IDE as well as set up any specific platform SDK's etc... In this section we cover the IDE specific areas of the preferences window - for the individual target platforms please see the section on Target Platform Preferences. Note that after changing any preferences from this window you need to click the Apply button for them to take effect."
        }
      ],
      "keys": []
    },
    {
      "name": "IDE Recent Windows",
      "type": "key",
      "topics": [
        {
          "name": "Recent Windows",
          "type": "topic",
          "url": "IDE_Navigation/Recent_Windows.htm",
          "blurb": "The Recent Windows list can be opened from the Windows menu, and will show a short list (by default it has a maximum of 10 items) of the windows you have previously opened. To start with this list will be blank, but as you open different windows in the IDE (like a sprite or a script or an object, etc...) the list will be populated. Should you need to go back to any of these previously opened windows then you simply click the left mouse button  on the item in the list and the workspace will pan to the window. If you click the right mouse button  on an item, then you will open the following menu: Here you can choose to delete an item (or items, as you can use  +  or /  +  to select multiple) from the list or you can have them moved to the top of the list. The RMB menu also has an additional option permitting you to clear the list completely. It's worth noting that the Recent Windows list can be docked to the sides of the IDE and you can also adjust certain Preferences to change how it behaves."
        }
      ],
      "keys": []
    },
    {
      "name": "IDE Shortcuts",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Shortcuts",
          "type": "topic",
          "url": "IDE_Navigation/Keyboard_Shortcuts.htm",
          "blurb": "There are a huge number of keyboard shortcuts available for GameMaker, and although most of them are marked in the IDE beside the menu items that they relate too, not all of them are or are obvious to the user at the start. Here you can find a complete list of all the keyboard shortcuts for an easy reference guide. In general, shortcuts fall into the following three categories:"
        }
      ],
      "keys": []
    },
    {
      "name": "if",
      "type": "key",
      "topics": [
        {
          "name": "if / else and Conditional Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm",
          "blurb": "A fundamental feature of most programming languages is the ability to ask a simple question that gives a boolean true or false answer, and in GML this is achieved using the if keyword. A simple if condition takes an expression and will perform one or more statements if the expression resolves as true, with the following basic form:"
        }
      ],
      "keys": []
    },
    {
      "name": "Image Editor",
      "type": "key",
      "topics": [
        {
          "name": "Image Editor",
          "type": "topic",
          "url": "The_Asset_Editors/Image_Editor.htm",
          "blurb": "The Image Editor is where you can create your own sprites or edit those you have imported or created previously. If you have used any other image tools then this should be familiar to you but there are a few things to note when using the GameMaker Image Editor which may not be immediately apparent:"
        }
      ],
      "keys": []
    },
    {
      "name": "image_alpha",
      "type": "key",
      "topics": [
        {
          "name": "image_alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_alpha.htm",
          "blurb": "This variable is used to get or to set the alpha value for the sprite. Alpha is always calculated as a value between 0 and 1 where 0 is completely transparent and 1 is completely opaque. Please note that for changes in this variable to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn using one of the extended drawing functions like  draw_self() or draw_sprite_ext().",
          "syntax": "image_alpha"
        }
      ],
      "keys": []
    },
    {
      "name": "image_angle",
      "type": "key",
      "topics": [
        {
          "name": "image_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_angle.htm",
          "blurb": "This value sets the angle (rotation) of the sprite and is measured in degrees, with the right being 0º, up being 90º, left being 180º and down being 270º. Set this variable to 0 to reset the sprite to be drawn as was defined in the sprite editor. Please note that for changes in this variable to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn using one of the extended drawing functions like draw_self() or draw_sprite_ext().",
          "syntax": "image_angle"
        }
      ],
      "keys": []
    },
    {
      "name": "image_blend",
      "type": "key",
      "topics": [
        {
          "name": "image_blend",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_blend.htm",
          "blurb": "This variable controls the \"tinting\" of the instance sprite and the default value is -1 (but can also be c_white). Any other value (including internal colour constants like c_red, or c_aqua) will blend the specified colour with the original sprite. Please note that for changes in this variable to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn using one of the extended drawing functions like draw_self() or draw_sprite_ext().",
          "syntax": "image_blend"
        }
      ],
      "keys": []
    },
    {
      "name": "image_index",
      "type": "key",
      "topics": [
        {
          "name": "image_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_index.htm",
          "blurb": "A sprite is made up of one or more sub-images which can make the sprite appear animated as they switch from one to the other, or can they can be switched between in code to give different \"states\", much like a button has in windows. If the sprite is animated, then you can get the current frame of the animation by checking the image_index variable, or if you want to change the state of a static sprite, you can select a new sub-image by setting this variable to the desired sub-image of the sprite. Please note that for changes in this variable to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn using one of the drawing functions like draw_self() or draw_sprite_ext() (by supplying the image_index into the appropriate argument).",
          "syntax": "image_index"
        }
      ],
      "keys": []
    },
    {
      "name": "image_number",
      "type": "key",
      "topics": [
        {
          "name": "image_number",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_number.htm",
          "blurb": "This read only variable can be used to get the number of sub-images in a sprite that has been assigned to an instance (if you need the number of sub-images for a sprite other than the one assigned to the instance you should use sprite_get_number()). Please note that when there is (for example) 1 sub-image this variable will return \"1\" but the image_index of that sub-image is 0.",
          "syntax": "image_number"
        }
      ],
      "keys": []
    },
    {
      "name": "image_speed",
      "type": "key",
      "topics": [
        {
          "name": "image_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_speed.htm",
          "blurb": "This variable determines the speed in which GameMaker will cycle through the sub-images for the current instance sprite. The speed value given is a multiplier, with 1 being the default value, and setting it to 0.5 will half the animation speed - as set in the Sprite Editor or Image Editor- while setting it to 2 will double it. If the sprite used has no sub-images, this variable will have no effect.",
          "syntax": "image_speed"
        }
      ],
      "keys": []
    },
    {
      "name": "image_xscale",
      "type": "key",
      "topics": [
        {
          "name": "image_xscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_xscale.htm",
          "blurb": "This value sets the horizontal scaling applied to the sprite that has been assigned to the current instance. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sprite), larger values will scale up and negative values will flip the sprite and scale it unless the value used is exactly -1 (in which case the sprite is just flipped about its origin with no scaling).",
          "syntax": "image_xscale"
        }
      ],
      "keys": []
    },
    {
      "name": "image_yscale",
      "type": "key",
      "topics": [
        {
          "name": "image_yscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_yscale.htm",
          "blurb": "This value sets the vertical scaling (along the y-axis) applied to the sprite that has been assigned to the current instance. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the height of the sprite), larger values will scale up and negative values will mirror the sprite and scale it unless the value used is exactly -1 (in which case the sprite is just mirrored along the y-axis with no scaling). \n",
          "syntax": "image_yscale"
        }
      ],
      "keys": []
    },
    {
      "name": "in_sequence",
      "type": "key",
      "topics": [
        {
          "name": "in_sequence",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/in_sequence.htm",
          "blurb": "This is a built-in variable that is part of the instance variables created for every object instance in your game. If the instance is being controlled by a sequence, this variable will return true, otherwise it will return false. This is a read-only variable and cannot be changed.",
          "syntax": "in_sequence"
        }
      ],
      "keys": []
    },
    {
      "name": "Included Files",
      "type": "key",
      "topics": [
        {
          "name": "Included Files",
          "type": "topic",
          "url": "Settings/Included_Files.htm",
          "blurb": "GameMaker is not just limited to the assets that you add in the Asset Browser, as you can also add files to the project as Included Files so that they can then be accessed while the game is running. These are simply files that are included with your game package, so you can do with them what you wish."
        }
      ],
      "keys": []
    },
    {
      "name": "infinity",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        }
      ],
      "keys": []
    },
    {
      "name": "ini_close",
      "type": "key",
      "topics": [
        {
          "name": "ini_close",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_close.htm",
          "blurb": "This function should be called the moment you are finished reading or writing to any open ini file. If you do not use the function after you have used any of the ini write functions, then nothing will be written to disk, as the file information is held in memory until this function is called, which forces the write. If you try to open an ini without having previously closed another one (or the same one) you will get an error too.",
          "syntax": "ini_close()"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_key_delete",
      "type": "key",
      "topics": [
        {
          "name": "ini_key_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_key_delete.htm",
          "blurb": "With this function you can remove the selected key (and its corresponding value) from an ini file.",
          "syntax": "ini_key_delete(section, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_key_exists",
      "type": "key",
      "topics": [
        {
          "name": "ini_key_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_key_exists.htm",
          "blurb": "This function checks to see if a key exists in the currently open ini and will return true if it does or false otherwise. This is not a necessary check to prevent errors as, when a key does not exist, reading from a non-existent key will just return a default value. It can be useful to see if an ini file has saved specific data and a few other things, however.",
          "syntax": "ini_key_exists(section, key)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_open",
      "type": "key",
      "topics": [
        {
          "name": "ini_open",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_open.htm",
          "blurb": "This opens an ini_file for reading and/writing. If the ini_file does not exist at the location you are checking, GameMaker may create one, but only if you write data to it. If you have only read information from the ini file, then the default values for the read function will be returned, but the ini file will not actually be created.",
          "syntax": "ini_open(name)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_open_from_string",
      "type": "key",
      "topics": [
        {
          "name": "ini_open_from_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_open_from_string.htm",
          "blurb": "This function will create a temporary ini file from a string and open it for reading/writing. The string should be correctly formatted as an ini file (ie: with sections, line breaks keys and values) otherwise the ini file will not be created correctly. Note that this ini file is temporary and will be removed from memory the moment it is closed, losing any information that was stored in it, however the ini_close() function returns a string of the full ini file which can then be saved to a server or to disk.",
          "syntax": "ini_open_from_string(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_read_real",
      "type": "key",
      "topics": [
        {
          "name": "ini_read_real",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_read_real.htm",
          "blurb": "You can use this function to read a number from an ini data file. Ini Files are split into sections and then each section is subsequently split into key - value pairs. So a typical ini file would look something like this:",
          "syntax": "ini_read_real(section, key, default)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_read_string",
      "type": "key",
      "topics": [
        {
          "name": "ini_read_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_read_string.htm",
          "blurb": "You can use this function to read a string (text) from an ini data file. Ini Files are split into sections and then each section is subsequently split into key - value pairs. So a typical ini file would look something like this:",
          "syntax": "ini_read_string(section, key, default)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_section_delete",
      "type": "key",
      "topics": [
        {
          "name": "ini_section_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_section_delete.htm",
          "blurb": "With this function you can delete a whole section of an ini file, which will also remove all key-value pairs that are associated with it.",
          "syntax": "ini_section_delete(section)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_section_exists",
      "type": "key",
      "topics": [
        {
          "name": "ini_section_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_section_exists.htm",
          "blurb": "This function checks to see if a section exists in the currently open ini and will return true if it does or false otherwise. This is not a necessary check to prevent errors as, when a section does not exist, reading from a non-existent section will just return a default value, however it can be useful to see if an ini file has saved specific data.",
          "syntax": "ini_section_exists(section)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_write_real",
      "type": "key",
      "topics": [
        {
          "name": "ini_write_real",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_write_real.htm",
          "blurb": "You can use this function to write a value (numeric) to an ini data file. Ini Files are split into sections and then each section is subsequently split into key - value pairs. So a typical ini file would look something like this:",
          "syntax": "ini_write_real(section, key, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "ini_write_string",
      "type": "key",
      "topics": [
        {
          "name": "ini_write_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_write_string.htm",
          "blurb": "You can use this function to write a string (text) to an ini data file. Ini Files are split into sections and then each section is subsequently split into key - value pairs. So a typical ini file would look something like this:",
          "syntax": "ini_write_string(section, key, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "Inspector",
      "type": "key",
      "topics": [
        {
          "name": "The Inspector",
          "type": "topic",
          "url": "IDE_Tools/The_Inspector.htm",
          "blurb": "The Inspector window shows all the properties associated with the selected elements in the IDE."
        }
      ],
      "keys": []
    },
    {
      "name": "Installing",
      "type": "key",
      "topics": [
        {
          "name": "Installation Guide",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Installation_Guide.htm",
          "blurb": "GameMaker is designed for use on macOS and Windows desktop computers with the minimum specifications mentioned here."
        }
      ],
      "keys": []
    },
    {
      "name": "Instance Keywords",
      "type": "key",
      "topics": [
        {
          "name": "Instance Keywords",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Instance_Keywords.htm",
          "blurb": "To make certain things easier in GameMaker, you can use one of several instance keywords in your code (whether GML or GML Visual). These keywords are used primarily to identify instances - and in some cases structs - under different situations, and each one is explained in the text below."
        }
      ],
      "keys": []
    },
    {
      "name": "Instance Variables",
      "type": "key",
      "topics": [
        {
          "name": "Instance Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Instance_Variables.htm",
          "blurb": "An instance variable is created within an instance of an object and is considered unique to that instance - ie: many instances of the same object can have the same variable, but each variable can hold a different value as they are unique to each instance. But how is an instance variable created? Well, you create new variables by simply assigning a value to them as shown in this small example (this is called declaring the variable):"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_activate_all",
      "type": "key",
      "topics": [
        {
          "name": "instance_activate_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_activate_all.htm",
          "blurb": "With this function you can tell GameMaker to activate all instances that have been previously deactivated in a room. Note that activation is not instantaneous, and an instance that has been activated in this way will not be considered to be active until the end of the event in which the function was called.",
          "syntax": "instance_activate_all()"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_activate_layer",
      "type": "key",
      "topics": [
        {
          "name": "instance_activate_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_activate_layer.htm",
          "blurb": "With this function you can activate a layer that has been deactivated previously. You need to supply the layer ID, which can either be the name of the layer as written in the code editor (as a string) or the actual layer ID value as returned by the layer_create() and all deactivated instances on that layer will activated once again. Note that if you have deactivated a layer that has persistent instances, you will need to reactivate the layer again with this function before changing room, otherwise any persistent instances will not be carried over and will be discarded. Note too that activation is not instantaneous, and an instance that has been activated in this way will not be considered to be active until the end of the event in which the function was called.",
          "syntax": "instance_activate_layer(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_activate_object",
      "type": "key",
      "topics": [
        {
          "name": "instance_activate_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_activate_object.htm",
          "blurb": "With this function you can activate a single instance or all instances of a specific object from all those that have been deactivated previously. Note that if you have deactivated an instance or object that has been flagged as Persistent, then you will need to reactivate it again with this function before changing room, otherwise it will not be carried over and will be discarded instead. Note too that activation is not instantaneous, and an instance that has been activated in this\nway will not be considered to be active until the end of the event in which the function was called.",
          "syntax": "instance_activate_object(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_activate_region",
      "type": "key",
      "topics": [
        {
          "name": "instance_activate_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_activate_region.htm",
          "blurb": "With this function you can define a region within the room to activate instances that have previously been deactivated. This region can either be flagged as \"inside\" or \"outside\" as demonstrated in the following image:",
          "syntax": "instance_activate_region(left, top, width, height, inside)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_change",
      "type": "key",
      "topics": [
        {
          "name": "instance_change",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_change.htm",
          "blurb": "You can use this function to change one instance of an object into another instance of a different object, and while doing so decide whether to perform the initial instances Destroy and Clean Up Events and the new instances Create Event. In this way, you can have (for example) a bomb change into an explosion - in which case the \"perf\" argument would probably be true as you would want the bomb to perform its Destroy Event and Clean Up Event, as well as the explosion to perform its Create Event - or you could have your player character change into a different one - in which case the \"perf\" argument would probably be false as you do not want the instances to perform their Create and Destroy/Clean Up events.",
          "syntax": "instance_change(obj, perf)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_copy",
      "type": "key",
      "topics": [
        {
          "name": "instance_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_copy.htm",
          "blurb": "With this function you can \"clone\" an instance as this will create a new version of the instance running the code at its same position. The \"perf\" argument is used to instruct this new instance to perform the create event or not. This function returns the id of the new instance which can then be stored in a variable or used to access that instance.",
          "syntax": "instance_copy(perf)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_count",
      "type": "key",
      "topics": [
        {
          "name": "instance_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_count.htm",
          "blurb": "With this read only variable you can get a count of all active instances that are in the room. This will include the instance running the code, but does not include those instances that have been deactivated using the instance deactivate functions. Note that this variable will only give you the number of instances at the start of the step, so any changes to the instances in the room made after the step has started will not be taken into consideration.",
          "syntax": "instance_count"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_create_depth",
      "type": "key",
      "topics": [
        {
          "name": "instance_create_depth",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_create_depth.htm",
          "blurb": "With this function you can create a new instance of the specified object at any given point within the room and at the depth specified. The depth can be any value, where the lower the depth the \"nearer\" to the camera things will be drawn and the higher the depth the further away, so an instance at depth -200 will be drawn over an instance at depth +300 (for example).",
          "syntax": "instance_create_depth(x, y, depth, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_create_layer",
      "type": "key",
      "topics": [
        {
          "name": "instance_create_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_create_layer.htm",
          "blurb": "With this function you can create a new instance of the specified object at any given point within the room and on the layer specified. The layer can be identified using the layer ID value (as returned by the function layer_create()) or by the name of the layer (as a string, for example \"instance_layer\") as defined in the room editor.",
          "syntax": "instance_create_layer(x, y, layer_id, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_deactivate_all",
      "type": "key",
      "topics": [
        {
          "name": "instance_deactivate_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_deactivate_all.htm",
          "blurb": "This function will deactivate all instances that are in the room at the moment that the code is run. This may include the instance running the code if the \"notme\" flag is set to false, but normally you would want that instance to be active, in which case the \"notme\" flag should be set to true. Note that deactivation is not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event in which the function was called.",
          "syntax": "instance_deactivate_all(notme)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_deactivate_layer",
      "type": "key",
      "topics": [
        {
          "name": "instance_deactivate_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_deactivate_layer.htm",
          "blurb": "With this function you can deactivate all instances assigned to a specific layer. You need to supply the layer ID, which can either be the name of the layer as written in the code editor (as a string) or the actual layer ID value as returned by the layer_create(), and note that you can only deactivate instance layers with this function. Note that if you have deactivated a layer that has instances of objects flagged as Persistent, then you will need to reactivate the layer again with the function instance_activate_layer() before changing room, otherwise any persistent instances on the layer will not be carried over and will be discarded. Note too that deactivation is not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event in which the function was called.",
          "syntax": "instance_deactivate_layer(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_deactivate_object",
      "type": "key",
      "topics": [
        {
          "name": "instance_deactivate_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_deactivate_object.htm",
          "blurb": "With this function you can deactivate a single instance or all instances of a specific object from all those that have been activated previously. Note that if you have deactivated an instance or object that has been flagged as Persistent, then you will need to reactivate it again with the function instance_activate_object() before changing room, otherwise it will not be carried over and will be discarded instead. Note too that deactivation\nis not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event in which the function was called.",
          "syntax": "instance_deactivate_object(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_deactivate_region",
      "type": "key",
      "topics": [
        {
          "name": "instance_deactivate_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_deactivate_region.htm",
          "blurb": "With this function you can define a region within the room to deactivate instances that have previously been activated. This region can either be flagged as \"inside\" or \"outside\" as demonstrated in the following image:",
          "syntax": "instance_deactivate_region(left, top, width, height, inside, notme)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_destroy",
      "type": "key",
      "topics": [
        {
          "name": "instance_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm",
          "blurb": "You call this function whenever you wish to \"destroy\" an instance, normally triggering a Destroy Event and also a Clean Up Event. This will remove it from the room until the room is restarted (unless the room is persistent). Calling the function with no arguments will simply destroy the instance that is currently in scope and running the code, but you can provide an optional \"id\" argument and target a specific instance by using the instance id value, or you can target all instances of a particular object by using an object_index. For example:",
          "syntax": "instance_destroy([id, execute_event_flag])"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_exists",
      "type": "key",
      "topics": [
        {
          "name": "instance_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_exists.htm",
          "blurb": "This function can be used in two ways depending on what you wish to check. You can give it an object_index to check for, in which case this function will return true if any active instances of the specified object exist in the current room, or you can also supply it with an instance id, in which case this function will return true if that specific instance exists and is active in the current room.",
          "syntax": "instance_exists(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_find",
      "type": "key",
      "topics": [
        {
          "name": "instance_find",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_find.htm",
          "blurb": "All instances have a unique identifier (id) which can be used to modify and manipulate them while a game is running, but you may not always know what the id for a specific instance is and so this function can help as you can use it to iterate through all of them to find what you need. You specify the object that you want to find the instance of and a number, and if there is an instance at that position in the instance list then the function returns the id of that instance, and if not it returns the special keyword noone. You can also use the keyword all to iterate through all the instances in a room, as well as a parent object to iterate through all the instances that are part of that parent / child hierarchy, and you can even specify an instance (if you have its id) as a check to see if it actually exists in the current room. Please note that as instances are sorted in an arbitrary manner, there is no specific order to how the instances are checked by this function, and any instance can be in any position.",
          "syntax": "instance_find(obj, n)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_furthest",
      "type": "key",
      "topics": [
        {
          "name": "instance_furthest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_furthest.htm",
          "blurb": "This function will check all the instances of the given object to see which is furthest from the given x/y point. All checks will be from the given x/y position to the origin (the x/y position) of instances of the object specified. If no instances of the object exist, the function will return the keyword noone, but if there are instances then it will return the id of the instance found. Please note that if the instance running the code has the same object index as the object being checked, then it will be included in the check (this includes checks for parent objects if the calling instance is also a child of the parent).",
          "syntax": "instance_furthest(x, y, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_id",
      "type": "key",
      "topics": [
        {
          "name": "instance_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_id.htm",
          "blurb": "This read only array holds all the ids of every active instance within the room. This means that if you have used any of the Instance Deactivate functions those instances that have been deactivated will not be included in this array (if you have used a value from this array previously, it will now return the keyword noone).",
          "syntax": "instance_id[num]"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_id_get",
      "type": "key",
      "topics": [
        {
          "name": "instance_id_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_id_get.htm",
          "blurb": "With this function you can get the unique ID value of any instance from the currently active instance list. You give the index in the instance list to get the ID from and the function will return the value for storing in a variable.",
          "syntax": "instance_id_get(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_nearest",
      "type": "key",
      "topics": [
        {
          "name": "instance_nearest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_nearest.htm",
          "blurb": "This function will check all the instances of the given object to see which is nearest to the given x/y point. All checks will be from the given x/y position to the origin (the x/y position) of instances of the object specified. If no instances of the object exist, the function will return the keyword noone, but if there are instances then it will return the id of the instance found. Please note that if the instance running the code has the same object index as the object being checked, then it will be included in the check (this includes checks for parent objects if the calling instance is also a child of the parent).",
          "syntax": "instance_nearest(x, y, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_number",
      "type": "key",
      "topics": [
        {
          "name": "instance_number",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm",
          "blurb": "With this function you can find out how many active instances of the specified object exists in the room. When checking using this function, if the object is a parent, then all child objects will also be included in the return value, and also note that those instances which have been deactivated with the instance deactivate functions will not be included in this check.",
          "syntax": "instance_number(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_place",
      "type": "key",
      "topics": [
        {
          "name": "instance_place",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_place.htm",
          "blurb": "With this function you can check a position for a collision with another instance or all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker to move the instance to the new position, check for a collision, move back and tell you if a collision was found or not.",
          "syntax": "instance_place(x, y, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_place_list",
      "type": "key",
      "topics": [
        {
          "name": "instance_place_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_place_list.htm",
          "blurb": "With this function you can check a position for a collision with all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker to move the instance to the new position, check for a collision, then move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the instances of the object being checked for have precise collision masks selected, otherwise only bounding box collisions are applied.",
          "syntax": "instance_place_list(x, y, obj, list, ordered)"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_position",
      "type": "key",
      "topics": [
        {
          "name": "instance_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm",
          "blurb": "With this function you can check a position for a collision with another instance or all instances of an object. When you use this you are checking a single point in the room for an instance or an object. This check will be done against the bounding box of the instance or against the mask of the instance if that instance has precise collisions checked and will return the unique instance id. If you do not need the id of the colliding instance you should consider using position_meeting() instead. This function also accepts the special keywords all and other and will return the keyword noone if no collision occurs or the unique ID value of the instance found if a collision does occur.",
          "syntax": "instance_position( x, y, obj )"
        }
      ],
      "keys": []
    },
    {
      "name": "instance_position_list",
      "type": "key",
      "topics": [
        {
          "name": "instance_position_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position_list.htm",
          "blurb": "With this function you can check a position for a collision with all instances of another object. When you use this you are checking a single point in the room for all instances of an object, and the check will be done against the bounding box of the instances or against the mask of the instances if that object has precise collisions checked.",
          "syntax": "instance_position_list(x, y, obj, list, ordered)"
        }
      ],
      "keys": []
    },
    {
      "name": "instanceof",
      "type": "key",
      "topics": [
        {
          "name": "instanceof",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/instanceof.htm",
          "blurb": "This function can be used to get the name of the constructor function that was used to create a struct. The struct itself should have been created using the  new operator along with the constructor itself. You supply the variable with the struct reference to check and the function will return either a string with the constructor name or undefined.",
          "syntax": "instanceof(struct_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "int64",
      "type": "key",
      "topics": [
        {
          "name": "int64",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/int64.htm",
          "blurb": "This function will attempt to convert a given value into a signed 64-bit integer, where the value must be either a real, a string, an int64, an int32, or a ptr. Anything else will cause the game to crash with an error message. You can check to see if a variable holds an int64 using the function is_int64().",
          "syntax": "int64(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "integrated",
      "type": "key",
      "topics": [
        {
          "name": "GameMaker IDE",
          "type": "topic",
          "url": "The_IDE/The_IDE.htm",
          "blurb": "GameMaker's Integrated Development Environment (or IDE) is the main interface where you create your games and make use of all functionality provided by the software. Essentially, the program itself -- from the Start Screen to every editor window you use to make your game -- is known and referred to as the IDE throughout the manual and various tutorials."
        }
      ],
      "keys": []
    },
    {
      "name": "Introduction",
      "type": "key",
      "topics": [
        {
          "name": "Introduction To GameMaker",
          "type": "topic",
          "url": "Introduction/Introduction_To_GameMaker_Studio_2.htm",
          "blurb": "GameMaker is a tool designed to empower you and your team to make new and innovative games as well as prototype ideas in the fastest and most intuitive way possible across multiple target platforms. It is intended primarily as a tool for making 2D games - although 3D games are perfectly doable - and comes with a number of tools and editors to help you realize your dreams and ideas, with your final project being ported across multiple platforms from the same initial base resources. "
        }
      ],
      "keys": []
    },
    {
      "name": "io_clear",
      "type": "key",
      "topics": [
        {
          "name": "io_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/io_clear.htm",
          "blurb": "This function will clear the current keyboard and mouse states. Note that what happens in the next step after calling this function will depend on what is being checked and the platform it is being checked on. With mouse input, the mouse button will have to be released and pressed again for any further input to be detected, but with the keyboard it's not quite that simple. In general, the keyboard will be cleared only for that step but the next step will again detect the key, however\nthis may not be the same across all platforms and keyboards, and in some cases the function may act like it does for the mouse and require the key to be lifted and pressed again.",
          "syntax": "io_clear()"
        }
      ],
      "keys": []
    },
    {
      "name": "irandom",
      "type": "key",
      "topics": [
        {
          "name": "irandom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/irandom.htm",
          "blurb": "This function returns a random value as an integer (whole number). So, for example, to get a random number from 0 to 9 you can use irandom(9) and it will return a number from 0 to 9 inclusive.",
          "syntax": "irandom(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "irandom_range",
      "type": "key",
      "topics": [
        {
          "name": "irandom_range",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/irandom_range.htm",
          "blurb": "This function is similar to random_range() only with integer values as the input. You supply the low value for the range as well as the high value, and the function will return a random integer value within (and including) the given range. For example, irandom_range(10, 35) will return an integer between 10 and 35 inclusive.",
          "syntax": "irandom_range(n1, n2)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_array",
      "type": "key",
      "topics": [
        {
          "name": "is_array",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_array.htm",
          "blurb": "This function can be used to check and see if a variable holds an array (it will return true) or not (in which case it will return false).",
          "syntax": "is_array(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_bool",
      "type": "key",
      "topics": [
        {
          "name": "is_bool",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_bool.htm",
          "blurb": "This function returns whether a given variable is a boolean (true ior false) or not. In some cases you want to check and see if a variable in GameMaker holds a boolean value, and that's when you would use this function.",
          "syntax": "is_bool(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_infinity",
      "type": "key",
      "topics": [
        {
          "name": "is_infinity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_infinity.htm",
          "blurb": "This function returns whether a given variable is infinity (an infinite number) or not, returning true if it is, and false if it is not.",
          "syntax": "is_infinity(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_int32",
      "type": "key",
      "topics": [
        {
          "name": "is_int32",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_int32.htm",
          "blurb": "This function returns whether a given variable is a 32bit integer or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is an int 32 or not.",
          "syntax": "is_int32(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_int64",
      "type": "key",
      "topics": [
        {
          "name": "is_int64",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_int64.htm",
          "blurb": "This function returns whether a given variable is a 64bit integer or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is an int64 or not.",
          "syntax": "is_int64(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_matrix",
      "type": "key",
      "topics": [
        {
          "name": "is_matrix",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_matrix.htm",
          "blurb": "This function returns whether a given variable refers to a matrix or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is a matrix or not.",
          "syntax": "is_matrix(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_method",
      "type": "key",
      "topics": [
        {
          "name": "is_method",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_method.htm",
          "blurb": "This function can be used to check and see if a variable is a method variable (it will return true) or not (in which case it will return false).",
          "syntax": "is_method(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_nan",
      "type": "key",
      "topics": [
        {
          "name": "is_nan",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_nan.htm",
          "blurb": "This function returns whether a given variable is NaN (not a number) or not, returning true if it is, and false if it is not.",
          "syntax": "is_nan(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_numeric",
      "type": "key",
      "topics": [
        {
          "name": "is_numeric",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_numeric.htm",
          "blurb": "This function returns whether a given variable is a numeric value (real, int32, int64 or boolean) or not. In some cases you want to check and see if a variable in GameMaker holds any numeric value, and that's when you would use this function. The function will return true if the given input is numeric, and false otherwise.",
          "syntax": "is_numeric(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_ptr",
      "type": "key",
      "topics": [
        {
          "name": "is_ptr",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_ptr.htm",
          "blurb": "This function returns whether a given variable is a pointer or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is a pointer or not.",
          "syntax": "is_ptr(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_real",
      "type": "key",
      "topics": [
        {
          "name": "is_real",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_real.htm",
          "blurb": "This function returns whether a given variable is a real number (single, double or integer) or not. In some cases you want to check and see if a variable holds a real number, and that's when you would use this function. It does not return the real number but rather true or false, so a value of, for example, \"fish\" would return false, however a value of 200 would return true.",
          "syntax": "is_real(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_string",
      "type": "key",
      "topics": [
        {
          "name": "is_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_string.htm",
          "blurb": "This function returns whether a given variable is a string number or not. In some cases you want to check and see if a variable in GameMaker holds a string and not a real and that's when you would use this function. It does not return the string but rather true or false, so a value of, for example, \"fish\" for n will return true, but a value of 200 for n will return false.",
          "syntax": "is_string(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_struct",
      "type": "key",
      "topics": [
        {
          "name": "is_struct",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_struct.htm",
          "blurb": "This function checks if the supplied value is a struct. It returns true if it is, otherwise it returns false.",
          "syntax": "is_struct(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_undefined",
      "type": "key",
      "topics": [
        {
          "name": "is_undefined",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_undefined.htm",
          "blurb": "This function returns whether a given variable is defined or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is defined or not.",
          "syntax": "is_undefined(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_vec3",
      "type": "key",
      "topics": [
        {
          "name": "is_vec3",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_vec3.htm",
          "blurb": "In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is a 3 value vector or not.",
          "syntax": "is_vec3(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "is_vec4",
      "type": "key",
      "topics": [
        {
          "name": "is_vec4",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/is_vec4.htm",
          "blurb": "In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is a 4 value vector or not.",
          "syntax": "is_vec4(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "JSDoc",
      "type": "key",
      "topics": [
        {
          "name": "Feather Data Types",
          "type": "topic",
          "url": "The_Asset_Editors/Code_Editor_Properties/Feather_Data_Types.htm",
          "blurb": "Feather uses data types to provide smart syntax-checking when writing code, ensuring you don't use the wrong data type for a variable or function parameter."
        },
        {
          "name": "Feather Features",
          "type": "topic",
          "url": "The_Asset_Editors/Code_Editor_Properties/Feather_Features.htm",
          "blurb": "Feather provides intelligent code completion and improved syntax checking in your GML Code scripts, along with smart refactoring options."
        },
        {
          "name": "JSDoc Script Comments",
          "type": "topic",
          "url": "The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm",
          "blurb": "If you wish your custom functions to have code completion and to show the required arguments in a specific manner in the code editor, then you need to add some JSDoc style comments. These comments are used to tell the auto-complete feature how the function should be used and filled out in the script editor."
        }
      ],
      "keys": []
    },
    {
      "name": "json_decode",
      "type": "key",
      "topics": [
        {
          "name": "json_decode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm",
          "blurb": "JSON (JavaScript Object Notation) is a lightweight data-interchange format which is easy for to read and write, for both people and machines. It is built on two basic structures:",
          "syntax": "json_decode(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "json_encode",
      "type": "key",
      "topics": [
        {
          "name": "json_encode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm",
          "blurb": "JSON (JavaScript Object Notation) is a lightweight data-interchange format which is easy for to read and write, for both people and machines. It is built on two basic structures:",
          "syntax": "json_encode(map)"
        }
      ],
      "keys": []
    },
    {
      "name": "json_parse",
      "type": "key",
      "topics": [
        {
          "name": "json_parse",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm",
          "blurb": "This function can be used to parse a JSON string (either previously created using json_stringify or from any valid source), and convert it into a collection of arrays or structs, where an array is the equivalent of a JSON array and a struct is the equivalent of a JSON object. You supply the string to parse, and the function will return the top level array or struct which can then be used in your code. If you are not sure of the contents of the JSON, you can use the different Variable Functions (like typeof() and variable_struct_get_names() in case of a struct) to check the returned contents. Note that trying to parse an invalid value (i.e.: not a string) will throw an exception error.",
          "syntax": "json_parse(json)"
        }
      ],
      "keys": []
    },
    {
      "name": "json_stringify",
      "type": "key",
      "topics": [
        {
          "name": "json_stringify",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm",
          "blurb": "With this function you can convert single or nested structs and arrays into a valid JSON string. You supply the initial value to use (an array index or a struct reference) and then the function will \"stringify\" it, converting it into a JSON string (converting GameMaker arrays into JSON arrays, and GameMaker structs into JSON objects).",
          "syntax": "json_stringify(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_autocapitalize_characters",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_autocapitalize_none",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_autocapitalize_sentences",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_autocapitalize_words",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_continue",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_default",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_done",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_emergency",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_go",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_google",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_join",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_next",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_route",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_search",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_send",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_returnkey_yahoo",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_type_ascii",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_type_default",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_type_email",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_type_numbers",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_type_phone",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_type_phone_name",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "kbv_type_url",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "Keyboard Shortcuts",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Shortcuts",
          "type": "topic",
          "url": "IDE_Navigation/Keyboard_Shortcuts.htm",
          "blurb": "There are a huge number of keyboard shortcuts available for GameMaker, and although most of them are marked in the IDE beside the menu items that they relate too, not all of them are or are obvious to the user at the start. Here you can find a complete list of all the keyboard shortcuts for an easy reference guide. In general, shortcuts fall into the following three categories:"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_check",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_check",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_check.htm",
          "blurb": "With this function you can check to see if a key is held down or not. Unlike the keyboard_check_pressed() or keyboard_check_released() functions which are only triggered once when the key is pressed or released, this function is triggered every step that the key is held down for. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.",
          "syntax": "keyboard_check(key)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_check_direct",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_check_direct",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_check_direct.htm",
          "blurb": "This function will return true if the key with the particular keycode is pressed, or false if it is not, by checking the hardware directly. It allows for a few more checks, in particular you can use keycodes vk_lshift, vk_lcontrol, vk_lalt, vk_rshift, vk_rcontrol and vk_ralt to check whether the left or right shift, control or alt key is pressed. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.",
          "syntax": "keyboard_check_direct(key)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_check_pressed",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_check_pressed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_check_pressed.htm",
          "blurb": "With this function you can check to see if a key has been pressed or not. Unlike the keyboard_check() function, this function will only run once for every time the key is pressed down, so for it to trigger again, the key must be first released and then pressed again. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.",
          "syntax": "keyboard_check_pressed(key)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_check_released",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_check_released",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_check_released.htm",
          "blurb": "With this function you can check to see if a key has been released or not. Unlike the keyboard_check() function, this function will only run once for every time the key is lifted, so for it to trigger again, the key must be first pressed and then released again. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.",
          "syntax": "keyboard_check_released(key)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_clear",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_clear.htm",
          "blurb": "With this function you can clear the current keyboard state, which essentially means that if the key is being held down, it will no longer be recognised until it is released again (which won't trigger the Keyboard Key Released event either on this occasion) and pressed again. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed\non the main Keyboard Input page.",
          "syntax": "keyboard_clear(key)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_get_map",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_get_map",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_get_map.htm",
          "blurb": "Sometimes you may wish to get the ascii code for a mapped key (to see if it is already mapped, for example) which is what this function returns. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.",
          "syntax": "keyboard_get_map(key)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_get_numlock",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_get_numlock",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_get_numlock.htm",
          "blurb": "You can use this function to find the status of the keypad number lock with true being returned for on, and false returned for off.",
          "syntax": "keyboard_get_numlock()"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_key",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_key",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_key.htm",
          "blurb": "With this variable you can get the keycode of the key that is currently being pressed and it will return 0 if no key is being pressed when the check is done.",
          "syntax": "keyboard_key"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_key_press",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_key_press",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_key_press.htm",
          "blurb": "With this function you can simulate the press of any key on the keyboard. When used, the key will be flagged as being pressed until the corresponding release function is called (see keyboard_key_release()). The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.",
          "syntax": "keyboard_key_press(key)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_key_release",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_key_release",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_key_release.htm",
          "blurb": "With this function you can simulate the release of any key on the keyboard. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.",
          "syntax": "keyboard_key_release(key)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_lastchar",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_lastchar",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_lastchar.htm",
          "blurb": "This variable stores a string of the last key pressed. This variable is not read only and you can change it, for example to set it to \"\" (an empty string) if you handled it already.",
          "syntax": "keyboard_lastchar"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_lastkey",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_lastkey",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_lastkey.htm",
          "blurb": "This variable refers to the value that keyboard_key was in the previous frame, returning the keycode of that key (all standard keycode constants are returned). This variable is not read only and you can change it, for example to set it to -1 if you handled it already.",
          "syntax": "keyboard_lastkey"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_set_map",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_set_map",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_set_map.htm",
          "blurb": "Sometimes when making a game you may wish one key to do the same as another. For example many people use the keys WASD for movement, but then many people also use the arrow keys! So, what to do? Well, you could code the movement system twice, but that is a bit complicated and thankfully redundant as this function permits you to \"map\" one key to another and so any input from either key will be interpreted as the same. To do this you choose a key that you want to map (key2\n- this will be the key that you write the code for) and a key that you want it to be mapped to (key1). After that, keypresses to either key will be interpreted by GameMaker as coming from key2. You can also use this function to design\na system where the user can define their own keys for playing by simply mapping the user input key to the key that you have coded into the game.",
          "syntax": "keyboard_set_map(key1, key2)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_set_numlock",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_set_numlock",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_set_numlock.htm",
          "blurb": "You can use this function to switch the keypad number-lock on or off (set to true for on, and false for off).",
          "syntax": "keyboard_set_numlock(value)"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_string",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_string.htm",
          "blurb": "This variable holds a string containing the last (at most) 1024 characters typed on the keyboard. This string will only contain printable characters typed, but it will correctly respond to pressing the backspace key by erasing the last character. This variable is not read only and you can change it, for example to set it to \"\" (an empty string) if you handled it already, and you can use the String Functions to manipulate it. Note that when using the on-screen Virtual Keyboard, only this variable will be updated with the keyboard input.",
          "syntax": "keyboard_string"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_unset_map",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_unset_map",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_unset_map.htm",
          "blurb": "With this function you can clear all re-mapped keys so that they return to their default state, ie: all keys to map to themselves."
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_virtual_height",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_height.htm",
          "blurb": "This function will return the current height in pixels of the virtual keyboard, based on the size of the display. If the keyboard is not visible, 0 will be returned."
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_virtual_hide",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_hide",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_hide.htm",
          "blurb": "This function can be used to hide the virtual keyboard on the device running the game. Calling this function will generate a System Asynchronous Event, in which the async_load DS map will be populated with the following key/value pairs:"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_virtual_show",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm",
          "blurb": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:"
        }
      ],
      "keys": []
    },
    {
      "name": "keyboard_virtual_status",
      "type": "key",
      "topics": [
        {
          "name": "keyboard_virtual_status",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_status.htm",
          "blurb": "This function can be used to get the status of the virtual keyboard on the device running the game. The function will return true if the OS virtual keyboard is visible/being shown or false if it is hidden/hiding."
        }
      ],
      "keys": []
    },
    {
      "name": "Language Features",
      "type": "key",
      "topics": [
        {
          "name": "Language Features",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features.htm",
          "blurb": "The GameMaker Language (GML) has a number of features which are part of the essential structure of all programs written with the language. Each of these will be used in any code you write multiple times, so you should know what they are and how they work before getting started with programming a project."
        }
      ],
      "keys": []
    },
    {
      "name": "layer",
      "type": "key",
      "topics": [
        {
          "name": "layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/layer.htm",
          "blurb": "This built-in variable is created for every instance in a room and contains the layer ID value of the layer that the instance is assigned to. This value can then be used in other functions like layer_get_depth() or it can be changed to move the instance to another layer, but note that if the layer being assigned does not exist in the current room, then you will get an error that will force your game to close. When assigning a layer, you must supply the unique layer ID as returned by the function layer_get_id() (when using named room layers), or as returned by the function layer_create() (when you create your own layers at run time).",
          "syntax": "layer"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_add_instance",
      "type": "key",
      "topics": [
        {
          "name": "layer_add_instance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_add_instance.htm",
          "blurb": "This function can be used to move a given instance from the layer it is currently on to another layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the instance ID of the instance to move between layers. For example, say your player is on a layer that is at a lower depth than another layer and you want it to appear behind the layers between the two. You can use this function to switch the player from the foreground layer to the background layer and make it appear behind the other layers being drawn.",
          "syntax": "layer_add_instance(layer_id, instance_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_alpha",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_alpha.htm",
          "blurb": "This function controls the alpha (transparency) of the background sprite. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the alpha value to use. Alpha can be between 0 (fully transparent) and 1 (fully opaque) with the default alpha value for the background\nelement being 1. Note that if the layer the background element has been assigned to is not visible - or the element itself has been made invisible - you will not see any difference with this function until the layer or element has been made visible\nagain.",
          "syntax": "layer_background_alpha(background_element_id, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_blend",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_blend",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_blend.htm",
          "blurb": "This function controls the blending (or \"tinting\") of the background sprite and the default value is -1 (which represents the constant c_white, which can also be used). Any other value (including internal colour constants like c_red, or c_aqua) will blend the specified colour with the original sprite. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the blending colour to use. Below you can see an example of a sprite that has been blended with different colours:",
          "syntax": "layer_background_blend(background_element_id, blend)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_change",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_sprite.htm",
          "blurb": "Using this function you can set the sprite index of the background element. You supply the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then give a sprite index to be used. The background element image will be replaced with the new sprite. If you give a value of -1, the element will have no sprite assigned (but will still exist and can have a sprite assigned again later).",
          "syntax": "layer_background_sprite(background_element_id, sprite_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_create",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_create.htm",
          "blurb": "With this function you can assign a sprite resource to a layer to be used as a background in your project. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and a sprite index (which would be the name of the sprite as shown in the Asset Browser), and it will be added to the layer. The function returns the unique ID value for the element, which can then be used in further layer functions for backgrounds.",
          "syntax": "layer_background_create(layer_id, sprite)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_destroy",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_destroy.htm",
          "blurb": "This function will destroy the given background element. You supply the background ID (which you get when you create the background using layer_background_create() or when you use the layer ID along with layer_get_background_id()) and this will remove it. Note that this does not remove the layer, only the background from it, and if the background is one that has been added in the room editor, then the next time you leave the room and then return, the background will be recreated again. However if the room is persistent, the background will be removed unless room persistence is switched off again.",
          "syntax": "layer_background_destroy(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_exists",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_exists.htm",
          "blurb": "You can use this function to check and see if a background element exists on any given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()) and the function will return either true if the element exists, or false if it does not.",
          "syntax": "layer_background_exists(layer_id, background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_alpha",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_alpha.htm",
          "blurb": "This function can be used to get the alpha value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return a value between 0 (fully transparent) and 1 (fully opaque).",
          "syntax": "layer_background_get_alpha(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_blend",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_blend",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_blend.htm",
          "blurb": "This function can be used to get the blend colour of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the colour assigned.",
          "syntax": "layer_background_get_blend(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_htiled",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_htiled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_htiled.htm",
          "blurb": "This function can be used to find out if the background element is tiled horizontally or not. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return either true if the element is currently tiled, or false if it is not.",
          "syntax": "layer_background_get_htiled(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_id",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_id.htm",
          "blurb": "This function can be used to retrieve the unique ID value of the background element on a layer. You supply the layer ID (which you get when you use the layer name along with layer_get_id()) and the function will return the ID value associated with the background element on the layer. Note that this function is specifically designed for use with backgrounds that have been added in the IDE, as if you add a background to a layer through code using the function layer_background_create(), then it will return the unique ID for the background element added.",
          "syntax": "layer_background_get_id(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_index",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_index.htm",
          "blurb": "This function can be used to get the current image index value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the image index being shown for the sprite. The function will return -1 if either the background element doesn't exist or the element doesn't have a valid sprite assigned to it.",
          "syntax": "layer_background_get_index(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_speed",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_speed.htm",
          "blurb": "This function can be used to get the current speed multiplier value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the speed multiplier being used to animate the sprite. Default value is 1.",
          "syntax": "layer_background_get_speed(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_sprite",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_sprite.htm",
          "blurb": "This function can be used to get the current sprite index value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return a real value that represents the sprite index being shown. If the element has no sprite assigned, the function will return -1.",
          "syntax": "layer_background_get_sprite(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_stretch",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_stretch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_stretch.htm",
          "blurb": "This function can be used to get the stretched state of the background element sprite. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return either true if the element sprite is currently stretched to fit the room, or false if it is not.",
          "syntax": "layer_background_get_stretch(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_visible",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_visible.htm",
          "blurb": "This function can be used to get the visible state of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return either true if the element is currently visible, or false if it is not. Note that this return value is not affected by whether the layer the element is on is visible or not.",
          "syntax": "layer_background_get_visible(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_vtiled",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_vtiled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_vtiled.htm",
          "blurb": "This function can be used to find out if the background element is tiled vertically or not. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return either true if the element is currently tiled, or false if it is not.",
          "syntax": "layer_background_get_vtiled(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_xscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_xscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_xscale.htm",
          "blurb": "This function can be used to get the current scale multiplier value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the scale multiplier being used to draw the sprite. Default value is 1.",
          "syntax": "layer_background_get_xscale(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_get_yscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_get_yscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_yscale.htm",
          "blurb": "This function can be used to get the current scale multiplier value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the scale multiplier being used to draw the sprite. Default value is 1.",
          "syntax": "layer_background_get_yscale(background_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_htiled",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_htiled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_htiled.htm",
          "blurb": "Using this function you can change whether the given background element on a layer should be tiled horizontally or not. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the tiling value. If set to true then the element will be displayed tiled horizontally across the room, and when set to false, the element will not be tiled. This function is for 2D projects only, and will not work correctly when a 3D camera projection is used.",
          "syntax": "layer_background_htiled(background_element_id, tiled)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_index",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_index.htm",
          "blurb": "This function can be used to set the image index of the background sprite which has multiple sub-images. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the image index to use. If you set a value outside of the range of sub-images, then the image index will loop around.",
          "syntax": "layer_background_index(background_element_id, image_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_speed",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_speed.htm",
          "blurb": "This function can be used to set the speed of an animating sprite that has been assigned to a background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the animation speed. If the IDE has set the animation speed for the sprite used to be calculated as Frames Per Game Frame, then the speed value given is a multiplier, with 1 being the default value, and setting it to 0.5 will half the animation speed, while setting it to 2 will double it. However, if the IDE has set the animation speed for the sprite used to be calculated as Frames Per Second, then the speed value given is a literal frames per second value, so setting this to 5, for example, will set the animation to loop 5 frames every second that the game runs. If the background element has no sprite attached or the sprite used has no sub-images, this function will have no effect.",
          "syntax": "layer_background_speed(background_element_id, speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_sprite",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_sprite.htm",
          "blurb": "Using this function you can set the sprite index of the background element. You supply the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then give a sprite index to be used. The background element image will be replaced with the new sprite. If you give a value of -1, the element will have no sprite assigned (but will still exist and can have a sprite assigned again later).",
          "syntax": "layer_background_sprite(background_element_id, sprite_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_stretch",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_stretch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_stretch.htm",
          "blurb": "Using this function you can toggle a background element sprite to stretch to fit the room or remain at 1:1 with the resolution. You supply the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the stretch argument to true or false. When set to true the element sprite will be stretched to fit the room (either scaled up or scaled down depending on the sizes of the sprite and the room), and when set to false, the element sprite will be displayed at its native resolution.",
          "syntax": "layer_background_stretch(background_element_id, stretch)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_visible",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_visible.htm",
          "blurb": "Using this function you can toggle a background elements visibility. You supply the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the visible argument to true or false. When set to true the element will be displayed, and when set to false, the element will not be displayed. Note that this is dependent on the layer visibility, and even if the background element is flagged as visible, it will not be drawn if the layer it is on is flagged as not visible.",
          "syntax": "layer_background_visible(background_element_id, visible)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_vtiled",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_vtiled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_vtiled.htm",
          "blurb": "Using this function you can change whether the given background element on a layer should be tiled vertically or not. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the tiling value. If set to true then the element will be displayed tiled vertically down the room, and when set to false, the element will not be tiled. This function is for 2D projects only, and will not work correctly when a 3D camera projection is used.",
          "syntax": "layer_background_vtiled(background_element_id, tiled)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_xscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_xscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_xscale.htm",
          "blurb": "This function can be used to set the scale along the x-axis of a background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the scale value. The scale value you give is a multiplier that will be used to change the way the background element is displayed, where a value of 0.5 would display the element at half scale, and a value of 2 would display at double scale. Note that negative values are valid, and will \"flip\" the element around the (0,0) position, so an x scale of -1 would show the\nimage reversed.",
          "syntax": "layer_background_xscale(background_element_id, xscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_background_yscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_background_yscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_yscale.htm",
          "blurb": "This function can be used to set the scale along the y-axis of a background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the scale value. The scale value you give is a multiplier that will be used to change the way the background element is displayed, where a value of 0.5 would display the element at half scale, and a value of 2 would display at double scale. Note that negative values are valid, and will \"flip\" the element around the (0,0) position, so an x scale of -1 would show the image reversed.",
          "syntax": "layer_background_yscale(background_element_id, yscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_clear_fx",
      "type": "key",
      "topics": [
        {
          "name": "layer_clear_fx",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_clear_fx.htm",
          "blurb": "This function is used to clear the FX struct that is applied to the specified layer. You specify either the ID or the name of the layer you want to modify and this function will remove the FX struct that is applied to that layer, disabling its effects completely.",
          "syntax": "layer_clear_fx(layer_name_or_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_create",
      "type": "key",
      "topics": [
        {
          "name": "layer_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_create.htm",
          "blurb": "This function is used to create a new layer within the current room. You supply the depth that the new layer is to occupy and the function returns the unique Layer ID value that can then be used to access the layer in further functions. You can also supply an optional \"name\" argument, which will enable you to give the layer a specific name (as a string), and instead of using the layer ID to access the layer, you can use this name string instead, although it should be noted that using name strings will have a greater impact on performance than using just the ID value. If you do not specify the name of the layer, then the created layer will be assigned a name with the format \"_layer_XXX\", where \"XXX\" is a hex value used to give the layer a unique name.",
          "syntax": "layer_create(depth, [name])"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_depth",
      "type": "key",
      "topics": [
        {
          "name": "layer_depth",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_depth.htm",
          "blurb": "This function can be used to change the depth of the given layer, changing the order in which its contents will be rendered to the screen. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and then give the new depth to set it to (an integer value form -16000 to 16000). The layer depth is defined as being higher when \"further away\" from the camera and lower when \"closer\" to the camera, so if you have three layers with depths -100, 0, 100, the layers will draw in the order 100, 0, -100, so that the \"top\" layer (i.e., the closest to the camera view and so drawn over everything else) will be the layer with the -100 depth.",
          "syntax": "layer_depth(layer_id, depth)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_destroy",
      "type": "key",
      "topics": [
        {
          "name": "layer_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_destroy.htm",
          "blurb": "This function will destroy the given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and this will remove it from the current room. If the layer is one that has been designed in the room editor, then the next time you leave the room and then return, the layer will be recreated again with the original contents, however if the room is persistent, the layer will be removed unless room persistence is switched off again. When you destroy a layer in this way, all it's contents will be removed too, so any reference IDs for backgrounds or tile maps, etc... will no longer be valid and any instances assigned to the layer will be destroyed (performing their Destroy Event at the same time, if they have one, as well as the Clean Up Event).",
          "syntax": "layer_destroy(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_destroy_instances",
      "type": "key",
      "topics": [
        {
          "name": "layer_destroy_instances",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_destroy_instances.htm",
          "blurb": "This function can be used to destroy all the instances assigned to the given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact), and then all instances that are on the layer will be removed from the game, triggering their Destroy and Clean Up events.",
          "syntax": "layer_destroy_instances(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_element_move",
      "type": "key",
      "topics": [
        {
          "name": "layer_element_move",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_element_move.htm",
          "blurb": "You can use this function to move an element from one layer to another. You give the element ID, as returned by the function used to create the element or the room editor or the function layer_get_all_elements(), and then you give the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact).",
          "syntax": "layer_element_move(element_id, layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_enable_fx",
      "type": "key",
      "topics": [
        {
          "name": "layer_enable_fx",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_enable_fx.htm",
          "blurb": "This function enables/disables the filter/effect assigned to a Room Layer. You specify either the ID or the name of the layer you want to modify, and then a boolean value telling whether the FX should be enabled (true) or disabled (false).",
          "syntax": "layer_enable_fx(layer_name_or_id, enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_exists",
      "type": "key",
      "topics": [
        {
          "name": "layer_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_exists.htm",
          "blurb": "This function can be used to check if the given layer exists. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return a boolean value of true if it exists or false if it does not.",
          "syntax": "layer_exists(layer_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_force_draw_depth",
      "type": "key",
      "topics": [
        {
          "name": "layer_force_draw_depth",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_force_draw_depth.htm",
          "blurb": "This function forces all layers to be drawn at the specified z depth. This does not change the order the layers are rendered in and they'll still be drawn in depth order, it simply changes what z value is used. In general you do not need to worry about this, but if you have layers that have a depth outside of the legal range (-16000 to 16000) then they won't be rendered, so you can force the Z depth to a reasonable value - 0 for example - and they will all be rendered fine. Note that this is generally only for use with legacy projects from previous version of GameMaker where you could have draw depths higher or lower than the permitted layer range.",
          "syntax": "layer_force_draw_depth(force, depth)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_fx_is_enabled",
      "type": "key",
      "topics": [
        {
          "name": "layer_fx_is_enabled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_fx_is_enabled.htm",
          "blurb": "This function returns whether the filter/effect for a layer is enabled.",
          "syntax": "layer_fx_is_enabled(layer_name_or_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_all",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_all.htm",
          "blurb": "This function will return an array populated with the unique ID values of each layer in the room.",
          "syntax": "layer_get_all()"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_all_elements",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_all_elements",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_all_elements.htm",
          "blurb": "You can use this function to get the element IDs of the given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return an array of IDs, where each entry in the array is a unique ID for an element on that layer. For example, if the layer is an Asset Layer, the array will be populated with the ID values for each sprite asset that is assigned to the layer. Note that using code to work with layers means that you can assign different element types to the same layer - so you can have sprite assets along with instances, for example - in which case you can then use the function layer_get_element_type() to get the type of element the ID relates to.",
          "syntax": "layer_get_all_elements(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_depth",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_depth",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_depth.htm",
          "blurb": "You can use this function to get the depth value associated with a given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return that layers depth as a real number. Note that depth is defined as being higher the \"further away\" from the camera and lower the \"closer\" to the camera, so if you have three layers with depths -100, 0, 100, the layers will draw in the order 100, 0, -100, so that the \"top\" layer (ie, the closest to the camera view and so drawn over everything else) will be the layer with the -100 depth.",
          "syntax": "layer_get_depth(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_element_layer",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_layer.htm",
          "blurb": "You can use this function to get the Layer ID that the given element is on. You supply the unique element ID value (for example, as returned by the function that created the element or from the room editor) and the function will return the unique ID of the layer that the element is found on. If the element ID given is not a valid one, then the function will return -1.",
          "syntax": "layer_get_element_layer(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_element_type",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
          "blurb": "You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
          "syntax": "layer_get_element_type(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_forced_depth",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_forced_depth",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_forced_depth.htm",
          "blurb": "This function can be used to retrieve the Z depth set for rendering layers within the room. See layer_force_draw_depth() for more information.",
          "syntax": "layer_get_forced_depth()"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_fx",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_fx",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm",
          "blurb": "This function is used to retrieve the FX struct for a layer. You specify either the ID or the name of the layer you want to target and the function will return a struct containing information on its applied effect. This struct will be similar to the struct you get from fx_create(), and the functions fx_get_parameter/s and fx_set_parameter/s can be used on it to read and modify its parameters.",
          "syntax": "layer_get_fx(layer_name_or_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_hspeed",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_hspeed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_hspeed.htm",
          "blurb": "You can use this function to retrieve the horizontal speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the horizontal speed, where a positive value is to the right and a negative value to the left. Default is 0 (unless set in the room editor).",
          "syntax": "layer_get_hspeed(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_id",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_id.htm",
          "blurb": "This function can be used to get the unique ID value for a given layer. In the IDE, all layers have a name and a type, and to be able to edit or change them through code you must give the layer ID value. This function is used to retrieve this ID by using the name (a string) of the layer (as written in the IDE). If you create a new layer through code using the function layer_create() then that function will return the unique ID value instead (dynamical created layers do not get names). Note that if you give the name of a layer that does not exist in the current room, then you will get an error and the project will crash.",
          "syntax": "layer_get_id(layer_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_id_at_depth",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_id_at_depth",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_id_at_depth.htm",
          "blurb": "You can use this function to get the IDs of all layers assigned a specific depth. You give the depth to check and the function will return an array with 1 or more entries depending on whether there are any layers at the given depth or not. If there are no layers at the given depth then the array will have a single entry at the [0] position with a value of -1, but, if there are layers at the depth, then an entry will be made in the array for each layer found - the entry value will be the unique ID value for a layer.",
          "syntax": "layer_get_id_at_depth(depth)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_name",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_name.htm",
          "blurb": "You can use this function to get the name of the given layer. You supply the unique layer ID value and if the layer is one of the named layers created in the room editor, then the function will return a string with the layer name. If the layer is not one of the room editor ones (ie: it was created using layer_create()) then an empty string will be returned.",
          "syntax": "layer_get_name(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_script_begin",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_script_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_script_begin.htm",
          "blurb": "You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and this function will return the script function index of the function assigned to run at the beginning of rendering for that layer, or it will return -1 if no function is assigned. You can assign script functions to a layer with layer_script_begin() and layer_script_end().",
          "syntax": "layer_get_script_begin(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_script_end",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_script_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_script_end.htm",
          "blurb": "This function returns the script function index of the function assigned to run at the end of rendering the given layer, or it will return -1 if no function is assigned. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact). You can assign script functions to a layer with layer_script_begin() and layer_script_end().",
          "syntax": "layer_get_script_end(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_shader",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_shader",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_shader.htm",
          "blurb": "This function can be used to check if the given layer has a shader assigned to it. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact), and the function will return either the shader index of the shader assigned, or -1 if no shader is assigned.",
          "syntax": "layer_get_shader(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_target_room",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_target_room",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_target_room.htm",
          "blurb": "This function will return the current room being targeted by the layer functions. See layer_set_target_room() for more information.",
          "syntax": "layer_get_target_room()"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_visible",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_visible.htm",
          "blurb": "With this function you can check whether a layer is visible or not. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return true if it is visible, and false otherwise.",
          "syntax": "layer_get_visible(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_vspeed",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_vspeed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_vspeed.htm",
          "blurb": "You can use this function to retrieve the vertical speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the vertical speed, where a positive value is down and a negative value up. Default is 0 (unless set in the room editor).",
          "syntax": "layer_get_vspeed(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_x",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_x.htm",
          "blurb": "You can use this function to retrieve the x position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the x position of the layer, relative to the (0,0) position of the room. Default is 0.",
          "syntax": "layer_get_x(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_get_y",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_y.htm",
          "blurb": "You can use this function to retrieve the y position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the x position of the layer, relative to the (0,0) position of the room. Default is 0.",
          "syntax": "layer_get_y(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_has_instance",
      "type": "key",
      "topics": [
        {
          "name": "layer_has_instance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_has_instance.htm",
          "blurb": "This function can be used to check if a given instance is currently assigned to the given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the instance ID of the instance to check for. You can also give an object_index (ie: the name of the object in the Asset Browser) and the function will check if any instances of that object are on the given layer. The function will return true if the instance is on the layer and false if it is not.",
          "syntax": "layer_has_instance(layer_id, instance_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_hspeed",
      "type": "key",
      "topics": [
        {
          "name": "layer_hspeed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_hspeed.htm",
          "blurb": "You can use this function to set the horizontal speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the speed value to set, where a positive value is to the right and a negative value to the left.",
          "syntax": "layer_hspeed(layer_id, hspd)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_instance_get_instance",
      "type": "key",
      "topics": [
        {
          "name": "layer_instance_get_instance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_instance_get_instance.htm",
          "blurb": "This function can be used to get the unique instance ID of the given instance element. You give the instance element ID (see the code example below for how to get this), and the function will return a real value that represents the unique instance id for the element. If the element is not an instance, the function will return -1.",
          "syntax": "layer_instance_get_instance(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_is_draw_depth_forced",
      "type": "key",
      "topics": [
        {
          "name": "layer_is_draw_depth_forced",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_is_draw_depth_forced.htm",
          "blurb": "This function can be used to check and see whether forced Z depth is enabled for rendering the layers in the project. See layer_force_draw_depth() for more information.",
          "syntax": "layer_is_draw_depth_forced()"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_reset_target_room",
      "type": "key",
      "topics": [
        {
          "name": "layer_reset_target_room",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_reset_target_room.htm",
          "blurb": "This function is used to reset the layer target to the current room. See the function layer_set_target_room() for further information.",
          "syntax": "layer_reset_target_room()"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_script_begin",
      "type": "key",
      "topics": [
        {
          "name": "layer_script_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_begin.htm",
          "blurb": "With this function you can assign a script function to a layer and it will be called before the layer is rendered. When adding a function to a layer, in this way it will be run at the start of each of the different draw events so you may want to check in the function assigned which event is currently rendering and adapt the code to suit. This can be done by checking the event_type and/or the event_number (see the extended example below). Note that the function is not meant to be called in any draw events or step events, but rather only needs to be called at the start of the room in the Room Creation Code or in the Create Event / Room Start Event of an instance.",
          "syntax": "layer_script_begin(layer_id, script)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_script_end",
      "type": "key",
      "topics": [
        {
          "name": "layer_script_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_end.htm",
          "blurb": "With this function you can assign a script function to a layer and it will be called after the layer is rendered. When adding a function to a layer in this way, it will be run at the end of each of the different draw events so you may want to check in the function assigned which event is currently finished rendering and adapt the code to suit. This can be done by checking the event_type and/or the event_number (see the extended example below). Note that the function is not meant to be called in any draw events or step events, but rather only needs to be called at the start of the room in the Room Creation Code or in the Create Event / Room Start Event of an instance.",
          "syntax": "layer_script_end(layer_id, script)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_create",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_create.htm",
          "blurb": "With this function you can create an instance of a sequence asset on the given layer. You supply the layer ID which can be a string of the layer name - as defined in the room editor - or the unique layer ID - as returned by the function layer_get_id(), as well as the X and Y position in the room to create the sequence at, and finally the ID of the sequence to create. The sequence ID is the name constant that you defined in the Asset Browser for the sequence. The function will return the unique ID of the sequence element, which can then be used in all further layer functions for sequences, or it can be used to retrieve the sequence instance struct using the function layer_sequence_get_instance().",
          "syntax": "layer_sequence_create(layer_id, x, y, sequence_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_destroy",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_destroy.htm",
          "blurb": "With this function you can destroy (remove from the room) a sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions and the sequence will be destroyed.",
          "syntax": "layer_sequence_destroy(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_exists",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_exists.htm",
          "blurb": "With this function you can check to see if a sequence element exists on the given layer. You supply the layer ID which can be a string of the layer name - as defined in the room editor - or the unique layer ID - as returned by the function layer_get_id(), as well the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return true if the given element exists or false otherwise.",
          "syntax": "layer_sequence_exists(layer_id, sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_angle",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_angle.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current angle of the sequence element in the game room. Note that angles are returned in degrees, and 0º is to the right, 90º is up, 180º is to the left and 270º is down.",
          "syntax": "layer_sequence_get_angle(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_headdir",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_headdir",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_headdir.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current playhead direction, which will be one of the constants listed below.",
          "syntax": "layer_sequence_get_headdir(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_headpos",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_headpos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_headpos.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current playhead position (the current frame the playhead is on).",
          "syntax": "layer_sequence_get_headpos(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_instance",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_instance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_instance.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the sequence instance struct. You can find out more about the format of the sequence instance struct on this page.",
          "syntax": "layer_sequence_get_instance(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_length",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_length",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_length.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the length of the sequence. This is the number of frames that the sequence will run for.",
          "syntax": "layer_sequence_get_length(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_sequence",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_sequence",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_sequence.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the sequence object struct. This function bypasses the need to first get the sequence instance struct and permits you to access the sequence data directly. You can find out more about the format of the sequence object struct on this page.",
          "syntax": "layer_sequence_get_sequence(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_speedscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_speedscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_speedscale.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current playback speed scale. This is the multiplier value used to slow down or speed up the playback speed. A value of 1 is the default value, and values lower than 1 mean that playback is slowed down and values greater than 1 mean that playback is sped up.",
          "syntax": "layer_sequence_get_speedscale(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_x",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_x.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current X position in the game room for the sequence.",
          "syntax": "layer_sequence_get_x(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_xscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_xscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_xscale.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current scale along the X axis of the sequence element in the game room.",
          "syntax": "layer_sequence_get_xscale(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_y",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_y.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current Y position in the game room for the sequence.",
          "syntax": "layer_sequence_get_y(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_get_yscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_get_yscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_yscale.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current scale along the Y axis of the sequence element in the game room.",
          "syntax": "layer_sequence_get_yscale(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_headdir",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_headdir",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_headdir.htm",
          "blurb": "With this function you can set the direction for the given sequence playhead. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions, and then give the playhead direction which should be one of the following constants:",
          "syntax": "layer_sequence_headdir(sequence_element_id, direction)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_headpos",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_headpos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_headpos.htm",
          "blurb": "With this function you can set the playhead position of a sequence element to a specific frame. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the new position to set. Note that the position is in frames and if you set a value greater than the total number of frames (or less than 0) then the actual final playhead position will depend on the type of sequence playback that has been selected, following these rules:",
          "syntax": "layer_sequence_headpos(sequence_element_id, position)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_is_finished",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_is_finished",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_is_finished.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will check if the sequence is finished playing or not, returning true if it is, and false if it is not. Note that this is only applicable when the sequence is not set to loop or ping-pong in the playback mode.",
          "syntax": "layer_sequence_is_finished(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_is_paused",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_is_paused",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_is_paused.htm",
          "blurb": "With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will check if the sequence is currently paused or not, returning true if it is paused, and false if it is not.",
          "syntax": "layer_sequence_is_paused(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_pause",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_pause",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_pause.htm",
          "blurb": "With this function you can pause the playback of the given sequence. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions and the function will pause the sequence until you begin playback again using the function layer_sequence_play().",
          "syntax": "layer_sequence_pause(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_play",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_play",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_play.htm",
          "blurb": "With this function you can start the playback of the given sequence. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions and the function will play the sequence, which you can then pause if required using the function layer_sequence_pause().",
          "syntax": "layer_sequence_play(sequence_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_speedscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_speedscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_speedscale.htm",
          "blurb": "With this function you can change the playback speed of the given sequence. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions and then a speed scale value. This value is a multiplier, where 1 is the default playback speed and values less than 1 will slow the playback and values larger than 1 will speed it up, eg: a value of 0.5 would be half playback speed, while a value of 2 would be double playback speed.",
          "syntax": "layer_sequence_speedscale(sequence_element_id, speedscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_x",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_x.htm",
          "blurb": "With this function you can set the position along the X (horizontal) axis of the room for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the X position to set and the sequence will be moved to the new position.",
          "syntax": "layer_sequence_x(sequence_element_id, pos_x)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_xscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_xscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_xscale.htm",
          "blurb": "With this function you can set the X scale for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the new scale to set on the X axis and the sequence will be scaled by this amount. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sequence), larger values will scale up and negative values will mirror the sequence about its origin and scale it unless the value used is exactly -1 (in which case the sequence is just mirrored about its origin with no scaling).",
          "syntax": "layer_sequence_xscale(sequence_element_id, xscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_y",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_angle.htm",
          "blurb": "With this function you can set the angle of rotation for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the new angle to set and the sequence will be rotated about its origin to the new position. Angles in GameMaker are calculated with 0º to the right, and go anti-clockwise - so 90º is up, 180º is left and 270º is down - and the default angle for a sequence would be 0º.",
          "syntax": "layer_sequence_angle(sequence_element_id, angle)"
        },
        {
          "name": "layer_sequence_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_y.htm",
          "blurb": "With this function you can set the position along the Y (vertical) axis of the room for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the Y position to set and the sequence will be moved to the new position.",
          "syntax": "layer_sequence_y(sequence_element_id, pos_y)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sequence_yscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_yscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_yscale.htm",
          "blurb": "With this function you can set the Y scale for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the new scale to set on the Y axis and the sequence will be scaled by this amount. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sequence), larger values will scale up and negative values will flip the sequence about its origin and scale it unless the value used is exactly -1 (in which case the sequence is just flipped about its origin with no scaling).",
          "syntax": "layer_sequence_yscale(sequence_element_id, xscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_set_fx",
      "type": "key",
      "topics": [
        {
          "name": "layer_set_fx",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_set_fx.htm",
          "blurb": "This function is used to assign an FX struct to a Room Layer. You specify either the ID or the name of the layer you want to modify, and then an FX struct (as returned from fx_create() or layer_get_fx()) which will be applied to the specified layer, making the effect visible in the room.",
          "syntax": "layer_set_fx(layer_name_or_id, filter_or_effect)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_set_target_room",
      "type": "key",
      "topics": [
        {
          "name": "layer_set_target_room",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_set_target_room.htm",
          "blurb": "When you call this function you are telling GameMaker that all further layer functions should be applied to the given room. In this way you can procedurally change or generate layers and layer contents in a room that is not the current room. When you are finished adding layers or layer elements to a room, call the function layer_reset_target_room() to reset the room target (or call this function again with a room argument of -1). Note that this function can only be used on rooms other than the current room, and is designed so that you can add/remove layers and layer elements to rooms other than the room that is currently running.",
          "syntax": "layer_set_target_room(room)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_set_visible",
      "type": "key",
      "topics": [
        {
          "name": "layer_set_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_set_visible.htm",
          "blurb": "With this function you can toggle the visibility of a layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) as well as the toggle value for the layer where visible is true and invisible is false.",
          "syntax": "layer_set_visible(layer_id, visible)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_shader",
      "type": "key",
      "topics": [
        {
          "name": "layer_shader",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_shader.htm",
          "blurb": "With this function you can assign a shader resource to any given layer and the layer will then be rendered using that shader. You supply either the unique ID value of the layer or the name of the layer (as a string - this will have a performance impact) , along with the ID of the shader to use. The shader must have been created previously in the Asset Browser and the shader index (the name of the shader resource) is then passed to this function. If the layer assigned has instances added to it, then the shader will be applied to all the draw events that the instance uses - for example if the instance has a Draw GUI Begin event, then the shader will be applied automatically to it. The shader will also affect any other graphic elements drawn on that layer, like sprite assets or tile maps.",
          "syntax": "layer_shader(layer_id, shader)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_alpha",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_alpha.htm",
          "blurb": "This function controls the alpha (transparency) of the sprite on the asset layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the alpha value to use. Alpha can be between 0 (fully transparent) and 1 (fully opaque) with the default alpha value for the sprite element being 1. Note\nthat if the layer the sprite element has been assigned to is not visible - or the element itself has been made invisible - you will not see any difference with this function until the layer or element has been made visible again.",
          "syntax": "layer_sprite_alpha(sprite_element_id, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_angle",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_angle.htm",
          "blurb": "Using this function you can change the angle for the given sprite element on a layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the angle value, from 0 to 359 anti-clockwise, where 0 is to the right, 90 is to the top, 180 is to the left and 270 is to the bottom. If you set a value greater than 360 this will be looped to bring it within the 0 - 359 range.",
          "syntax": "layer_sprite_angle(sprite_element_id, angle)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_blend",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_blend",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_blend.htm",
          "blurb": "This function controls the blending (or \"tinting\") of the sprite sprite and the default value is -1 (which represents the constant c_white, which can also be used). Any other value (including internal colour constants like c_red, or c_aqua) will blend the specified colour with the original sprite. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use\nthe function layer_sprite_get_id()), and then set the blending colour to use. Below you can see an example of a sprite that has been blended with different colours:",
          "syntax": "layer_sprite_blend(sprite_element_id, blend)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_change",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_change",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_change.htm",
          "blurb": "Using this function you can change the sprite resource assigned to a given sprite element on a layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then supply a sprite index element asset will be changed. Note that if the sprite has sub-images then it will animate too (this can be controlled using the layer_sprite_index() and layer_sprite_speed() functions). Note that you can assign a value of -1 as the new sprite index and no sprite will be shown, although the element will still exist and can still be changed again later.",
          "syntax": "layer_sprite_change(sprite_element_id, sprite_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_create",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_create.htm",
          "blurb": "With this function you can assign a sprite resource to a layer to be used in your project. You supply the layer ID (which you get when you create the layer using layer_create() or when you use the layer name along with layer_get_id()), a position within the room, and a sprite index (which would be the name of the sprite as shown in the Asset Browser), and it will be added to the layer. The function returns the unique ID value for the element, which can then be used in further layer functions for sprites.",
          "syntax": "layer_sprite_create(layer_id, x, y, sprite)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_destroy",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_destroy.htm",
          "blurb": "This function will destroy the given sprite element. You supply the sprite ID (which you get when you create the sprite using layer_sprite_create() or when you use the layer ID along with layer_get_sprite_id()) and this will remove it. Note that this does not remove the layer, only the sprite from it, and if the sprite is one that has been added in the room editor, then the next time you leave the room and then return, the sprite will be recreated again. However if the room is persistent, the sprite will be removed unless room persistence is switched off again.",
          "syntax": "layer_sprite_destroy(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_exists",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_exists.htm",
          "blurb": "You can use this function to check and see if a sprite element exists on any given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()) and the function will return either true if the element exists, or false if it does not.",
          "syntax": "layer_sprite_exists(layer_id, sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_alpha",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_alpha",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_alpha.htm",
          "blurb": "This function can be used to get the alpha value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return a value between 0 (fully transparent) and 1 (fully opaque).",
          "syntax": "layer_sprite_get_alpha(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_angle",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_angle.htm",
          "blurb": "This function can be used to get the current angle for the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value for the angle. This value will be between 0 and 360, where 0 represents right, 90 up, 180 left and 270 down.",
          "syntax": "layer_sprite_get_angle(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_blend",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_blend",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_blend.htm",
          "blurb": "This function can be used to get the blend colour of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value that represents the colour assigned.",
          "syntax": "layer_sprite_get_blend(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_id",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_id.htm",
          "blurb": "This function can be used to retrieve the unique ID value of a sprite element on a layer. You supply the layer ID (which you get when you create the layer using layer_create() or when you use the layer name along with layer_get_id()) and the name of the sprite element as defined in the Room Editor. The function will return the ID value associated with that sprite element on the layer.",
          "syntax": "layer_sprite_get_id(layer_id, sprite_element_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_index",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_index.htm",
          "blurb": "This function can be used to get the current image index value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value that represents the image index being shown for the sprite. The function will return -1 if either the sprite element doesn't exist or the element doesn't have a valid sprite assigned to it.",
          "syntax": "layer_sprite_get_index(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_speed",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_speed.htm",
          "blurb": "This function can be used to get the current speed multiplier value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value that represents the speed multiplier being used to animate the sprite. Default value is 1.",
          "syntax": "layer_sprite_get_speed(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_sprite",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_sprite.htm",
          "blurb": "This function can be used to get the current sprite index of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return a real value that represents the sprite index being shown. If the element has no sprite assigned, the function will return -1.",
          "syntax": "layer_sprite_get_sprite(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_x",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_x.htm",
          "blurb": "This function can be used to get the x position of the sprite element in the room. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return the x position value.",
          "syntax": "layer_sprite_get_x(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_xscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_xscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_xscale.htm",
          "blurb": "This function can be used to get the current scale multiplier along the x axis for the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value for the x scale, where 1 is no scaling.",
          "syntax": "layer_sprite_get_xscale(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_y",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_y.htm",
          "blurb": "This function can be used to get the y position of the sprite element in the room. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return the y position value.",
          "syntax": "layer_sprite_get_y(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_get_yscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_get_yscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_yscale.htm",
          "blurb": "This function can be used to get the current scale multiplier along the y axis for the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value for the y scale, where 1 is no scaling.",
          "syntax": "layer_sprite_get_yscale(sprite_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_index",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_index.htm",
          "blurb": "This function can be used to set the image index of a sprite asset which has multiple sub-images on a layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the image index to use. If you set a value outside of the range of sub-images, then the image index will loop around.",
          "syntax": "layer_sprite_index(sprite_element_id, image_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_speed",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_speed.htm",
          "blurb": "This function can be used to set the speed of an animating image that has been assigned to a sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the animation speed. If the IDE has set the animation speed for the sprite used to be calculated as Frames Per Game Frame, then the speed value given is a multiplier, with 1 being the default value, and setting it to 0.5 will half the animation speed, while setting it to 1.5 will double it. However, if the IDE has set the animation speed for the sprite used to be calculated as Frames Per Second, then the speed value given is a literal frames per second value, so setting this to 5, for example, will set the animation to loop 5 frames every second that the game runs. If the sprite used has no sub-images, this function will have no effect.",
          "syntax": "layer_sprite_speed(sprite_element_id, speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_x",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_x.htm",
          "blurb": "This function controls the position along the x-axis of the room of the asset sprite element on the layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the x value to use (based on the room coordinates).",
          "syntax": "layer_sprite_x(sprite_element_id, x)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_xscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_xscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_xscale.htm",
          "blurb": "Using this function you can change whether the given sprite element on a layer should be scaled along the x axis or not. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the scale value. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sprite used), larger values will scale up, and negative values will flip the sprite and scale it unless the value used is exactly -1 (in which case the sprite used is just flipped right-to-left about its origin position with no scaling).",
          "syntax": "layer_sprite_xscale(sprite_element_id, xscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_y",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_y.htm",
          "blurb": "This function controls the position along the y-axis of the room of the asset sprite element on the layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the y value to use (based on the room coordinates).",
          "syntax": "layer_sprite_y(sprite_element_id, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_sprite_yscale",
      "type": "key",
      "topics": [
        {
          "name": "layer_sprite_yscale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_yscale.htm",
          "blurb": "Using this function you can change whether the given sprite element on a layer should be scaled along the y axis or not. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the scale value. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the height of the sprite used), larger values will scale up, and negative values will mirror the sprite and scale it unless the value used is exactly -1 (in which case the sprite used is just mirrored top-to-bottom about its (0, 0) position with no scaling).",
          "syntax": "layer_sprite_yscale(sprite_element_id, yscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_tilemap_create",
      "type": "key",
      "topics": [
        {
          "name": "layer_tilemap_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/layer_tilemap_create.htm",
          "blurb": "With this function you can assign a tile-set resource to a layer to be used as a tile map in your project. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and then an initial (x, y) position to add the tile map to the room, the tile set resource to use, and then the width and height of the tile map in cells (ie: a width of 20 and a height of 10 will create a tile map with 200 cells that is 20 cells wide and 10 cells tall), with the size of the cells themselves being defined by the tile set chosen. It is worth noting that you cannot place tiles at negative positions within the tile map, so all tiles must be placed within the cell spaces 0 to width - 1, 0 to height - 1.",
          "syntax": "layer_tilemap_create(layer_id, x, y, tileset, width, height)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_tilemap_destroy",
      "type": "key",
      "topics": [
        {
          "name": "layer_tilemap_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/layer_tilemap_destroy.htm",
          "blurb": "This function will destroy the given tile map element. You supply the tile map ID (which you get when you create the tile map using layer_tilemap_create() or when you use the layer ID along with layer_get_tilemap_id()) and this will remove it. Note that this does not remove the layer, only the tile map from it, and if the tile map is one that has been added in the room editor, then the next time you leave the room and then return, the tile map will be recreated again. However if the room is persistent, the tile map will be removed unless room persistence is switched off again.",
          "syntax": "layer_tilemap_destroy(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_tilemap_exists",
      "type": "key",
      "topics": [
        {
          "name": "layer_tilemap_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/layer_tilemap_exists.htm",
          "blurb": "You can use this function to check and see if a tile map element exists on any given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()) and the function will return either true if the element exists, or false if it does not.",
          "syntax": "layer_tilemap_exists(layer_id, tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_tilemap_get_id",
      "type": "key",
      "topics": [
        {
          "name": "layer_tilemap_get_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/layer_tilemap_get_id.htm",
          "blurb": "This function can be used to retrieve the unique ID value of the tile map element on a layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return the ID value associated with the tile map element on the layer. Note that this function is specifically designed for use with tile maps that have been added in the IDE, as if you add a tile map to a layer through code using the function layer_tilemap_create(), then it will return the unique ID for the tile map element added. If the given tilemap ID is incorrect or the tilemap doesn't exist, the function will return -1.",
          "syntax": "layer_tilemap_get_id(layer_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_vspeed",
      "type": "key",
      "topics": [
        {
          "name": "layer_vspeed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_vspeed.htm",
          "blurb": "You can use this function to set the vertical speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the speed value to set, where a positive value is downwards and a negative value upwards.",
          "syntax": "layer_vspeed(layer_id, vspd)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_x",
      "type": "key",
      "topics": [
        {
          "name": "layer_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_x.htm",
          "blurb": "You can use this function to set the x position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will move the layer the given number of pixels along the horizontal axis of the room.",
          "syntax": "layer_x(layer_id, x)"
        }
      ],
      "keys": []
    },
    {
      "name": "layer_y",
      "type": "key",
      "topics": [
        {
          "name": "layer_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_y.htm",
          "blurb": "You can use this function to set the y position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will move the layer the given number of pixels along the vertical axis of the room.",
          "syntax": "layer_y(layer_id, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "layerelementtype_background",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
          "blurb": "You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
          "syntax": "layer_get_element_type(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layerelementtype_instance",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
          "blurb": "You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
          "syntax": "layer_get_element_type(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layerelementtype_particlesystem",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
          "blurb": "You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
          "syntax": "layer_get_element_type(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layerelementtype_sequence",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
          "blurb": "You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
          "syntax": "layer_get_element_type(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layerelementtype_sprite",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
          "blurb": "You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
          "syntax": "layer_get_element_type(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layerelementtype_tile",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
          "blurb": "You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
          "syntax": "layer_get_element_type(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "layerelementtype_tilemap",
      "type": "key",
      "topics": [
        {
          "name": "layer_get_element_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
          "blurb": "You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
          "syntax": "layer_get_element_type(element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "lengthdir_x",
      "type": "key",
      "topics": [
        {
          "name": "lengthdir_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm",
          "blurb": "This function is used to get the x component of a position \"len\" pixels from the starting point and in direction \"dir\". If you imagine a circle around your instance, and then imagine a point anywhere on that circle, to move to that point we need to move the object so many pixels in that direction... so this function (when used with lengthdir_y()) gets the position of that point on the circle to be used in code by the instance. See\nthe image below for details:",
          "syntax": "lengthdir_x(len, dir)"
        }
      ],
      "keys": []
    },
    {
      "name": "lengthdir_y",
      "type": "key",
      "topics": [
        {
          "name": "lengthdir_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm",
          "blurb": "This function is used to get the y component of a position \"len\" pixels from the starting point and in direction \"dir\". If you imagine a circle around your instance, and then imagine a point anywhere on that circle, to move to that point we need to move the object so many pixels in that direction... so this function (when used with lengthdir_x()) gets the position of that point on the circle to be used in code by the instance. See\nthe image below for details:",
          "syntax": "lengthdir_y(len, dir)"
        }
      ],
      "keys": []
    },
    {
      "name": "lerp",
      "type": "key",
      "topics": [
        {
          "name": "lerp",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/lerp.htm",
          "blurb": "With this function you can find the value that equates to the position between two other values for a given percentage. So if you do, for example:",
          "syntax": "lerp(a, b, amt)"
        }
      ],
      "keys": []
    },
    {
      "name": "Licencing",
      "type": "key",
      "topics": [
        {
          "name": "Licencing & Logging In",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Licencing_Information.htm",
          "blurb": "Once you have downloaded and installed GameMaker, the first time you use it you will be requested to input your licence details:"
        }
      ],
      "keys": []
    },
    {
      "name": "lives",
      "type": "key",
      "topics": [
        {
          "name": "lives",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/lives.htm",
          "blurb": "This variable is global in scope and is used to hold a numeric value which is usually used for the player lives. This variable is only designed to support legacy projects from previous versions of GameMaker and should not be used in new projects as it may be deprecated in the future.",
          "syntax": "lives"
        }
      ],
      "keys": []
    },
    {
      "name": "ln",
      "type": "key",
      "topics": [
        {
          "name": "ln",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/ln.htm",
          "blurb": "The natural logarithm ln(n) is the amount of time needed to reach a certain level of continuous growth, where n is the level reached. So if we want to find out how many time units we need to get 20 growth we would use ln(20) which returns 2.99 units of time to get that amount of growth.",
          "syntax": "ln(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "load_csv",
      "type": "key",
      "topics": [
        {
          "name": "load_csv",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/load_csv.htm",
          "blurb": "This function will load a CSV format file and convert it into a DS grid, returning the unique ID value for the grid created.",
          "syntax": "load_csv(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "Local Asset Packages",
      "type": "key",
      "topics": [
        {
          "name": "Local Asset Packages",
          "type": "topic",
          "url": "IDE_Tools/Local_Asset_Packages.htm",
          "blurb": "Under the Tools Menu you have two options for creating and importing Local Asset Packages. A Local Asset Package is a group of resources saved using the *.yymp file format that can be easily installed into existing projects. What this means is that you can create your own library of packages for commonly used resources, like script libraries, splash screen intros, menu systems, etc... without having to use the GameMaker Marketplace."
        }
      ],
      "keys": []
    },
    {
      "name": "Local Variables",
      "type": "key",
      "topics": [
        {
          "name": "Local Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Local_Variables.htm",
          "blurb": "A local variable is one that we create for a specific event or function only and then discard when the event or function has finished. If it is created in a custom function then the local variable is only available to the function and then discarded when the function has finished. Why would we need them? Well, variables take up space in memory and it may be that we are only going to use them for one operation or function in which case we only need to have it in memory for that short time that it's used. This keeps your code base clean and tidy as well as keeping memory space optimised for the things that really need it. To declare a local variable we use the var operator like this:"
        }
      ],
      "keys": []
    },
    {
      "name": "log10",
      "type": "key",
      "topics": [
        {
          "name": "log10",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/log10.htm",
          "blurb": "This function is similar to the log2(n) function, only that log10(n) gets the number of 10's that we need to multiply together to get n. So log10(100) returns 2, as multiplying 10 by itself gives 100, log10(1000) returns 3 as 10x10x10=1000 etc... The number does not have to be divisible by ten, however, but this will still return an appropriate value, for example if we have log10(101) we get 2.00432137... which is\nhow many times you could divide 101 by 10.",
          "syntax": "log10(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "log2",
      "type": "key",
      "topics": [
        {
          "name": "log2",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/log2.htm",
          "blurb": "This function basically asks \"how many 2's do you need to multiply to get n?\". A common example of use in programming would be to calculate the number of bits that are needed to represent a number. To do this we calculate the log2(x) of the number, round it down and add 1 - for example log2(100) returns 6.643856, which rounded down is 6, to which we add one and it gives us 7. So we need 7 bits to represent 100. It can also be used for describing exponential growth or decay, and is often called a binary logarithm.",
          "syntax": "log2(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "logn",
      "type": "key",
      "topics": [
        {
          "name": "logn",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/logn.htm",
          "blurb": "This function is similar to the log2(n) and log10(n) functions, only you stipulate the log base value. For example, logn(5,25) will return how many 5's we need to multiply to get 25 (which is 2).",
          "syntax": "logn(n, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "macro",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        }
      ],
      "keys": []
    },
    {
      "name": "make_color_hsv",
      "type": "key",
      "topics": [
        {
          "name": "make_colour_hsv",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/make_colour_hsv.htm",
          "blurb": "GameMaker provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the hue, the saturation and the value (also know as \"luminosity\") to create the colour desired. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:",
          "syntax": "make_colour_hsv(hue, sat, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "make_color_rgb",
      "type": "key",
      "topics": [
        {
          "name": "make_colour_rgb",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/make_colour_rgb.htm",
          "blurb": "GameMaker provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the red, the green and the blue components of the colour that you wish to make. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:",
          "syntax": "make_colour_rgb(red, green, blue)"
        }
      ],
      "keys": []
    },
    {
      "name": "make_colour_hsv",
      "type": "key",
      "topics": [
        {
          "name": "make_colour_hsv",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/make_colour_hsv.htm",
          "blurb": "GameMaker provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the hue, the saturation and the value (also know as \"luminosity\") to create the colour desired. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:",
          "syntax": "make_colour_hsv(hue, sat, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "make_colour_rgb",
      "type": "key",
      "topics": [
        {
          "name": "make_colour_rgb",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/make_colour_rgb.htm",
          "blurb": "GameMaker provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the red, the green and the blue components of the colour that you wish to make. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:",
          "syntax": "make_colour_rgb(red, green, blue)"
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace",
      "type": "key",
      "topics": [
        {
          "name": "The Marketplace",
          "type": "topic",
          "url": "Introduction/The_Marketplace.htm",
          "blurb": "The Marketplace is GameMaker's online market for buying and selling asset packages. An asset package can be just about anything related to GameMaker, ie: sprites, scripts, shaders, or even full game engines or frameworks. To be able to create, buy and sell packages, you must first be registered on the Marketplace as a publisher and have signed in through GameMaker (this will be automatic when you log into the program) or from the main Marketplace web page. You can find more information on becoming a publisher from the pages linked at the bottom of this page."
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Creating A Publisher Account",
      "type": "key",
      "topics": [
        {
          "name": "Creating A Publisher Account",
          "type": "topic",
          "url": "Introduction/Marketplace/Creating_A_Publisher_Account.htm",
          "blurb": "Before you can use the GameMaker Marketplace to buy or sell assets, you must have made a YoYo Account, and if you wish to sell asset packages you will also need to have registered for a Marketplace Publisher account."
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Creating A Tutorial",
      "type": "key",
      "topics": [
        {
          "name": "Creating A Tutorial",
          "type": "topic",
          "url": "Introduction/Marketplace/Creating_A_Tutorial.htm",
          "blurb": "Creating a tutorial is similar to creating a regular Marketplace asset package, only now you have to add in specific included files as well as include an initial tutorial page (and an optional video page). The Tutorial workspace will look something like this:As explained above for general Marketplace Assets, you need to select a publisher and then give your tutorial a name and a unique ID (reverse URL format), and then in the \"type\" dropdown select Tutorial. This will then give you additional options to add a base HTML file to start the tutorial from as well as an (optional) video file and URL. The video file should use the template supplied from the Marketplace - as should the rest of the tutorial - which you can get here, and when the user loads the tutorial, the video will be loaded into a separate frame within the IDE. Note that the pages you give for the start page and the video page are relative paths within the Included Files, and you can open an explorer to choose something other than the default ones that GameMaker populates the fields with."
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Creating An Asset",
      "type": "key",
      "topics": [
        {
          "name": "Creating A Marketplace Asset",
          "type": "topic",
          "url": "Introduction/Marketplace/Creating_A_Marketplace_Asset.htm",
          "blurb": "When you select the Create Package option from the IDE Marketplace Menu you will be taken to the following workspace:    Here you must first select the Publisher identity that you want to publish the asset package as (which you should have set up from your Publisher Dashboard), then give a Display Name and a Version Number. A package ID will then be created for you based on the display name and publisher account used, but you can edit this to be something else if you wish as long as it maintains the reverse URL format. You then need to choose the type of asset package to make:"
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Library",
      "type": "key",
      "topics": [
        {
          "name": "Your Marketplace Library",
          "type": "topic",
          "url": "Introduction/Marketplace/Your_Marketplace_Library.htm",
          "blurb": "The Library window shows you the packages that you have bought and gives you the option to download them and/or add them to your project.On the left are the different category filters that you can use to see what you have in each one, and then in the middle you have the list of assets in your library. Each one can be selected so that you can see an overview of what it does (on the right) and they all have icons to view, download or install the asset package in a project. Note that you have two additional filters at the top of the main window where you can select to see only those assets that have been created specifically for GameMaker, as well as a filter to show only those assets that you have already downloaded to your machine. You can also refresh the list of assets shown at any time by clicking on the Refresh button ."
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Listing A Service",
      "type": "key",
      "topics": [
        {
          "name": "Listing A Service",
          "type": "topic",
          "url": "Introduction/Marketplace/Listing_A_Service.htm",
          "blurb": "Apart from having assets on the Marketplace, you can also create Services. Before continuing, please make sure that you have read the companion pages listed below, as you will need to have completed the steps described in them before you can submit an offer of services:"
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Listing An Asset",
      "type": "key",
      "topics": [
        {
          "name": "Listing An Asset",
          "type": "topic",
          "url": "Introduction/Marketplace/Listing_An_Asset.htm",
          "blurb": "The first thing you have to do before you publish an asset is to open up the marketplace in your browser and create an asset listing. You don't have to fill out all the details here yet, but we do need to give some initial information so you can at least upload a package. So, log in to your YoYo Account, then go to the Publishers section and select the publishing identity that you created:"
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Purchasing An Asset",
      "type": "key",
      "topics": [
        {
          "name": "Purchasing An Asset",
          "type": "topic",
          "url": "Introduction/Marketplace/Purchasing_An_Asset.htm",
          "blurb": "To purchase an asset from the Marketplace you must first be logged in to your GameMaker Account. Once you have created your account and logged into Marketplace, you can then browse the asset packages available. You can download official extensions, or content created by other community members, and the content can be either paid or free."
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Rating And Flagging Assets",
      "type": "key",
      "topics": [
        {
          "name": "Rating And Flagging Assets",
          "type": "topic",
          "url": "Introduction/Marketplace/Rating_And_Flagging_Assets.htm",
          "blurb": "The Marketplace has a great number of assets available to you, and it can sometimes be difficult to decide whether a package is what you require or not. To help you decide, there is a Rating and Comment system in place, where you can see the ratings (from one star to five) that an asset package has and also read the comments made by other users."
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Style Guide",
      "type": "key",
      "topics": [
        {
          "name": "Marketplace Style Guide",
          "type": "topic",
          "url": "Introduction/Marketplace/Marketplace_Style_Guide.htm",
          "blurb": "This page is for those people that are creating assets and services for the GameMaker Marketplace. Here we give you a brief guide to help you when describing and branding your assets when you are setting up an asset listing:"
        }
      ],
      "keys": []
    },
    {
      "name": "Marketplace - Submission Guidlines",
      "type": "key",
      "topics": [
        {
          "name": "Submission Guidelines",
          "type": "topic",
          "url": "Introduction/Marketplace/Submission_Guidelines.htm",
          "blurb": "It's our goal to allow anyone with a passion for creating game related content to share their creations with the GameMaker community. However we want both the publisher and the end user of the products to get the best experience possible from our Marketplace, which means that all assets being uploaded for publishing need to meet some minimum requirements, and not contain anything that may be restricted by Marketplace policy. Content that is not appropriate will be flagged as such by other users and the offending content removed from the store. To find out more information on flagging assets please see the following article:"
        }
      ],
      "keys": []
    },
    {
      "name": "mask_index",
      "type": "key",
      "topics": [
        {
          "name": "mask_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/mask_index.htm",
          "blurb": "When you define an object in GameMaker you can assign it a mask to be used for collisions rather than the one that corresponds to the defined sprite. This variable can be used to find the sprite_index of that mask (or it will return -1 if no sprite has been assigned) or to set the mask for an instance to the chosen sprite. Setting the mask index means that you can have, for example, a sprite for the instance with an irregular shape, yet give it a circular collision mask that is gotten from a different sprite.",
          "syntax": "mask_index"
        }
      ],
      "keys": []
    },
    {
      "name": "MATCHMAKING_SESSION",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_join_session",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_join_session.htm",
          "blurb": "This function permits you to join a specific session via a session handle. This is similar to joining a session invite but is useful when you have your own server performing the matchmaking rather than relying on xbox live matchmaking.",
          "syntax": "xboxlive_matchmaking_join_session(user_id, session_handle, sdatemplate)"
        }
      ],
      "keys": []
    },
    {
      "name": "math_get_epsilon",
      "type": "key",
      "topics": [
        {
          "name": "math_get_epsilon",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/math_get_epsilon.htm",
          "blurb": "This function will return the current epsilon value for the target platform. For more information on epsilon, please see the function math_set_epsilon().",
          "syntax": "math_get_epsilon()"
        }
      ],
      "keys": []
    },
    {
      "name": "math_set_epsilon",
      "type": "key",
      "topics": [
        {
          "name": "math_set_epsilon",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/math_set_epsilon.htm",
          "blurb": "Epsilon is a value used to determine whether two numbers subject to rounding error are close enough to be considered \"equal\". It is useful when dealing with floating point maths as it can reduce the \"rounding errors\" that make certain operations return values that appear incorrect or contrary to what we expect. For example, we may have added a value to the image index of a sprite and expect the result to be a single integer, but due to the nature of floating point maths, the actual final value ends up being something like 5.0000002, so when we have the following check:",
          "syntax": "math_set_epsilon(epsilon)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_build",
      "type": "key",
      "topics": [
        {
          "name": "matrix_build",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build.htm",
          "blurb": "This function can be used to create your own custom matrix and will return a matrix array, which should be stored in a variable for future reference and use. It accepts 3-dimensional (x, y, z) translation, rotation and scale values, and uses them to build a matrix array.",
          "syntax": "matrix_build(x, y, z, xrotation, yrotation, zrotation, xscale, yscale, zscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_build_identity",
      "type": "key",
      "topics": [
        {
          "name": "matrix_build_identity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_identity.htm",
          "blurb": "This will build a 4x4 identity matrix with the following structure:",
          "syntax": "matrix_build_identity()"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_build_lookat",
      "type": "key",
      "topics": [
        {
          "name": "matrix_build_lookat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_lookat.htm",
          "blurb": "This function builds a \"look-at\" (view) matrix based on the specified parameters listed below. Since this function modifies the view matrix and not the projection matrix, you should first initialize the projection matrix using the other matrix function matrix_build_projection_perspective(), then use this function to move the view camera around within the projection.",
          "syntax": "matrix_build_lookat(xfrom, yfrom, zfrom, xto, yto, zto, xup, yup, zup)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_build_projection_ortho",
      "type": "key",
      "topics": [
        {
          "name": "matrix_build_projection_ortho",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_projection_ortho.htm",
          "blurb": "This function builds an orthographic projection matrix based on the specified parameters listed below (this is the default projection method used when you create a room in GameMaker without changing anything). Sometimes you need to switch from a perspective projection to an orthographic projection which is what this function is for. It is typically used to draw an overlay, for example, to show the score or other aspects as this gives a \"flat\" view of the elements drawn (ie: no perspective) in a 3D game. See the image below to get an idea of the difference between orthographic and perspective views.",
          "syntax": "matrix_build_projection_ortho(width, height, znear, zfar)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_build_projection_perspective",
      "type": "key",
      "topics": [
        {
          "name": "matrix_build_projection_perspective",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_projection_perspective.htm",
          "blurb": "This function builds a perspective projection matrix based on the dimensions of the near clipping plane, using the specified parameters listed below.",
          "syntax": "matrix_build_projection_perspective(width, height, znear, zfar)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_build_projection_perspective_fov",
      "type": "key",
      "topics": [
        {
          "name": "matrix_build_projection_perspective_fov",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_projection_perspective_fov.htm",
          "blurb": "This function builds a perspective projection matrix matrix based on field of view, using the specified parameters listed below.",
          "syntax": "matrix_build_projection_perspective_fov(fov_y, aspect, znear, zfar)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_get",
      "type": "key",
      "topics": [
        {
          "name": "matrix_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_get.htm",
          "blurb": "This function returns an array of 16 values, corresponding to the given 4x4 matrix type, where row 1 is elements [0 - 3], row 2 is elements [4 -7], etc... (see the image on the main page). The available matrices are view, projection and world, for which you would use one of the following constants:",
          "syntax": "matrix_get(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "MATRIX_MAX",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_multiply",
      "type": "key",
      "topics": [
        {
          "name": "matrix_multiply",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_multiply.htm",
          "blurb": "With this function you can multiply two matrix arrays together to create a new transform matrix. The function will return the new matrix index which should be stored in a variable for future use.",
          "syntax": "matrix_multiply(matrix1, matrix2)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_projection",
      "type": "key",
      "topics": [
        {
          "name": "matrix_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_get.htm",
          "blurb": "This function returns an array of 16 values, corresponding to the given 4x4 matrix type, where row 1 is elements [0 - 3], row 2 is elements [4 -7], etc... (see the image on the main page). The available matrices are view, projection and world, for which you would use one of the following constants:",
          "syntax": "matrix_get(type)"
        },
        {
          "name": "matrix_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_set.htm",
          "blurb": "This function takes an array of 16 values, corresponding to a given 4x4 matrix type, where elements [0 - 3] would be row 1, elements [4 -7] would be row 2, etc... (see the image on the main page). You can create such a matrix using the matrix_build() or matrix_get() functions or simply building the array yourself and passing that into the function. The available matrix types are view, projection and world, for which you would use one of the following constants:",
          "syntax": "matrix_set(type, matrix)"
        }
      ],
      "keys": []
    },
    {
      "name": "MATRIX_PROJECTION",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_set",
      "type": "key",
      "topics": [
        {
          "name": "matrix_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_set.htm",
          "blurb": "This function takes an array of 16 values, corresponding to a given 4x4 matrix type, where elements [0 - 3] would be row 1, elements [4 -7] would be row 2, etc... (see the image on the main page). You can create such a matrix using the matrix_build() or matrix_get() functions or simply building the array yourself and passing that into the function. The available matrix types are view, projection and world, for which you would use one of the following constants:",
          "syntax": "matrix_set(type, matrix)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_stack_clear",
      "type": "key",
      "topics": [
        {
          "name": "matrix_stack_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_clear.htm",
          "blurb": "This function clears the matrix stack.",
          "syntax": "matrix_stack_clear()"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_stack_is_empty",
      "type": "key",
      "topics": [
        {
          "name": "matrix_stack_is_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_is_empty.htm",
          "blurb": "This function can be used to check whether the matrix stack is empty (returns true) or not (returns false).",
          "syntax": "matrix_stack_is_empty()"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_stack_pop",
      "type": "key",
      "topics": [
        {
          "name": "matrix_stack_pop",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_pop.htm",
          "blurb": "This function removes the matrix that is at the top of the current matrix stack.",
          "syntax": "matrix_stack_pop()"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_stack_push",
      "type": "key",
      "topics": [
        {
          "name": "matrix_stack_push",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_push.htm",
          "blurb": "This function is used to push a new matrix to the top of the current matrix stack. It will first multiply the given matrix with the matrix currently at the top of the stack, and then push the resulting matrix to the stack.",
          "syntax": "matrix_stack_push(matrix)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_stack_set",
      "type": "key",
      "topics": [
        {
          "name": "matrix_stack_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_set.htm",
          "blurb": "This function overwrites the current top of the matrix stack with the specified matrix.",
          "syntax": "matrix_stack_set(matrix)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_stack_top",
      "type": "key",
      "topics": [
        {
          "name": "matrix_stack_top",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_top.htm",
          "blurb": "This function returns the current top matrix of the stack, but does not remove it (for that use matrix_stack_pop()).",
          "syntax": "matrix_stack_top()"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_transform_vertex",
      "type": "key",
      "topics": [
        {
          "name": "matrix_transform_vertex",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_transform_vertex.htm",
          "blurb": "This function transforms a vector by a matrix. You supply the transform matrix ID (as returned by the function matrix build()), as well as the x, y and z values for the vector to transform. The function will return an array of 3 elements where:",
          "syntax": "matrix_transform_vertex(matrix, x, y, z)"
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_view",
      "type": "key",
      "topics": [
        {
          "name": "matrix_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_get.htm",
          "blurb": "This function returns an array of 16 values, corresponding to the given 4x4 matrix type, where row 1 is elements [0 - 3], row 2 is elements [4 -7], etc... (see the image on the main page). The available matrices are view, projection and world, for which you would use one of the following constants:",
          "syntax": "matrix_get(type)"
        },
        {
          "name": "matrix_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_set.htm",
          "blurb": "This function takes an array of 16 values, corresponding to a given 4x4 matrix type, where elements [0 - 3] would be row 1, elements [4 -7] would be row 2, etc... (see the image on the main page). You can create such a matrix using the matrix_build() or matrix_get() functions or simply building the array yourself and passing that into the function. The available matrix types are view, projection and world, for which you would use one of the following constants:",
          "syntax": "matrix_set(type, matrix)"
        }
      ],
      "keys": []
    },
    {
      "name": "MATRIX_VIEW",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "matrix_world",
      "type": "key",
      "topics": [
        {
          "name": "matrix_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_get.htm",
          "blurb": "This function returns an array of 16 values, corresponding to the given 4x4 matrix type, where row 1 is elements [0 - 3], row 2 is elements [4 -7], etc... (see the image on the main page). The available matrices are view, projection and world, for which you would use one of the following constants:",
          "syntax": "matrix_get(type)"
        },
        {
          "name": "matrix_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_set.htm",
          "blurb": "This function takes an array of 16 values, corresponding to a given 4x4 matrix type, where elements [0 - 3] would be row 1, elements [4 -7] would be row 2, etc... (see the image on the main page). You can create such a matrix using the matrix_build() or matrix_get() functions or simply building the array yourself and passing that into the function. The available matrix types are view, projection and world, for which you would use one of the following constants:",
          "syntax": "matrix_set(type, matrix)"
        }
      ],
      "keys": []
    },
    {
      "name": "MATRIX_WORLD",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "MATRIX_WORLD_VIEW",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "MATRIX_WORLD_VIEW_PROJECTION",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "max",
      "type": "key",
      "topics": [
        {
          "name": "max",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/max.htm",
          "blurb": "This function returns the maximum of the input values, of which it can have up to 16. For example max(12, 96, 32, 75) will return 96 as that is the highest of all the input values.",
          "syntax": "max(val1, val2, ... max_val)"
        }
      ],
      "keys": []
    },
    {
      "name": "MAX_VS_LIGHTS",
      "type": "key",
      "topics": [
        {
          "name": "Shader Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
          "blurb": "Apart from the shader functions and constants defined in the OpenGL ES Shading Language (GLSL ES) Reference Pages, there are also a number of shader constants available to you that are unique to GameMaker."
        }
      ],
      "keys": []
    },
    {
      "name": "mb_any",
      "type": "key",
      "topics": [
        {
          "name": "Mouse Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm",
          "blurb": "Mouse input is accepted on all platforms (on mobile devices it is accepted as a single screen touch - if you need to use multi-touch, you should be using the device specific functions) and has a few constants that are used to specify the buttons being pressed. These constants are shown in the following table:"
        }
      ],
      "keys": []
    },
    {
      "name": "mb_left",
      "type": "key",
      "topics": [
        {
          "name": "Mouse Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm",
          "blurb": "Mouse input is accepted on all platforms (on mobile devices it is accepted as a single screen touch - if you need to use multi-touch, you should be using the device specific functions) and has a few constants that are used to specify the buttons being pressed. These constants are shown in the following table:"
        }
      ],
      "keys": []
    },
    {
      "name": "mb_middle",
      "type": "key",
      "topics": [
        {
          "name": "Mouse Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm",
          "blurb": "Mouse input is accepted on all platforms (on mobile devices it is accepted as a single screen touch - if you need to use multi-touch, you should be using the device specific functions) and has a few constants that are used to specify the buttons being pressed. These constants are shown in the following table:"
        }
      ],
      "keys": []
    },
    {
      "name": "mb_none",
      "type": "key",
      "topics": [
        {
          "name": "Mouse Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm",
          "blurb": "Mouse input is accepted on all platforms (on mobile devices it is accepted as a single screen touch - if you need to use multi-touch, you should be using the device specific functions) and has a few constants that are used to specify the buttons being pressed. These constants are shown in the following table:"
        }
      ],
      "keys": []
    },
    {
      "name": "mb_right",
      "type": "key",
      "topics": [
        {
          "name": "Mouse Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm",
          "blurb": "Mouse input is accepted on all platforms (on mobile devices it is accepted as a single screen touch - if you need to use multi-touch, you should be using the device specific functions) and has a few constants that are used to specify the buttons being pressed. These constants are shown in the following table:"
        }
      ],
      "keys": []
    },
    {
      "name": "mb_side1",
      "type": "key",
      "topics": [
        {
          "name": "Mouse Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm",
          "blurb": "Mouse input is accepted on all platforms (on mobile devices it is accepted as a single screen touch - if you need to use multi-touch, you should be using the device specific functions) and has a few constants that are used to specify the buttons being pressed. These constants are shown in the following table:"
        }
      ],
      "keys": []
    },
    {
      "name": "mb_side2",
      "type": "key",
      "topics": [
        {
          "name": "Mouse Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm",
          "blurb": "Mouse input is accepted on all platforms (on mobile devices it is accepted as a single screen touch - if you need to use multi-touch, you should be using the device specific functions) and has a few constants that are used to specify the buttons being pressed. These constants are shown in the following table:"
        }
      ],
      "keys": []
    },
    {
      "name": "md5_file",
      "type": "key",
      "topics": [
        {
          "name": "md5_file",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/md5_file.htm",
          "blurb": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take the given file and generate a unique MD5 for that file which can then be stored for later use.",
          "syntax": "md5_file(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "md5_string_unicode",
      "type": "key",
      "topics": [
        {
          "name": "md5_string_unicode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/md5_string_unicode.htm",
          "blurb": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take an input unicode string (which is 16bits for each char) and return the 32-character hexadecimal MD5 hash that is unique to that string. In this way you can generate a secure key which can be stored and used to check the integrity\nof the information being sent to (or received from) an external server (for example).",
          "syntax": "md5_string_unicode(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "md5_string_utf8",
      "type": "key",
      "topics": [
        {
          "name": "md5_string_utf8",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/md5_string_utf8.htm",
          "blurb": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take an input UTF-8 string (which has a variable number of bytes per character) and return the 32-character hexadecimal MD5 hash that is unique to that string. In this way you can generate a secure key which can be stored and used\nto check the integrity of the information being sent to (or received from) an external server (for example).",
          "syntax": "md5_string_utf8(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "mean",
      "type": "key",
      "topics": [
        {
          "name": "mean",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/mean.htm",
          "blurb": "This function works by adding up all the input values and then dividing them by their own number. You can have as many arguments as you require (note that more arguments will mean that the function will be slower to parse). So, mean(2, 6, 9, 32) returns 12.25 as 2+6+9+32=49 and 49/4=12.25.",
          "syntax": "mean(val1, val2, ... max_val)"
        }
      ],
      "keys": []
    },
    {
      "name": "median",
      "type": "key",
      "topics": [
        {
          "name": "median",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/median.htm",
          "blurb": "This function returns the median of the input values, that is, the middle value. When the number of arguments is even, the smaller of the two middle values is returned and the function can have as many arguments as required (note that more arguments will mean that the function will be slower to parse) which must all be real values. This means that, for example, median(43, 12, 25, 19, 6) would return 19 as it is the middle value between all the rest.",
          "syntax": "median(val1, val2, ... max_val)"
        }
      ],
      "keys": []
    },
    {
      "name": "Menu - Build",
      "type": "key",
      "topics": [
        {
          "name": "The Build Menu",
          "type": "topic",
          "url": "IDE_Navigation/Menus/The_Build_Menu.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Menu - Edit",
      "type": "key",
      "topics": [
        {
          "name": "The Edit Menu",
          "type": "topic",
          "url": "IDE_Navigation/Menus/The_Edit_Menu.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Menu - File",
      "type": "key",
      "topics": [
        {
          "name": "The File Menu",
          "type": "topic",
          "url": "IDE_Navigation/Menus/The_File_Menu.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Menu - Help",
      "type": "key",
      "topics": [
        {
          "name": "The Help Menu",
          "type": "topic",
          "url": "IDE_Navigation/Menus/The_Help_Menu.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Menu - Layouts",
      "type": "key",
      "topics": [
        {
          "name": "The Layouts Menu",
          "type": "topic",
          "url": "IDE_Navigation/Menus/The_Layouts_Menu.htm",
          "blurb": "This menu is related to saving and loading different IDE layouts. You can setup the IDE however you wish, with certain elements (like the Asset Browser, or the Output Windows) arranged differently to the default. This permits you to set GameMaker to suit to your workflow and with the options in this menu you can save out the current project layouts as an *.xml file which can then be loaded into any project to set the layouts to be the same. The options in this menu are as follows:"
        }
      ],
      "keys": []
    },
    {
      "name": "Menu - Marketplace",
      "type": "key",
      "topics": [
        {
          "name": "The Marketplace Menu",
          "type": "topic",
          "url": "IDE_Navigation/Menus/The_Marketplace_Menu.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Menu - Tools",
      "type": "key",
      "topics": [
        {
          "name": "The Tools Menu",
          "type": "topic",
          "url": "IDE_Navigation/Menus/The_Tools_Menu.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Menu - Windows",
      "type": "key",
      "topics": [
        {
          "name": "The Windows Menu",
          "type": "topic",
          "url": "IDE_Navigation/Menus/The_Windows_Menu.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "merge_color",
      "type": "key",
      "topics": [
        {
          "name": "merge_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/merge_colour.htm",
          "blurb": "With this function you can take two colours and then merge them together to make a new colour. The amount of each of the component colours can be defined by changing the \"amount\" argument, where a value of 0 will return the first colour (col1), a value of 1 will return the second colour (col2) and a value in between will return the corresponding mix. For example, a value of 0.5 will mix the two colours equally. The following image illustrates how this works by merging the colours red and blue together:",
          "syntax": "merge_colour(col1, col2, amount)"
        }
      ],
      "keys": []
    },
    {
      "name": "merge_colour",
      "type": "key",
      "topics": [
        {
          "name": "merge_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/merge_colour.htm",
          "blurb": "With this function you can take two colours and then merge them together to make a new colour. The amount of each of the component colours can be defined by changing the \"amount\" argument, where a value of 0 will return the first colour (col1), a value of 1 will return the second colour (col2) and a value in between will return the corresponding mix. For example, a value of 0.5 will mix the two colours equally. The following image illustrates how this works by merging the colours red and blue together:",
          "syntax": "merge_colour(col1, col2, amount)"
        }
      ],
      "keys": []
    },
    {
      "name": "method",
      "type": "key",
      "topics": [
        {
          "name": "method",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/method.htm",
          "blurb": "With this function you can bind an existing function (or method) to the given instance or struct, creating a new method variable that can be used later.",
          "syntax": "method(struct_ref_or_instance_id, func)"
        }
      ],
      "keys": []
    },
    {
      "name": "Method Variables",
      "type": "key",
      "topics": [
        {
          "name": "Method Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Method_Variables.htm",
          "blurb": "A method variable is essentially a variable that has had a function assigned to it, \"binding\" the function to an instance and enabling you to use the variable to refer to the function - much like you use a runtime function name to refer to a built-in GML function. The variable used can be local, instance or global in scope (see here for more information on variable scope)."
        }
      ],
      "keys": []
    },
    {
      "name": "method_get_index",
      "type": "key",
      "topics": [
        {
          "name": "method_get_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/method_get_index.htm",
          "blurb": "With this function you can retrieve the Script index for the script where the method was defined. If the method was not defined in a script then the function will return -1, otherwise it will return the index value for the script.",
          "syntax": "method_get_index(method)"
        }
      ],
      "keys": []
    },
    {
      "name": "method_get_self",
      "type": "key",
      "topics": [
        {
          "name": "method_get_self",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/method_get_self.htm",
          "blurb": "With this function you can retrieve the instance ID or struct reference which is the self context used when the method is called. If the variable is not a method then the function will return undefined. Please note that the function may also return the constant pointer_null, in which case the current self is being used at the time of the call.",
          "syntax": "method_get_self(method)"
        }
      ],
      "keys": []
    },
    {
      "name": "Micro Web Server",
      "type": "key",
      "topics": [
        {
          "name": "The Micro Web Server",
          "type": "topic",
          "url": "IDE_Tools/The_Micro_Web_Server.htm",
          "blurb": "This small tool's primary function is to connect to and serve files to some of the available target platforms for GameMaker (like the HTML5 target). It also serves files for the GameMaker manual when used offline."
        }
      ],
      "keys": []
    },
    {
      "name": "min",
      "type": "key",
      "topics": [
        {
          "name": "min",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/min.htm",
          "blurb": "This function returns the minimum of the input values, of which it can have as many as you require (note that more arguments will mean that the function will be slower to parse). For example min(12, 96, 32, 75) will return 12 as that is the lowest of all the input values.",
          "syntax": "min(val1, val2, ... max_val)"
        }
      ],
      "keys": []
    },
    {
      "name": "mip_markedonly",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable.htm",
          "blurb": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager. The function will return one of the constants listed below, with the default setting being mip_markedonly.",
          "syntax": "gpu_get_tex_mip_enable()"
        },
        {
          "name": "gpu_get_tex_mip_enable_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable_ext.htm",
          "blurb": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the constants listed below.",
          "syntax": "gpu_get_tex_mip_enable_ext(sampler_index)"
        },
        {
          "name": "gpu_set_tex_mip_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable.htm",
          "blurb": "With this function you can change whether mipmapping is switched off, switched on for everything, or switched on only for texture groups selected in the Texture Group Manager. The function requires one of the constants listed below.",
          "syntax": "gpu_set_tex_mip_enable(setting)"
        },
        {
          "name": "gpu_set_tex_mip_enable_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable_ext.htm",
          "blurb": "With this function you can set whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the constants listed below.",
          "syntax": "gpu_set_tex_mip_enable_ext(sampler_index, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "mip_off",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable.htm",
          "blurb": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager. The function will return one of the constants listed below, with the default setting being mip_markedonly.",
          "syntax": "gpu_get_tex_mip_enable()"
        },
        {
          "name": "gpu_get_tex_mip_enable_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable_ext.htm",
          "blurb": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the constants listed below.",
          "syntax": "gpu_get_tex_mip_enable_ext(sampler_index)"
        },
        {
          "name": "gpu_set_tex_mip_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable.htm",
          "blurb": "With this function you can change whether mipmapping is switched off, switched on for everything, or switched on only for texture groups selected in the Texture Group Manager. The function requires one of the constants listed below.",
          "syntax": "gpu_set_tex_mip_enable(setting)"
        },
        {
          "name": "gpu_set_tex_mip_enable_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable_ext.htm",
          "blurb": "With this function you can set whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the constants listed below.",
          "syntax": "gpu_set_tex_mip_enable_ext(sampler_index, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "mip_on",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable.htm",
          "blurb": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager. The function will return one of the constants listed below, with the default setting being mip_markedonly.",
          "syntax": "gpu_get_tex_mip_enable()"
        },
        {
          "name": "gpu_get_tex_mip_enable_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable_ext.htm",
          "blurb": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the constants listed below.",
          "syntax": "gpu_get_tex_mip_enable_ext(sampler_index)"
        },
        {
          "name": "gpu_set_tex_mip_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable.htm",
          "blurb": "With this function you can change whether mipmapping is switched off, switched on for everything, or switched on only for texture groups selected in the Texture Group Manager. The function requires one of the constants listed below.",
          "syntax": "gpu_set_tex_mip_enable(setting)"
        },
        {
          "name": "gpu_set_tex_mip_enable_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable_ext.htm",
          "blurb": "With this function you can set whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the constants listed below.",
          "syntax": "gpu_set_tex_mip_enable_ext(sampler_index, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "mod",
      "type": "key",
      "topics": [
        {
          "name": "Expressions And Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Expressions_And_Operators.htm",
          "blurb": "An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more operators (like add, subtract, multiply, etc...). The values used in an expression can be real numbers (e.g. 3.4 * 6), hexadecimal numbers starting with a $ sign (e.g. $00FFAA | $88FFAA), strings between double quotes (e.g. \"hello\" + \"world\") or more complicated expressions using multiple operators and values."
        }
      ],
      "keys": []
    },
    {
      "name": "motion_add",
      "type": "key",
      "topics": [
        {
          "name": "motion_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/motion_add.htm",
          "blurb": "This function accelerates the instance with the given speed in the given direction. ",
          "syntax": "motion_add(dir, speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "motion_set",
      "type": "key",
      "topics": [
        {
          "name": "motion_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/motion_set.htm",
          "blurb": "This function sets a new direction of movement and a new speed to the instance running the code. Note that this does not add to the instances current speed and direction (for that you would use motion_add()) but rather forces it to the new settings.",
          "syntax": "motion_set(dir, speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_button",
      "type": "key",
      "topics": [
        {
          "name": "mouse_button",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_button.htm",
          "blurb": "This read only variable returns the mouse button that is currently being pressed (currently, as in, this step) and can return any of the special mouse constants except mb_any.",
          "syntax": "mouse_button"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_check_button",
      "type": "key",
      "topics": [
        {
          "name": "mouse_check_button",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_check_button.htm",
          "blurb": "This function will return true if the mouse button being checked is held down or false if it is not. You supply the mouse button to check from one of the following constants:",
          "syntax": "mouse_check_button(numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_check_button_pressed",
      "type": "key",
      "topics": [
        {
          "name": "mouse_check_button_pressed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_check_button_pressed.htm",
          "blurb": "This function will return true if the mouse button being checked has been pressed or false if it has not. This function will only be triggered once for any mouse button when it is first pressed and to trigger it again the button will need to have been released and pressed again. Note that it will be considered triggered for the duration of the step, and for all instances that have any mouse events or that use this same function.",
          "syntax": "mouse_check_button_pressed(numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_check_button_released",
      "type": "key",
      "topics": [
        {
          "name": "mouse_check_button_released",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_check_button_released.htm",
          "blurb": "This function will return true if the mouse button being checked has been released or false if it has not. This function will only be triggered once for any mouse button when it is released and to trigger it again the button will need to have been pressed and released again. You supply the mouse button to check from one of the following constants:",
          "syntax": "mouse_check_button_released(numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_clear",
      "type": "key",
      "topics": [
        {
          "name": "mouse_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_clear.htm",
          "blurb": "This function will clear the current state of the given mouse button. This means that checks for it being held down will not return true until the player releases the button and presses it again (but the release state will still be detected if the clear is done while the mouse button is being held down).",
          "syntax": "mouse_clear(button)"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_lastbutton",
      "type": "key",
      "topics": [
        {
          "name": "mouse_lastbutton",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_lastbutton.htm",
          "blurb": "This variable returns the last mouse button that was pressed and can return any of the special mouse constants except mb_any (you may also set this variable to one of the constants).",
          "syntax": "mouse_lastbutton"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_wheel_down",
      "type": "key",
      "topics": [
        {
          "name": "mouse_wheel_down",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_wheel_down.htm",
          "blurb": "This function returns true if the mouse wheel is being rotated downwards and false otherwise.",
          "syntax": "mouse_wheel_down()"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_wheel_up",
      "type": "key",
      "topics": [
        {
          "name": "mouse_wheel_up",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_wheel_up.htm",
          "blurb": "This function returns true if the mouse wheel is being rotated upwards and false otherwise.",
          "syntax": "mouse_wheel_up()"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_x",
      "type": "key",
      "topics": [
        {
          "name": "mouse_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_x.htm",
          "blurb": "This read-only variable returns the current x axis position of the mouse within the room.",
          "syntax": "mouse_x"
        }
      ],
      "keys": []
    },
    {
      "name": "mouse_y",
      "type": "key",
      "topics": [
        {
          "name": "mouse_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_y.htm",
          "blurb": "This read-only variable returns the current y axis position of the mouse within the room.",
          "syntax": "mouse_y"
        }
      ],
      "keys": []
    },
    {
      "name": "move_bounce_all",
      "type": "key",
      "topics": [
        {
          "name": "move_bounce_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_bounce_all.htm",
          "blurb": "With this function you can command an instance to bounce off all instances within the room, with the only exception being those that have no sprite or mask index assigned to them. You can also tell it to use precise collision checking when enabled, but be aware that this requires all instances to have precise masks enabled and will greatly slow down your game when many instances are involved due to the amount of processing that has to be done. This should normally go in the step event of an instance, but can be used selectively in a collision event too, as illustrated by the code example below.",
          "syntax": "move_bounce_all( adv )"
        }
      ],
      "keys": []
    },
    {
      "name": "move_bounce_solid",
      "type": "key",
      "topics": [
        {
          "name": "move_bounce_solid",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_bounce_solid.htm",
          "blurb": "With this function you can command an instance to bounce off only those instances marked as solid within the room. You can also tell it to use precise collision checking when enabled, but be aware that this requires all instances to have precise masks enabled and will greatly slow down your game when many instances are involved due to the amount of processing that has to be done. This should normally go in the step event of an instance, but can be used selectively in a collision event too.",
          "syntax": "move_bounce_solid(adv)"
        }
      ],
      "keys": []
    },
    {
      "name": "move_contact_all",
      "type": "key",
      "topics": [
        {
          "name": "move_contact_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_contact_all.htm",
          "blurb": "This function will move the instance running the code a set number of pixels in the specified direction until it meets any other instance with a valid mask. You can use -1 or 0 for the maxdist being a default 1000px, ie: GameMaker will move the instance continually up 1000 pixels until it is out of collision.",
          "syntax": "move_contact_all(dir, maxdist)"
        }
      ],
      "keys": []
    },
    {
      "name": "move_contact_solid",
      "type": "key",
      "topics": [
        {
          "name": "move_contact_solid",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_contact_solid.htm",
          "blurb": "This function will move the instance running the code a set number of pixels in the specified direction until it meets an instance with solid flagged as true. You can use -1 or 0 for the maxdist being a default 1000px, ie: GameMaker will move the instance continually up 1000 pixels until it is out of collision.",
          "syntax": "move_contact_solid( dir, maxdist )"
        }
      ],
      "keys": []
    },
    {
      "name": "move_outside_all",
      "type": "key",
      "topics": [
        {
          "name": "move_outside_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_outside_all.htm",
          "blurb": "With this function you can tell an instance to move out of a collision in any direction and any number of pixels each step, with a value of -1 or 0 for the maxdist being a default 1000px, ie: GameMaker will move the instance continually up 1000 pixels until it is out of collision.",
          "syntax": "move_outside_all(dir, maxdist)"
        }
      ],
      "keys": []
    },
    {
      "name": "move_outside_solid",
      "type": "key",
      "topics": [
        {
          "name": "move_outside_solid",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_outside_solid.htm",
          "blurb": "With this function you can tell an instance to move out of a collision with any instance flagged as solid in any direction and any number of pixels each step, with a value of -1 or 0 for the maxdist being a default 1000px, ie: GameMaker will move the instance continually up 1000 pixels until it is out of collision.",
          "syntax": "move_outside_solid(dir, maxdist)"
        }
      ],
      "keys": []
    },
    {
      "name": "move_random",
      "type": "key",
      "topics": [
        {
          "name": "move_random",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_random.htm",
          "blurb": "With this function you can set the instance to a position anywhere in the room, but aligned to an \"invisible\" grid. So a value of 32 for the hsnap and vsnap will set the instance to a random position that is aligned to a grid of 32x32 squares. you can set these values to 1 to get a position anywhere in the room.",
          "syntax": "move_random(hsnap, vsnap)"
        }
      ],
      "keys": []
    },
    {
      "name": "move_snap",
      "type": "key",
      "topics": [
        {
          "name": "move_snap",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_snap.htm",
          "blurb": "This function is used to \"snap\" the instance to a grid of a given size. It will be snapped to the nearest corresponding position on the \"invisible\" grid that the hsnap and vsnap values define.",
          "syntax": "move_snap(hsnap, vsnap)"
        }
      ],
      "keys": []
    },
    {
      "name": "move_towards_point",
      "type": "key",
      "topics": [
        {
          "name": "move_towards_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_towards_point.htm",
          "blurb": "This function simply tells the instance running the code to move towards a set point at a set speed. Bear in mind that it is up to you to tell it what to do once it gets there, as it won't just stop by itself. This means that you can get a \"vibrating\" instance as it moves (for example) 3 pixels forward, overshoots the x/y target position by 2, then moves 3 pixels back again, overshooting the target point by one and so on... There are a number of ways that this can be avoided, for example using distance_to_point() to see how far from the specified location the instance is before moving.",
          "syntax": "move_towards_point( x, y, sp )"
        }
      ],
      "keys": []
    },
    {
      "name": "move_wrap",
      "type": "key",
      "topics": [
        {
          "name": "move_wrap",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_wrap.htm",
          "blurb": "This function will automatically \"wrap\" an instance that has left the room on either the horizontal or vertical (or both) axis. You can specify a margin outside the edges of the room for this to occur, and when the instance has travelled outside of that margin GameMaker will automatically wrap it back into the room at the other side. Note that the instance must have a speed for wrapping to work, because the direction of wrapping is based on the direction of the motion.",
          "syntax": "move_wrap(hor, vert, margin)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_add_cell",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_add_cell",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_add_cell.htm",
          "blurb": "With this function we can mark individual cells within the given MP grid as being \"forbidden\" meaning that the path finding functions will not ever cross them. Now, normally you work in x/y room coordinates, and not in MP grid cell coordinates. So let's consider the following image which shows how the two can correlate:",
          "syntax": "mp_grid_add_cell(id, h, v)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_add_instances",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_add_instances",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_add_instances.htm",
          "blurb": "This function uses the instance collision mask (decided by the sprite properties or the mask index of the calling instance) to mark cells as forbidden or not in an MP grid, where forbidden cells cannot be crossed by any of the pathfinding functions. You can specify in the function whether to consider precise collisions or not and the forbidden cells marked will change depending on this setting. This image illustrates this behaviour:",
          "syntax": "mp_grid_add_instances(id, obj, prec)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_add_rectangle",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_add_rectangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_add_rectangle.htm",
          "blurb": "This function asks you to define a rectangle within the room, and then it marks all MP grid cells \"touch\" that rectangle as being forbidden, meaning that the path-finding functions cannot cross them. The image below illustrates how this works:",
          "syntax": "mp_grid_add_rectangle(id, x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_clear_all",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_clear_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_clear_all.htm",
          "blurb": "With this function you can clear an MP grid of all \"forbidden\" cells.",
          "syntax": "mp_grid_clear_all(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_clear_cell",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_clear_cell",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_clear_cell.htm",
          "blurb": "This function can be used to clear a specific \"cell\" of an MP grid. Cells are not calculated as room coordinates, but rather as grid coordinates, where (0,0) is the top let corner of the grid. this means that to clear a cell at a specific position in the room, we must change the x and y coordinates into cell coordinate dividing them by the resolution of the MP grid. The code example below shows how this works.",
          "syntax": "mp_grid_clear_cell(id, h, v)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_clear_rectangle",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_clear_rectangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_clear_rectangle.htm",
          "blurb": "With this function you can define an area in room coordinates which will then clear the corresponding cells in the specified MP grid. Even if a cell partially falls within the defined rectangular region it will be cleared.",
          "syntax": "mp_grid_clear_rectangle(id, x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_create",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_create.htm",
          "blurb": "With this function you can create an mp_grid for the motion planning functions. It returns an index that should be stored in a variable for use in all the other MP grid function calls. The x and y coordinates indicate the position of the top-left corner of the grid, hcells and vcells indicate the number of horizontal and vertical cells to be created within the grid, and cell width and cell height indicate the size of the cells in pixels. You can create and maintain multiple grid structures at the same moment if you need them for different things, but be aware that each grid will require memeory, and the more cells they have the more memory they will require. Also note that the MP functions are quite processor heavy to use so the more often you call them and the higher the cell resolution then the more likely you are to have a drop in performance.",
          "syntax": "mp_grid_create(left, top, hcells, vcells, cellwidth, cellheight)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_destroy",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_destroy.htm",
          "blurb": "You can use this function to destroy the indicated mp_grid (as defined by the function mp_grid_create()) and free up the memory allocated it. It is essential that you call this whenever the MP grid is finished with or you could potentially get a memory leak, meaning that your game will slow down over time and eventually crash.",
          "syntax": "mp_grid_destroy(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_draw",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_draw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_draw.htm",
          "blurb": "This function will draw the specified MP grid (as defined by mp_grid_create()), marking free cells as green and forbidden cells as red. This function is essential as a debug tool but it should be noted that it is very slow and only works when used in the draw event of the instance, and that you can set the draw alpha to change the opacity of the grid, permitting you to draw it as an overlay and see what is actually in the room at the same time.",
          "syntax": "mp_grid_draw(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_get_cell",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_get_cell",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_get_cell.htm",
          "blurb": "With this function you can check any given cell of the mp_grid to see if it has been flagged as occupied or not, giving the index of the (previously created) mp_grid and the x and y coordinates of the cell to check.",
          "syntax": "mp_grid_get_cell(id, x , y)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_path",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_path",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_path.htm",
          "blurb": "With this function you can create a path that will navigate from a start point to a finish point using an mp_grid that you have previously defined, avoiding any obstacles that have already been added into the grid. The xstart and ystart arguments indicate the start of the path in room coordinates, while xgoal, ygoal arguments indicate the destination. You can also select either horizontal/vertical movement only, or allow full diagonal movements by specifying true in the allowdiag argument. The function returns either true (it succeeded in finding a path) or false (it failed) as well as setting the chosen path. In the following image, you can see how this all works together:",
          "syntax": "mp_grid_path(id, path, xstart, ystart, xgoal, ygoal, allowdiag)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_grid_to_ds_grid",
      "type": "key",
      "topics": [
        {
          "name": "mp_grid_to_ds_grid",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_to_ds_grid.htm",
          "blurb": "With this function you can copy the given MP grid into a DS grid. The DS grid should be the same size as the MP grid, although it doesn't have to be (data will be lost if it is smaller, and if it is larger all extra grid cells will be 0). A cell in the DS grid will contain the value -1 if it was flagged as occupied in the MP grid, or 0 if it wasn't.",
          "syntax": "mp_grid_to_ds_grid(source, destination)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_linear_path",
      "type": "key",
      "topics": [
        {
          "name": "mp_linear_path",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_linear_path.htm",
          "blurb": "This function computes a straight line path from the current instance position to the point specified by the \"xgoal\" and \"ygoal\" values. It uses the indicated step size, the same as in the function mp_linear_step(). The indicated path must already exist and will be overwritten by the new path and the function will return if a complete path was found (true) or not (false). If false is returned then a path is still generated, but it will only run up to the position where the path was blocked.",
          "syntax": "mp_linear_path(path, xgoal, ygoal, stepsize, checkall)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_linear_path_object",
      "type": "key",
      "topics": [
        {
          "name": "mp_linear_path_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_linear_path_object.htm",
          "blurb": "This function computes a straight line path from the current instance position to the point specified by the \"xgoal\" and \"ygoal\" values. It uses the indicated step size, the same as in the function mp_linear_step(). The indicated path must already exist and will be overwritten by the new path and the function will return if a complete path was found (true) or not (false). A full path is only found there was no collision with the specified object or instance and if false is returned then a path is still generated, but it will only run up to the position where the path was blocked.",
          "syntax": "mp_linear_path_object(path, xgoal, ygoal, stepsize, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_linear_step",
      "type": "key",
      "topics": [
        {
          "name": "mp_linear_step",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_linear_step.htm",
          "blurb": "With this function you tell an instance to take a \"step\" towards a specific point, specified by the xgoal and ygoal values. The size of the step (which is how many pixels the instance should move each step) is indicated by the stepsize, and if the instance is already at the position it will stop and not move any further, contrary to other, simpler functions like move_towards_point(). The stepsize is also the distance \"ahead\" that the object will check each step for a collision, and you can choose whether the instance stops at a collision with any instance or only those that are flagged as solid. The function will return whether it has reached the goal position (true) or if it has failed (false).",
          "syntax": "mp_linear_step(xgoal, ygoal, stepsize, checkall)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_linear_step_object",
      "type": "key",
      "topics": [
        {
          "name": "mp_linear_step_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_linear_step_object.htm",
          "blurb": "With this function you tell an instance to take a \"step\" towards a specific point, specified by the xgoal and ygoal values. The size of the step (which is how many pixels the instance should move each step) is indicated by the stepsize, and if the instance is already at the position it will stop and not move any further, contrary to other, simpler functions like move_towards_point(). The stepsize is also the distance \"ahead\" that the object will check each step for a collision, and you can choose whether the instance stops at a collision with an object or instance of your choice.",
          "syntax": "mp_linear_step_object(xgoal, ygoal, stepsize, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_potential_path",
      "type": "key",
      "topics": [
        {
          "name": "mp_potential_path",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_path.htm",
          "blurb": "This function computes a path for the instance from its current position and orientation to the position specified by the xgoal,ygoal arguments. It uses the indicated step size while trying to avoid collision with either all instances or only those flagged as solid. Like in the function mp_potential_step() it uses potential field steps to accomplish this and the manner in which it does this can be modified through the function mp_potential_settings().\nThe indicated path must already exist and it will be overwritten by the new path. The function will return whether a path was found (true) or not (false).",
          "syntax": "mp_potential_path(path, xgoal, ygoal, stepsize, factor, checkall)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_potential_path_object",
      "type": "key",
      "topics": [
        {
          "name": "mp_potential_path_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_path_object.htm",
          "blurb": "This function computes a path for the instance from its current position and orientation to the position specified by the xgoal, ygoal arguments. It uses the indicated step size while trying to avoid collision with instances of the object specified by the \"obj\" argument. Like in the function mp_potential_step() it uses potential field steps to accomplish this and the manner in which it does this can be modified through the function mp_potential_settings().\nThe indicated path must already exist and it will be overwritten by the new path. The function will return whether a path was found (true) or not (false).",
          "syntax": "mp_potential_path_object(path, xgoal, ygoal, stepsize, factor, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_potential_settings",
      "type": "key",
      "topics": [
        {
          "name": "mp_potential_settings",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_settings.htm",
          "blurb": "The mp_potential_ functions do their work using a number of parameters that can be changed using this function. Globally the method works as follows: it first tries to move straight towards the goal, looking a number of steps ahead which can be set with the parameter \"ahead\" (default value is 3). Reducing this value means that the instance will start changing direction later as it doesn't \"see\" as far ahead, and increasing it means it will start changing direction earlier. If this check leads to a collision then it starts looking at directions more to the left and to the right of the ideal, straight-line direction. It does this in steps of size \"rotstep\" (default value is 10), and reducing this gives the instance more movement possibilities but will be slower as it needs more processing power.",
          "syntax": "mp_potential_settings(maxrot, rotstep, ahead, onspot)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_potential_step",
      "type": "key",
      "topics": [
        {
          "name": "mp_potential_step",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_step.htm",
          "blurb": "This function lets the instance take a step towards a particular position defined by xgoal/ygoal, all the while trying to avoid obstacles. When the instance would run into a solid instance (or any instance when checkall is true) it will change the direction of motion to try to avoid that instance and move around it. This approach is not guaranteed to work but in most easy cases it will effectively move the instance towards the goal. The function returns whether the goal was reached or not.",
          "syntax": "mp_potential_step(xgoal, ygoal, stepsize, checkall)"
        }
      ],
      "keys": []
    },
    {
      "name": "mp_potential_step_object",
      "type": "key",
      "topics": [
        {
          "name": "mp_potential_step_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_step_object.htm",
          "blurb": "This function lets the instance take a step towards a particular position defined by xgoal/ygoal, all the while trying to avoid obstacles. When the instance would run into an instance of the object specified by the \"obj\" argument it will change the direction of motion to try to avoid that instance and move around it. This approach is not guaranteed to work but in most easy cases it will effectively move the instance towards the goal. The function returns whether the goal was reached or not.",
          "syntax": "mp_potential_step_object(xgoal, ygoal, stepsize, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "NaN",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        }
      ],
      "keys": []
    },
    {
      "name": "network_config_avoid_time_wait",
      "type": "key",
      "topics": [
        {
          "name": "network_set_config",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
          "blurb": "With this function you can set different network configurations.",
          "syntax": "network_set_config(config_value, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_config_connect_timeout",
      "type": "key",
      "topics": [
        {
          "name": "network_set_config",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
          "blurb": "With this function you can set different network configurations.",
          "syntax": "network_set_config(config_value, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_config_disable_reliable_udp",
      "type": "key",
      "topics": [
        {
          "name": "network_set_config",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
          "blurb": "With this function you can set different network configurations.",
          "syntax": "network_set_config(config_value, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_config_enable_reliable_udp",
      "type": "key",
      "topics": [
        {
          "name": "network_set_config",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
          "blurb": "With this function you can set different network configurations.",
          "syntax": "network_set_config(config_value, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_config_use_non_blocking_socket",
      "type": "key",
      "topics": [
        {
          "name": "network_set_config",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
          "blurb": "With this function you can set different network configurations.",
          "syntax": "network_set_config(config_value, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_connect",
      "type": "key",
      "topics": [
        {
          "name": "network_connect",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_connect.htm",
          "blurb": "With this function you can send a request to connect to a server. The function takes the socket id to connect through (see network_create_socket()) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The connection uses a special protocol that ensures only GameMaker games connect to each other, however if you need to connect to a server that is not a GameMaker game, you can use network_connect_raw(). Note that by default the function is synchronous, meaning that your game may appear to \"hang\" as the connection is made. You can set a timeout value for connection, or alternatively make the creation asynchronous, using the function network_set_config(), or alternatively use the function network_connect_async() instead.",
          "syntax": "network_connect(socket, url, port)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_connect_async",
      "type": "key",
      "topics": [
        {
          "name": "network_connect_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_connect_async.htm",
          "blurb": "With this function you can send a request to connect to a server. The function takes the socket id to connect through (see network_create_socket()) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The connection uses a special protocol that ensures only GameMaker games connect to each other, however if you need\nto connect to a server that is not a GameMaker game, you can use network_connect_async_raw(). Note that this function is asynchronous, generating an Asynchronous Networking event of the type network_type_non_blocking_connect.",
          "syntax": "network_connect_async(socket, url, port)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_connect_raw",
      "type": "key",
      "topics": [
        {
          "name": "network_connect_raw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_connect_raw.htm",
          "blurb": "With this function you can send a request to connect to a server. The function takes the socket id to connect through (see network_create_socket()) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and network_connect() is that this function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that by default the function is synchronous, meaning that your game may appear to \"hang\" as the connection is made. You can set a timeout value for connection, or alternatively make the creation asynchronous, using the function network_set_config(), or alternatively use the function network_connect_async_raw() instead.",
          "syntax": "network_connect_raw(socket, url, port)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_connect_raw_async",
      "type": "key",
      "topics": [
        {
          "name": "network_connect_raw_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_connect_raw_async.htm",
          "blurb": "With this function you can send a request to connect to a server. The function takes the socket id to connect through (see network_create_socket()) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and network_connect_async()is that this\nfunction can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that this function is asynchronous, generating an Asynchronous Networking event of the type network_type_non_blocking_connect.",
          "syntax": "network_connect_raw_async(socket, url, port)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_create_server",
      "type": "key",
      "topics": [
        {
          "name": "network_create_server",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server(type, port, max_client)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_create_server_raw",
      "type": "key",
      "topics": [
        {
          "name": "network_create_server_raw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server_raw.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server_raw(type, port, max_client)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_create_socket",
      "type": "key",
      "topics": [
        {
          "name": "network_create_socket",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique id for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_create_socket_ext",
      "type": "key",
      "topics": [
        {
          "name": "network_create_socket_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket_ext.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and give a port to use, and the function will return a unique id which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket_ext(protocol, port)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_destroy",
      "type": "key",
      "topics": [
        {
          "name": "network_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_destroy.htm",
          "blurb": "With this function you can remove a network socket connection from your game.",
          "syntax": "network_destroy(socket)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_resolve",
      "type": "key",
      "topics": [
        {
          "name": "network_resolve",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_resolve.htm",
          "blurb": "This function will return the IP address of the given URL.",
          "syntax": "network_resolve(url)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_send_broadcast",
      "type": "key",
      "topics": [
        {
          "name": "network_send_broadcast",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_send_broadcast.htm",
          "blurb": "With this function you can broadcast the data from a buffer locally to a range of IP addresses (for more information on buffers see Reference - Buffers). The range is limited to that of the device running the server, such that if the device has an IP of 92.168.11.130, then the data will be broadcast over the range 92.168.11.*. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
          "syntax": "network_send_broadcast(socket, port, bufferid, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_send_packet",
      "type": "key",
      "topics": [
        {
          "name": "network_send_packet",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_send_packet.htm",
          "blurb": "With this function you can send a data \"packet\" through the network. The function takes the socket id to connect through and then you must supply the buffer id which contains the data to be sent (for more information on buffers see Reference - Buffers) and finally the size (in bytes) of the data packet. Packets sent with this function are formatted such that the GameMaker game receiving the data can \"split\" the packets correctly, and the function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the final size of the data being sent that is returned by this function will also include the GameMaker header information, which is an additional 12 bytes.",
          "syntax": "network_send_packet(socket, bufferid, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_send_raw",
      "type": "key",
      "topics": [
        {
          "name": "network_send_raw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_send_raw.htm",
          "blurb": "With this function you can send a \"raw\" data packet through the network. The function takes the socket id to connect through and then you must supply the buffer id which contains the data to be sent (for more information on buffers see Reference - Buffers) and finally the size (in bytes) of the data packet. The data sent is not formatted by GameMaker in any way and the receiving devices will get the data as a stream which means you will have to handle it yourself. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
          "syntax": "network_send_raw(socket, bufferid, size, [options])"
        }
      ],
      "keys": []
    },
    {
      "name": "network_send_udp",
      "type": "key",
      "topics": [
        {
          "name": "network_send_udp",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_send_udp.htm",
          "blurb": "With this function you can send data over the network using UDP to a server. The function takes the socket id to connect through, the URL to connect to and the port to use. You must then supply the buffer id which contains the data to be sent (for more information on buffers see Reference - Buffers) and finally the size (in bytes) of the data. UDP is \"connectionless\" in that you don't actually do a connect, you just send a packet directly to an IP, and the server gets incoming data from an IP address and has to deal with it \"as is\". The function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the final size of the data being sent that is returned by this function will also include the GameMaker header information, which is an additional 12 bytes.",
          "syntax": "network_send_udp(socket, url, port, bufferid, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_send_udp_raw",
      "type": "key",
      "topics": [
        {
          "name": "network_send_udp_raw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_send_udp_raw.htm",
          "blurb": "With this function you can send data over the network using UDP to a server. The function takes the socket id to connect through, the URL to connect to and the port to use. You must then supply the buffer id which contains the data to be sent (for more information on buffers see Reference - Buffers) and finally the size (in bytes) of the data. UDP is \"connectionless\" in that you don't actually do a connect, you just send a packet directly to an IP, and the server gets incoming data from an IP address and has to deal with it \"as is\". The data sent is not formatted by GameMaker in any way and the receiving devices will get the data as a stream which means you will have to handle it yourself. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
          "syntax": "network_send_udp_raw(socket, url, port, bufferid, size)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_set_config",
      "type": "key",
      "topics": [
        {
          "name": "network_set_config",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
          "blurb": "With this function you can set different network configurations.",
          "syntax": "network_set_config(config_value, setting)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_set_timeout",
      "type": "key",
      "topics": [
        {
          "name": "network_set_timeout",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_set_timeout.htm",
          "blurb": "With this function you can set the timeout for reading and writing data to/from a server through the given socket. Note that the timeout does not generate any type of event, so you will need to deal with timeouts yourself using alarms (for example). Note that this value only affects the sending and receiving of data, and should you wish to change the connection timeout value then you should be using the function network_set_config().",
          "syntax": "network_set_timeout(socket, read_timeout, write_timeout)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_socket_bluetooth",
      "type": "key",
      "topics": [
        {
          "name": "network_create_server",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server(type, port, max_client)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_socket_tcp",
      "type": "key",
      "topics": [
        {
          "name": "network_create_server",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server(type, port, max_client)"
        },
        {
          "name": "network_create_server_raw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server_raw.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server_raw(type, port, max_client)"
        },
        {
          "name": "network_create_socket",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique id for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket(type)"
        },
        {
          "name": "network_create_socket_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket_ext.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and give a port to use, and the function will return a unique id which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket_ext(protocol, port)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_socket_udp",
      "type": "key",
      "topics": [
        {
          "name": "network_create_server",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server(type, port, max_client)"
        },
        {
          "name": "network_create_server_raw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server_raw.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server_raw(type, port, max_client)"
        },
        {
          "name": "network_create_socket",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique id for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket(type)"
        },
        {
          "name": "network_create_socket_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket_ext.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and give a port to use, and the function will return a unique id which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket_ext(protocol, port)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_socket_ws",
      "type": "key",
      "topics": [
        {
          "name": "network_create_server",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server(type, port, max_client)"
        },
        {
          "name": "network_create_server_raw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_server_raw.htm",
          "blurb": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_server_raw(type, port, max_client)"
        },
        {
          "name": "network_create_socket",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique id for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket(type)"
        },
        {
          "name": "network_create_socket_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket_ext.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and give a port to use, and the function will return a unique id which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket_ext(protocol, port)"
        }
      ],
      "keys": []
    },
    {
      "name": "network_socket_wss",
      "type": "key",
      "topics": [
        {
          "name": "network_create_socket",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Networking/network_create_socket.htm",
          "blurb": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique id for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
          "syntax": "network_create_socket(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "new",
      "type": "key",
      "topics": [
        {
          "name": "new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/new.htm",
          "blurb": "The new operator can be used to create a struct with a function which is called with the given arguments. The function can then populate the struct with variables from the arguments - much like the create event of an instance will set the initial variables for the instance - and then the new operator will return the struct. Before using this operator it is important to note that the function given must be flagged as a constructor function otherwise the new operator will not create the struct (the code example below shows this, and for more information, please see the page on Structs)."
        }
      ],
      "keys": []
    },
    {
      "name": "noone",
      "type": "key",
      "topics": [
        {
          "name": "Instance Keywords",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Instance_Keywords.htm",
          "blurb": "To make certain things easier in GameMaker, you can use one of several instance keywords in your code (whether GML or GML Visual). These keywords are used primarily to identify instances - and in some cases structs - under different situations, and each one is explained in the text below."
        }
      ],
      "keys": []
    },
    {
      "name": "Note Editor",
      "type": "key",
      "topics": [
        {
          "name": "Notes",
          "type": "topic",
          "url": "The_Asset_Editors/Notes.htm",
          "blurb": "The Note Editor will open a code/script window where you can keep notes and code snippets or any other information that you consider relevant to the project. You can create multiple notes and name them from the right mouse button  menu in the Asset Browser.\nNotes can also be grouped and re-ordered like any other asset."
        }
      ],
      "keys": []
    },
    {
      "name": "Object Editor",
      "type": "key",
      "topics": [
        {
          "name": "Objects",
          "type": "topic",
          "url": "The_Asset_Editors/Objects.htm",
          "blurb": "Objects are the resource that we use to control aspects of a game and to do specific things. Most of the time they have a sprite associated with them so that you see them in the game rooms, but sometimes they are used as a \"behind the scenes\" controller to do things related to the user or for timing, etc... They can be given behaviours and they can react to certain events as well as to each other, and most of the things you see in a game are based on objects and their interactions. Now, we say \"based on\" because you don't actually place objects directly into the game rooms, but rather you place instances of these objects which are basically copies (or clones if you prefer) of the object resource. This is a very important thing to remember as instances and objects are not the same thing and each have their own set of functions that can affect them."
        }
      ],
      "keys": []
    },
    {
      "name": "object_exists",
      "type": "key",
      "topics": [
        {
          "name": "object_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_exists.htm",
          "blurb": "This function returns whether the specified value is an object asset (true) or not (false). Note that this checks to see if an object is present in the Asset Browser, and not actually in the game room. For that you should use the function instance_exists().",
          "syntax": "object_exists(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_get_mask",
      "type": "key",
      "topics": [
        {
          "name": "object_get_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_mask.htm",
          "blurb": "This function will tell you whether the object you are checking has a mask index or not, and if it does then it will return the index of that mask (which is a sprite asset), or -1 if it does not. Please note that this is not an instance function! You can have an object with no mask while an instance of that same object can have one and vice-versa, or they can even have different masks. You can set an individual instances mask index using the mask_index instance variable.",
          "syntax": "object_get_mask(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_get_name",
      "type": "key",
      "topics": [
        {
          "name": "object_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_name.htm",
          "blurb": "This function will return the name as a string of the specified object. This name is the one that has been specified for the object in the Asset Browser of the main GameMaker window. Please note that this is only a string and cannot be used to reference the object directly - for that you would need the object index. You can, however, use this string to get the object index using the returned string along with the function asset_get_index().",
          "syntax": "object_get_name(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_get_parent",
      "type": "key",
      "topics": [
        {
          "name": "object_get_parent",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_parent.htm",
          "blurb": "This function will get you the object index of any parent that has been assigned to the specified object, or else return -100 to show that the object has no parent assigned to it, or -1 if the object being checked does not exist. For more information on parents see the section on the Object Editor.",
          "syntax": "object_get_parent(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_get_persistent",
      "type": "key",
      "topics": [
        {
          "name": "object_get_persistent",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_persistent.htm",
          "blurb": "This function will tell you whether the object you are checking has been flagged as \"persistent\" or not. A persistent object is one that will cause any instances of it to be carried through from room to room unless they are explicitly destroyed. Please note that this is not an instance function! So, you can have a persistent object and a non-persistent instance of the same object and vice-versa. You can set an individual instances persistent flag using the persistent instance variable.",
          "syntax": "object_get_persistent(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_get_physics",
      "type": "key",
      "topics": [
        {
          "name": "object_get_physics",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_physics.htm",
          "blurb": "This function will tell you whether the object you are checking has been flagged as \"physics enabled\"  - in which case it'll return true, - or not - in which case it will return false.",
          "syntax": "object_get_physics(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_get_solid",
      "type": "key",
      "topics": [
        {
          "name": "object_get_solid",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_solid.htm",
          "blurb": "This function will tell you whether the object you are checking has been flagged as \"solid\" or not. A solid object generates a special collision event when using the traditional collision system (ie: the physics world is off). Please note that this is not an instance function! So, you can have a solid object and a normal instance of the same object and vice-versa. You can set an individual instances solid flag using the solid instance variable.",
          "syntax": "object_get_solid(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_get_sprite",
      "type": "key",
      "topics": [
        {
          "name": "object_get_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_sprite.htm",
          "blurb": "This function will tell you whether the object you are checking has a sprite or not, and if it does then it will return the index of that sprite, or -1 if it does not. Please note that this is not an instance function! You can have an object with no sprite while an instance of that same object can have one and vice-versa, or they can even have different sprites. You can set an individual instances sprite using the sprite_index instance variable.",
          "syntax": "object_get_sprite(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_get_visible",
      "type": "key",
      "topics": [
        {
          "name": "object_get_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_visible.htm",
          "blurb": "This function will tell you whether the object you are checking has been flagged as \"visible\" (runs its draw event) or not (does not run its draw event). Please note that this is not an instance function! So, you can have a visible object and an invisible instance of the same object and vice-versa. You can set an individual instances visibility using the visible instance variable.",
          "syntax": "object_get_visible(obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_index",
      "type": "key",
      "topics": [
        {
          "name": "object_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_index.htm",
          "blurb": "This read only variable returns the index of the object that the instance has been created from. This is not the same as the object name, which is a string and can be found using object_get_name(), as this function returns the index number, which is a unique value that GameMaker assigns to every object at the time of creation.",
          "syntax": "object_index"
        }
      ],
      "keys": []
    },
    {
      "name": "object_is_ancestor",
      "type": "key",
      "topics": [
        {
          "name": "object_is_ancestor",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_is_ancestor.htm",
          "blurb": "This function can be used to check an object and see if it is an ancestor or not of another object. So, both arguments need to be object indices and not the instance ids, and the first one is always the object that you want to find out if it is a child of the second argument, which is always the object that want to check as the ancestor (parent).",
          "syntax": "object_is_ancestor(obj, par)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_set_mask",
      "type": "key",
      "topics": [
        {
          "name": "object_set_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_mask.htm",
          "blurb": "With this function you can set the mask_index of a specific object (for more information on masks see The Object Editor). This means that all instances of this object that are created after the mask has been changed will be created with this new mask, while instances that are already in the room may not be affected. You can set this to -1 to remove a mask sprite and so default to the mask defined for the sprite of the object (or no masks if no sprite has been chosen).",
          "syntax": "object_set_mask(index, spr)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_set_persistent",
      "type": "key",
      "topics": [
        {
          "name": "object_set_persistent",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_persistent.htm",
          "blurb": "With this function you can set the persistence of a specific object. A persistent object is \"carried over\" from room to room and maintains its properties at all times (for more information on persistence see the section on the Object Editor). Setting the persistence of the object means that all instances of this object that are created after the persistence has been changed will be created persistent, while instances that are already in the room may not be affected.",
          "syntax": "object_set_persistent(index, pers)"
        }
      ],
      "keys": []
    },
    {
      "name": "object_set_solid",
      "type": "key",
      "topics": [
        {
          "name": "object_set_solid",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_solid.htm",
          "blurb": "With this function you can flag a specific object as being solid or not (for more information on the \"solid\" flag see the section on the Object Editor). This means that all instances of this object that are created after solid has been changed will be created with this new state, while instances that are already in the room may not be affected.",
          "syntax": "object_set_solid( index, solid )"
        }
      ],
      "keys": []
    },
    {
      "name": "object_set_sprite",
      "type": "key",
      "topics": [
        {
          "name": "object_set_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_sprite.htm",
          "blurb": "With this function you can set the sprite index of a specific object. This means that all instances of this object that are created after the sprite_index has been changed will be created with this new sprite_index, while instances that are already in the room may not be affected.",
          "syntax": "object_set_sprite( index, spr )"
        }
      ],
      "keys": []
    },
    {
      "name": "object_set_visible",
      "type": "key",
      "topics": [
        {
          "name": "object_set_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_visible.htm",
          "blurb": "With this function you can flag a specific object as being visible or not (for more information on the \"visible\" flag see the section on the Object Editor). This means that all instances of this object that are created after visible has been changed will be created with this new state, while instances that are already in the room may not be affected.",
          "syntax": "object_set_visible( index, vis )"
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Audio Playback Event",
      "type": "key",
      "topics": [
        {
          "name": "Audio Playback",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Audio_Playback.htm",
          "blurb": "This event can only be triggered by the audio queue play functions and will return a DS Map stored in the variable  async_load, containing different key/value pairs relating to the audio queue that has triggered the event. The event is triggered by a callback when you have selected an audio queue to playback and a\nbuffer in that audio queue is finished playing."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Audio Recording Event",
      "type": "key",
      "topics": [
        {
          "name": "Audio Recording",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Audio_Recording.htm",
          "blurb": "This event can only be triggered by the audio_start_recording() function and will return a DS Map stored in the variable async_load,\ncontaining different key/value pairs depending on the callback from the function that has triggered the event."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Cloud Event",
      "type": "key",
      "topics": [
        {
          "name": "Cloud",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Cloud.htm",
          "blurb": "The Cloud Event is one that is triggered by the call back from one of the cloud_*() functions, like cloud_synchronise(). It actually generates a DS map that is exclusive to this event and is stored in\nthe special variable  async_load  (please see the individual functions for code examples that explain the use of this\nevent in further detail). This DS map has the following structure:"
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Dialog Event",
      "type": "key",
      "topics": [
        {
          "name": "Dialog",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Dialog.htm",
          "blurb": "The Dialog asynchronous event is only triggered when it gets a callback from one of the special asynchronous dialog functions, like get_login_async()��(please\nsee this function for an extended code example of how this event is used)."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Events",
      "type": "key",
      "topics": [
        {
          "name": "Async Events",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async HTTP Event",
      "type": "key",
      "topics": [
        {
          "name": "HTTP",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/HTTP.htm",
          "blurb": "The HTTP Event is one that is triggered by the callback from one of the http_*() functions, like http_post_string(). It actually generates a DS Map that is exclusive to this event and is stored in the special variable async_load (please see the individual functions for code examples that explain the use of this event in further detail). This DS map has the following general structure:"
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async IAP Event",
      "type": "key",
      "topics": [
        {
          "name": "IAP",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/IAP.htm",
          "blurb": "This event can only be triggered by the various In App Purchase (IAP) extensions for the different target platforms available on the Marketplace. This event will always generate a DS map that is exclusive to this event and stored in the special variable async_load.\nThis DS map will have different key/value pairs depending on the extension function that triggered it, but there will always be an \"id\" key which can then be used to identify the type of In App Purchase event\nthat it is. For exact details of the possible return values and functions that generate this event, please see the individual PDF manuals included with each of the extensions."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Image Loaded Event",
      "type": "key",
      "topics": [
        {
          "name": "Image Loaded",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Image_Loaded.htm",
          "blurb": "This event is triggered when you load an image into GameMaker either on HTML5, or through a URL. For example, say you want to load a sprite image, and only change the current sprite for the instance to the new one after it has loaded. You would have something like this in the Create event (or any other event):"
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Networking Event",
      "type": "key",
      "topics": [
        {
          "name": "Networking",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Networking.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Push Notification Event",
      "type": "key",
      "topics": [
        {
          "name": "Push Notifications",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Push_Notifications.htm",
          "blurb": "The Push Notification Event is triggered by the callback from push notifications on the device OS, either from a local source or a remote source. It generates a DS Map that is exclusive to this event and is stored in the special variable  async_load."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Save / Load Event",
      "type": "key",
      "topics": [
        {
          "name": "Save / Load",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Save_Load.htm",
          "blurb": "This event will be triggered by the callback from certain functions related to loading and saving buffers to files, as well as when loading or unloading audio from memory. The event itself will contain the built in async_load DS map which will be populated by the keys required for the specific function. These are listed in the sections below."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Social Event",
      "type": "key",
      "topics": [
        {
          "name": "Social",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Social.htm",
          "blurb": "This event can only be triggered by the callbacks from various specific Social Functions and Xbox Live Functions and will return a DS Map stored in the variable async_load, containing different key/value pairs depending on the callback from the function that has triggered the event."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async Steam Event",
      "type": "key",
      "topics": [
        {
          "name": "Steam",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/Steam.htm",
          "blurb": "This event can only be triggered by callbacks from some of the Steam extension functions and will return a DS Map stored in the variable async_load, containing different key/value pairs depending on the call-back from the function that has triggered the event. The map will always contain the key \"event_type\" which can then be parsed to find the type of function that triggered the event and change the code required to suit."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Async System Event",
      "type": "key",
      "topics": [
        {
          "name": "System",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Async_Events/System.htm",
          "blurb": "This event can only be triggered by a callback from a system level event (such as the detection of a gamepad or the automatic signing in to XBox Live) and it will return a DS Map stored in the variable async_load, containing different key/value pairs depending on the system level event that triggered the call-back. These events are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Draw Events",
      "type": "key",
      "topics": [
        {
          "name": "Draw Events",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Draw_Events.htm",
          "blurb": "The Draw event category is the one that has all the events that governs what you see on the screen when you run your game. It is split into various separate events to better handle the different drawing requirements for your game, and the image below illustrates the order in which each event is performed:"
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Event Order",
      "type": "key",
      "topics": [
        {
          "name": "Event Order",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Event_Order.htm",
          "blurb": "When considering Events in GameMaker, it should be noted that the exact order that ALL the events are going to occur in each step cannot be clearly stated, simply because it depends on the internal workings of GameMaker and this is subject to change as the software develops. However there are certain events that will always run in the same order."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Events",
      "type": "key",
      "topics": [
        {
          "name": "Object Events",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Object_Events.htm",
          "blurb": "So, what are object events? Basically, these are discreet moments in the game loop where things are made to happen based on what you have programmed for them. GameMaker works with cycles of these events - from the moment a room is started to the moment it is finished there is a game loop running where every step a series of events are run or checked, and you can choose to place code or GML Visual actions in your objects that respond to these events (a step is a moment in game time, governed by the room speed setting, and can also be called a frame) ."
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Gesture Events",
      "type": "key",
      "topics": [
        {
          "name": "Gesture Events",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Gesture_Events.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Other Events",
      "type": "key",
      "topics": [
        {
          "name": "Other Events",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Other_Events.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Parents",
      "type": "key",
      "topics": [
        {
          "name": "Parent Objects",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Parent_Objects.htm",
          "blurb": "When working with objects in the GameMaker IDE, you can set up Parent / Child hierarchies. This is done by clicking the \"Parent\" button in the object editor and then choosing another object from the Asset Browser to be the \"parent\" of the one being edited:"
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Physics",
      "type": "key",
      "topics": [
        {
          "name": "Physics Objects",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Physics_Objects.htm",
          "blurb": "When you first create a new object resource, there is a check-box marked Uses Physics, which is not checked by default. Selecting this option will radically change the behaviour of your object when an instance of it is placed in a room, as this switches on the object's physical properties and means that its \"traditional\" movement and collision functions are no longer valid (but only when the room it is placed on is also marked as being a physics room. See\nthe section on the Room Editor Properties). When you check this, the object resource window opens a new chained window for the physics editor:"
        }
      ],
      "keys": []
    },
    {
      "name": "Objects - Variables",
      "type": "key",
      "topics": [
        {
          "name": "Object Variables",
          "type": "topic",
          "url": "The_Asset_Editors/Object_Properties/Object_Variables.htm",
          "blurb": "When you click on the Variables button it will open up the Object Variables window, which you can then use to generate any number of variables before the Create Event of the object:"
        }
      ],
      "keys": []
    },
    {
      "name": "Obsolete Functions",
      "type": "key",
      "topics": [
        {
          "name": "Obsolete Functions",
          "type": "topic",
          "url": "Additional_Information/Obsolete_Functions.htm",
          "blurb": "Here you can find a list of all the functions that have been made obsolete when you compare GameMaker to legacy versions of the product. The functions listed here will be converted into compatibility scripts when you import a *.yyz made with a legacy version, and you can continue to work on the project as before. However, we recommend that you revise all the compatibility scripts created in a project, and ensure that future projects use the new functions/methods of working rather than depend on these scripts."
        }
      ],
      "keys": []
    },
    {
      "name": "ord",
      "type": "key",
      "topics": [
        {
          "name": "ord",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/ord.htm",
          "blurb": "This function takes a single character input string and returns the Unicode (UTF8) value for that character. Note that when used with the keyboard_check* functions, the input string can only be one character in length and can only be a number from 0 to 9 or a capitalised Roman character from A to Z.",
          "syntax": "ord(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "os_android",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_browser",
      "type": "key",
      "topics": [
        {
          "name": "os_browser",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
          "blurb": "This read-only variable holds one of various constants (listed below) that GameMaker has to tell you which browser you are currently running the game in (if any).",
          "syntax": "os_browser"
        }
      ],
      "keys": []
    },
    {
      "name": "os_check_permission",
      "type": "key",
      "topics": [
        {
          "name": "os_check_permission",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_check_permission.htm",
          "blurb": "With this function you can check to see if a specific permission has been granted to the game by the user. You supply the permission to check as a string using the format \"android.permission.<permission>\", so to check the RECORD_AUDIO permission (for example) you would call",
          "syntax": "os_check_permission(permission)"
        }
      ],
      "keys": []
    },
    {
      "name": "os_device",
      "type": "key",
      "topics": [
        {
          "name": "os_device",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
          "blurb": "This read-only variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
          "syntax": "os_device"
        }
      ],
      "keys": []
    },
    {
      "name": "os_get_config",
      "type": "key",
      "topics": [
        {
          "name": "os_get_config",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_get_config.htm",
          "blurb": "This function returns the name (as a string) of the currently selected configuration for your game. For more information on configurations please see the section Configurations.",
          "syntax": "os_get_config()"
        }
      ],
      "keys": []
    },
    {
      "name": "os_get_info",
      "type": "key",
      "topics": [
        {
          "name": "os_get_info",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_get_info.htm",
          "blurb": "This function returns a DS Map with detailed information about the OS that the game is running on. The exact information returned will depend on the OS and the device, so it is recommended that you test this function on all platforms that you wish to target and output the returned values using a function like show_debug_message(). Note that the DS map is not automatically cleared from memory and you should use the ds_map_destroy() function when you no longer need it.",
          "syntax": "os_get_info()"
        }
      ],
      "keys": []
    },
    {
      "name": "os_get_language",
      "type": "key",
      "topics": [
        {
          "name": "os_get_language",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_get_language.htm",
          "blurb": "This function returns a string with the two letter Language Code for the OS that is running the game, as set by the ISO639 standard. If the information is not available, it will hold simply an empty string \"\", or \"en\" for \"English\" language. Note that some languages also have a relevant Regional Code too, so to distinguish between different regions of the same country use the function os_get_region().",
          "syntax": "os_get_language()"
        }
      ],
      "keys": []
    },
    {
      "name": "os_get_region",
      "type": "key",
      "topics": [
        {
          "name": "os_get_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_get_region.htm",
          "blurb": "This function returns a string with the two or three letter Regional Code for the OS that is running the game, as set by the ISO3166-1 standard. If the information is not available, it will hold simply an empty string \"\".",
          "syntax": "os_get_region()"
        }
      ],
      "keys": []
    },
    {
      "name": "os_ios",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_is_network_connected",
      "type": "key",
      "topics": [
        {
          "name": "os_is_network_connected",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_is_network_connected.htm",
          "blurb": "With this function you can check and see if your device currently has an internet connection and it will return true if it does, or false if it does not, and depending on the OS, it may attempt to make a connection before returning a value.",
          "syntax": "os_is_network_connected([attempt_connection])"
        }
      ],
      "keys": []
    },
    {
      "name": "os_is_paused",
      "type": "key",
      "topics": [
        {
          "name": "os_is_paused",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_is_paused.htm",
          "blurb": "When developing for mobile devices, you need to have a way to check that the device is still focused on your game or not, especially as if your game is on an iOS, Android or Windows Phone device then it can be interrupted by phone calls and other apps. You can use this function to check if the device is paused or not.",
          "syntax": "os_is_paused()"
        }
      ],
      "keys": []
    },
    {
      "name": "os_linux",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_lock_orientation",
      "type": "key",
      "topics": [
        {
          "name": "os_lock_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_lock_orientation.htm",
          "blurb": "With this function you can \"lock\" your device to the current orientation until such time as you \"free\" it to allow all Game Options enabled orientations again for that target platform. Note that you likely want to confirm the orientation is as desired before locking.",
          "syntax": "os_lock_orientation(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "os_macosx",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_permission_denied",
      "type": "key",
      "topics": [
        {
          "name": "os_check_permission",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_check_permission.htm",
          "blurb": "With this function you can check to see if a specific permission has been granted to the game by the user. You supply the permission to check as a string using the format \"android.permission.<permission>\", so to check the RECORD_AUDIO permission (for example) you would call",
          "syntax": "os_check_permission(permission)"
        },
        {
          "name": "os_request_permission",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_request_permission.htm",
          "blurb": "With this function you can request a specific permission. You supply the permission to request as a string using the format \"android.permission.<permission>\", so to request the RECORD_AUDIO permission (for example) you would call:",
          "syntax": "os_request_permission(permissions...)"
        }
      ],
      "keys": []
    },
    {
      "name": "os_permission_denied_dont_request",
      "type": "key",
      "topics": [
        {
          "name": "os_check_permission",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_check_permission.htm",
          "blurb": "With this function you can check to see if a specific permission has been granted to the game by the user. You supply the permission to check as a string using the format \"android.permission.<permission>\", so to check the RECORD_AUDIO permission (for example) you would call",
          "syntax": "os_check_permission(permission)"
        }
      ],
      "keys": []
    },
    {
      "name": "os_permission_granted",
      "type": "key",
      "topics": [
        {
          "name": "os_check_permission",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_check_permission.htm",
          "blurb": "With this function you can check to see if a specific permission has been granted to the game by the user. You supply the permission to check as a string using the format \"android.permission.<permission>\", so to check the RECORD_AUDIO permission (for example) you would call",
          "syntax": "os_check_permission(permission)"
        },
        {
          "name": "os_request_permission",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_request_permission.htm",
          "blurb": "With this function you can request a specific permission. You supply the permission to request as a string using the format \"android.permission.<permission>\", so to request the RECORD_AUDIO permission (for example) you would call:",
          "syntax": "os_request_permission(permissions...)"
        }
      ],
      "keys": []
    },
    {
      "name": "os_powersave_enable",
      "type": "key",
      "topics": [
        {
          "name": "os_powersave_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_powersave_enable.htm",
          "blurb": "With this function you can turn on or off the power saving features of the device. This is important as certain games (for example those that use the tilt functions) may not generate events that the OS can interpret as being user input and so shut down the screen or exit the game. By setting this function to false you can disable the power saving features and ensure that the screen (and game) are always functioning.",
          "syntax": "os_powersave_enable(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "os_ps4",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_request_permission",
      "type": "key",
      "topics": [
        {
          "name": "os_request_permission",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_request_permission.htm",
          "blurb": "With this function you can request a specific permission. You supply the permission to request as a string using the format \"android.permission.<permission>\", so to request the RECORD_AUDIO permission (for example) you would call:",
          "syntax": "os_request_permission(permissions...)"
        }
      ],
      "keys": []
    },
    {
      "name": "os_switch",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_tvos",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_type",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_unknown",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_uwp",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_version",
      "type": "key",
      "topics": [
        {
          "name": "os_version",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_version.htm",
          "blurb": "This variable will tell you the version number for the OS that is running your game. For example, if you are running it on Windows 10, os_version will be equal to 655360.",
          "syntax": "os_version"
        }
      ],
      "keys": []
    },
    {
      "name": "os_windows",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "os_xboxone",
      "type": "key",
      "topics": [
        {
          "name": "os_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
          "blurb": "This read-only variable holds one of various constant GameMaker has to tell you which operating system the game has been created for. Note that this is not necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).",
          "syntax": "os_type"
        }
      ],
      "keys": []
    },
    {
      "name": "other",
      "type": "key",
      "topics": [
        {
          "name": "Instance Keywords",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Instance_Keywords.htm",
          "blurb": "To make certain things easier in GameMaker, you can use one of several instance keywords in your code (whether GML or GML Visual). These keywords are used primarily to identify instances - and in some cases structs - under different situations, and each one is explained in the text below."
        }
      ],
      "keys": []
    },
    {
      "name": "Output Window",
      "type": "key",
      "topics": [
        {
          "name": "The Output Window",
          "type": "topic",
          "url": "Introduction/The_Output_Window.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "parameter_count",
      "type": "key",
      "topics": [
        {
          "name": "parameter_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/parameter_count.htm",
          "blurb": "Command-line parameters are those extra commands that you can add to an exe to change how the program is run. You can find the number of parameters for the current game using this function, where the first parameter has index 1 and the last one has the index returned by the function (a value of 0 is special on that it is the filename of the game executable, including the path). It should be noted that this function will work for on the HTML5 platform, retrieving the url parameters.",
          "syntax": "parameter_count()"
        }
      ],
      "keys": []
    },
    {
      "name": "parameter_string",
      "type": "key",
      "topics": [
        {
          "name": "parameter_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/parameter_string.htm",
          "blurb": "Command-line parameters are those extra commands that you can add to an exe to change how the program is run and with this function you can get the chosen command-line parameter as a string. You can find the number of parameters for the current game using the function parameter_count(), where the first parameter has index 1 and the last one has the index returned by the function (a value of 0 is special on that it is the filename of the game executable, including the path). It should be noted that this function will work for on the HTML5 platform, retrieving the url parameters.",
          "syntax": "parameter_string(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_emitter_burst",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_burst",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_burst.htm",
          "blurb": "This function allows you to set an emitter to burst a specific type of particle and is typically used in alarms and destroy events as it is a one off code that creates the number of particles specified all at once following the distribution, shape and position set by the function part_emitter_region(). Should you need the particles to appear every step, you should be using the function part_emitter_stream() rather than calling this function every step.",
          "syntax": "part_emitter_burst(ps, ind, parttype, number)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_emitter_clear",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_clear.htm",
          "blurb": "With this function you can clear the given emitter from the specified particle system back to its default state. This will also stop any particles that are being streamed from the emitter at the time, and if you wish to use the emitter again you will need to set the region position and particle type using the part_emitter_region() function.",
          "syntax": "part_emitter_clear(ps, ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_emitter_create",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_create.htm",
          "blurb": "This function is used to create a new particle emitter in the given particle system. The function will return the index value for the new emitter which must be stored in a variable and used in all further functions that reference the emitter, and the emitter itself must be destroyed when no longer being used to prevent memory leaks (this can be achieved using the specific emitter destroy functions or by destroying the whole particle system that the emitter belongs to).",
          "syntax": "part_emitter_create(ps)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_emitter_destroy",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_destroy.htm",
          "blurb": "This function will remove the specified emitter from the given system and clear it from memory (this will also stop any particles from being produced by the given emitter, but it does NOT remove them from the room). This function should always be called when the given emitter is no longer needed for the system to prevent memory leaks and errors.",
          "syntax": "part_emitter_destroy( ps, ind )"
        }
      ],
      "keys": []
    },
    {
      "name": "part_emitter_destroy_all",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_destroy_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_destroy_all.htm",
          "blurb": "This function will remove all defined emitters from the given system and clear them from memory (this will also stop any particles from being produced by the given emitter, but it does NOT remove them from the room). This function should always be called when the emitters are no longer needed for the system to prevent memory leaks and errors.",
          "syntax": "part_emitter_destroy_all( ps )"
        }
      ],
      "keys": []
    },
    {
      "name": "part_emitter_exists",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_exists.htm",
          "blurb": "With this function you can check to see if the given particle emitter indexed exists in the given system or not. Note that if the variable being checked is an uninitialised variable (that a particle emitter would otherwise have its index assigned to) this will throw an error.",
          "syntax": "part_emitter_exists(ps, ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_emitter_region",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
          "blurb": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
          "syntax": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_emitter_stream",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_stream",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_stream.htm",
          "blurb": "This function allows you to set an emitter to stream a specific type of particle and is typically used the create event as it is a one off code that sets the emitter to generate the number of particles specified every step of the game there-after. The particles are emitted following the distribution, shape and position set by the function part_emitter_region(). You can set the number of particles being streamed to zero and call this function again to \"switch off\" the particle streaming, and the function will also accept negative numbers for the amount, in which case the emitter will produce particles based on random chance. For example, if you have the particle number set to -5, there is a 1:5 chance that a particle will be produced every step. Should you need the particles to appear all at once rather than every step, you should be using the function part_emitter_burst().",
          "syntax": "part_emitter_stream(ps, ind, parttype, number)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_particles_clear",
      "type": "key",
      "topics": [
        {
          "name": "part_particles_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_clear.htm",
          "blurb": "With this function you can clear all the particles currently created by the system from the room. It does not reset or remove the particle types themselves, just their visual representation, and if you have any object streaming particles from an emitter, these particles disappear but will begin to appear again the next step after calling this code.",
          "syntax": "part_particles_clear(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_particles_count",
      "type": "key",
      "topics": [
        {
          "name": "part_particles_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_count.htm",
          "blurb": "With this function you can check to see if a particle system currently has any particles created in the room, and it will return the number of them too.",
          "syntax": "part_particles_count(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_particles_create",
      "type": "key",
      "topics": [
        {
          "name": "part_particles_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_create.htm",
          "blurb": "This function is ideal for those effects that do not require any of the functionality offered by particle emitters (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. Note that you must have created the particle system and the particle type previously for this function to be used.",
          "syntax": "part_particles_create(ind, x, y, parttype, number)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_particles_create_color",
      "type": "key",
      "topics": [
        {
          "name": "part_particles_create_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_create_colour.htm",
          "blurb": "This function is ideal for those effects that do not require any of the functionality offered by particle emitters (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. You can also colour the particles \"on the fly\" as they are created with this function, and this colour will over-ride the predefined colour of the particle, but it does not blend this colour over the particles lifetime. Note that you must have created the particle system and the particle type previously for this function to be used.",
          "syntax": "part_particles_create_colour(ind, x, y, parttype, colour, number)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_particles_create_colour",
      "type": "key",
      "topics": [
        {
          "name": "part_particles_create_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_create_colour.htm",
          "blurb": "This function is ideal for those effects that do not require any of the functionality offered by particle emitters (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. You can also colour the particles \"on the fly\" as they are created with this function, and this colour will over-ride the predefined colour of the particle, but it does not blend this colour over the particles lifetime. Note that you must have created the particle system and the particle type previously for this function to be used.",
          "syntax": "part_particles_create_colour(ind, x, y, parttype, colour, number)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_automatic_draw",
      "type": "key",
      "topics": [
        {
          "name": "part_system_automatic_draw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_automatic_draw.htm",
          "blurb": "This function can be used to switch off the drawing of a particle system so that any updates done to the system (automatic or otherwise) will not be seen. This is a purely visual option and when set to false you will not be able to see the particles as they are not drawn, but they still exists and are changing position, colour etc... as they would normally. When automatic drawing is off, you can explicitly order GameMaker to draw the current state of the particle system using the function part_system_drawit(), and if you set this function to true again you can switch automatic drawing back on.",
          "syntax": "part_system_automatic_draw(ind, automatic)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_automatic_update",
      "type": "key",
      "topics": [
        {
          "name": "part_system_automatic_update",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_automatic_update.htm",
          "blurb": "This function controls whether GameMaker should update the particle system automatically or not, and normally you would not need to use this function as the default value of true (automatic update is on) is what you wish to happen. However, for special effects or for pausing the game, you can set this to false and it will prevent any updates being carried out on the given particle system unless explicitly commanded by the use of the function part_system_update() or you use this function again to turn automatic updates on. No updating means that particles created in this system will no longer change position, colour or any other parameter and that emitters will cease to work too, \"freezing\" the system at the exact point in which the automatic update was set to false.",
          "syntax": "part_system_automatic_update(ind, automatic)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_clear",
      "type": "key",
      "topics": [
        {
          "name": "part_system_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_clear.htm",
          "blurb": "With this function you can clear the indexed system to its default state, removing all emitters and resetting the depth and position (if they had been changed). Be careful using this function as if you have any instance setting or bursting or any other action using an emitter associated with this system, you will get an error unless you are using the part_emitter_exists() function to check. There is also no need to call the part_emitter_destroy() function as this is taken care of automatically too.",
          "syntax": "part_system_clear(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_create",
      "type": "key",
      "topics": [
        {
          "name": "part_system_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_create.htm",
          "blurb": "This function is used to create a new particle system and will return a unique index number that should be stored and used in all further functions relating to that system. The system will be assigned a managed layer and will be set to have a depth of 0. Managed layers are not accessible to the user and used only for internal management when depth is used instead of layers. Normally you would use the function part_system_create_layer() instead of this one.",
          "syntax": "part_system_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_create_layer",
      "type": "key",
      "topics": [
        {
          "name": "part_system_create_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_create_layer.htm",
          "blurb": "This function will create a new particle system on a given layer. You give the unique layer ID as returned by the function layer_create() or the name of the layer to use as a string - for example \"instance_layer\" - and then flag the system as being persistent or not. If the system is not flagged as persistent then it will be automatically destroyed at the end of the room it was created in (this is the same as if you had called the function part_system_destroy() and will also destroy any emitters associated with the system). However, when flagged as persistent, the system will be carried to the next room when the room is changed, and if the following room does not have a layer with the same name or depth as the one assigned, then a new layer will be created for the system that is persisting across the rooms, and it will be named the same as original layer. When changing rooms, if there is another layer in the following rooms with the same name, then the persisted instance will be assigned to the layer with the that name regardless of the depth of the layer. Finally, if a persisted system moves to a room with a layer at the same depth as the layer the system was created on, it will not be assigned to this layer, but instead a new layer will be created at the same depth (with the same name as the original layer).",
          "syntax": "part_system_create_layer(layer_id, persistent)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_depth",
      "type": "key",
      "topics": [
        {
          "name": "part_system_depth",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_depth.htm",
          "blurb": "With this function you can set the draw depth for the particle system, much the same as you can set the render depth of different layers within the room, where a low draw depth means that it will appear on top of all things drawn with a higher depth, and a high draw depth placing it below everything with a lower draw depth.",
          "syntax": "part_system_depth( ind, depth )"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_destroy",
      "type": "key",
      "topics": [
        {
          "name": "part_system_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_destroy.htm",
          "blurb": "With this function you can destroy a given particles system and remove it from memory. This should always be called when the system is no longer needed, like at the end of a room, or in the destroy event of an instance, otherwise you could end up with particles appearing in later rooms and no way to remove them as well as a memory leak which will eventually crash your game.",
          "syntax": "part_system_destroy(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_draw_order",
      "type": "key",
      "topics": [
        {
          "name": "part_system_draw_order",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_draw_order.htm",
          "blurb": "With this function you can set the way in which particles are drawn when created on the screen. The default system uses an old > new look (the function is set to true), where old particles are drawn at a higher depth than newer ones and so appear \"beneath\" them new particles, but by setting this function to false you can reverse this order and have the new particles drawn higher and so appear \"beneath\" the older ones. The images below illustrate this, with the image on the left being the default value of true and the image on the right being false:",
          "syntax": "part_system_draw_order(ind, oldtonew)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_drawit",
      "type": "key",
      "topics": [
        {
          "name": "part_system_drawit",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_drawit.htm",
          "blurb": "With this function you can force a particle system to draw all the current particles on the screen. If part_system_automatic_draw() is switched off then this function will show the particles when used in the draw event of an instance, or it can be used when the drawing target is set to a surface (using surface_set_target()) to draw the particles in the system to that surface.",
          "syntax": "part_system_drawit(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_exists",
      "type": "key",
      "topics": [
        {
          "name": "part_system_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_exists.htm",
          "blurb": "With this function you can check to see if the given particle system indexed exists in the game or not. Note that if the variable being checked is an uninitialised variable (that a particle system would otherwise have its index assigned to) this will throw an error.",
          "syntax": "part_system_exists(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_get_layer",
      "type": "key",
      "topics": [
        {
          "name": "part_system_get_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_get_layer.htm",
          "blurb": "This function can be used to retrieve the unique layer ID value for the given particle system. You supply the particle system ID value (as returned by the function part_system_create_layer()) and the function will return the ID value of the layer.",
          "syntax": "part_system_get_layer(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_layer",
      "type": "key",
      "topics": [
        {
          "name": "part_system_layer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_layer.htm",
          "blurb": "This function can be used to switch a particle system from its current layer to a new one. You supply the particle system ID value (as returned by the function part_system_create_layer()) and then the unique layer ID (as returned by the function layer_create() or the name of the layer to use as a string - for example \"instance_layer\" - as defined in the room editor), and the system will be moved to the new layer.",
          "syntax": "part_system_layer(ps, layer)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_position",
      "type": "key",
      "topics": [
        {
          "name": "part_system_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_position.htm",
          "blurb": "With this function you can set the base position for the particle system relative to the (0,0) position of the room, meaning that all further particle functions relating to this system will now be drawn relative to the new position. By default this position is always (0,0), but in some very special circumstances you may wish to change this to something else.",
          "syntax": "part_system_position(ind, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_system_update",
      "type": "key",
      "topics": [
        {
          "name": "part_system_update",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_update.htm",
          "blurb": "This function will advance the given particle system one step in game time and can be used to simulate the particle system behaviour when automatic updating is off, or it can be used to advance a particle system to a specific point all in one step. For example, if you have a particle system for snow, and you want it to appear that the snow is falling right from the moment the player enters the room then you may wish to advance your snow particles for a few seconds in the create event of an instance so that the first time they are drawn, there are particles all over the screen (the code example below shows this). You can also use this function when automatic updating of the system is switched off by the function part_system_automatic_update() to move the system along.",
          "syntax": "part_system_update(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_alpha1",
      "type": "key",
      "topics": [
        {
          "name": "part_type_alpha1",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_alpha1.htm",
          "blurb": "This function is used to set a particle type to have a single alpha value (transparency) for the total duration of the lifetime of each individual particle, and this can be from 0 (transparent) to 1 (opaque).",
          "syntax": "part_type_alpha1(ind, alpha1)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_alpha2",
      "type": "key",
      "topics": [
        {
          "name": "part_type_alpha2",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_alpha2.htm",
          "blurb": "This function can be used to set an alpha value (transparency) gradient for each particle created of the given type. The first alpha is that which all particles will start with, and the second alpha is the one on with which the particle will end with, and a smooth gradient change will occur to the alpha over the particles lifetime from one to the other. This can be from 0 (transparent) to 1 (opaque).",
          "syntax": "part_type_alpha2(ind, alpha1, alpha2)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_alpha3",
      "type": "key",
      "topics": [
        {
          "name": "part_type_alpha3",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_alpha3.htm",
          "blurb": "This function can be used to set a three alpha (transparency) value gradient for each particle created of the given type. The first alpha is that which all particles will start with, and the second alpha is the one that will be blended to half way through its lifetime and the third alpha is the one with which the particle will end with. A smooth gradient change will occur through the alphas over the particles lifetime from one to the other.",
          "syntax": "part_type_alpha3(ind, alpha1, alpha2, alpha3)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_blend",
      "type": "key",
      "topics": [
        {
          "name": "part_type_blend",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_blend.htm",
          "blurb": "With this function you can make your particles be drawn with an additive blend mode (true) or not (false). Additive blending is a special blend mode that adds the luminosity values of each particle as they overlap, so that light colours will gradually get brighter (until they appear white) as they overlap, and dark colours become more and more transparent with black being almost invisible. This function can give some beautiful particle effects but may not always be necessary. For example, a smoke trail would have additive blending off to keep the effect gray, but a flame effect would probably have it on to make the particles more translucent and brighter.",
          "syntax": "part_type_blend(ind, additive)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_clear",
      "type": "key",
      "topics": [
        {
          "name": "part_type_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_clear.htm",
          "blurb": "With this function you can \"reset\" a particle, returning all the values for each of the functions relating to the particle (life, colour, alpha, orientation etc...) to their default values. Note that this function does not remove any particles currently visible in the room from the screen, for that you should be using part_particles_clear().",
          "syntax": "part_type_clear(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_color_hsv",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour_hsv",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_hsv.htm",
          "blurb": "With this function you can set a hue, saturation and value range for all particles of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. In this way you can create particles of the same hue but different saturations, or of different hues but the same value (luminosity) etc... All values must be between 0 and 255.",
          "syntax": "part_type_colour_hsv(ind, hmin, hmax, smin, smax, vmin, vmax)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_color_mix",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour_mix",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_mix.htm",
          "blurb": "With this function you can set the given particle type to be a random blend of two colours.",
          "syntax": "part_type_colour_mix(ind, colour1, colour2)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_color_rgb",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour_rgb",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_rgb.htm",
          "blurb": "With this function you can set the mix of red, green and blue colours for all particles created of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. All values must be between 0 and 255.",
          "syntax": "part_type_colour_rgb(ind, rmin, rmax, gmin, gmax, bmin, bmax p>"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_color1",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour1",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour1.htm",
          "blurb": "This function is used to set a particle type to be a single colour for the total duration of the lifetime of each individual particle.",
          "syntax": "part_type_colour1(ind, colour1)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_color2",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour2",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour2.htm",
          "blurb": "This function can be used to set a two colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one on which the particle will end with, and a smooth gradient change will occur to the colour over the particles lifetime from one colour to the other.",
          "syntax": "part_type_colour2(ind, colour1, colour2)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_color3",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour3",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour3.htm",
          "blurb": "This function can be used to set a three colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one that will be blended to half way through its lifetime and the third colour is the one with which the particle will end with. A smooth gradient change will occur through the colours over the particles lifetime from one colour to the other.",
          "syntax": "part_type_colour3( ind, colour1, colour2, colour3 )"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_colour_hsv",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour_hsv",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_hsv.htm",
          "blurb": "With this function you can set a hue, saturation and value range for all particles of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. In this way you can create particles of the same hue but different saturations, or of different hues but the same value (luminosity) etc... All values must be between 0 and 255.",
          "syntax": "part_type_colour_hsv(ind, hmin, hmax, smin, smax, vmin, vmax)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_colour_mix",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour_mix",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_mix.htm",
          "blurb": "With this function you can set the given particle type to be a random blend of two colours.",
          "syntax": "part_type_colour_mix(ind, colour1, colour2)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_colour_rgb",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour_rgb",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_rgb.htm",
          "blurb": "With this function you can set the mix of red, green and blue colours for all particles created of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. All values must be between 0 and 255.",
          "syntax": "part_type_colour_rgb(ind, rmin, rmax, gmin, gmax, bmin, bmax p>"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_colour1",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour1",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour1.htm",
          "blurb": "This function is used to set a particle type to be a single colour for the total duration of the lifetime of each individual particle.",
          "syntax": "part_type_colour1(ind, colour1)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_colour2",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour2",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour2.htm",
          "blurb": "This function can be used to set a two colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one on which the particle will end with, and a smooth gradient change will occur to the colour over the particles lifetime from one colour to the other.",
          "syntax": "part_type_colour2(ind, colour1, colour2)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_colour3",
      "type": "key",
      "topics": [
        {
          "name": "part_type_colour3",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour3.htm",
          "blurb": "This function can be used to set a three colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one that will be blended to half way through its lifetime and the third colour is the one with which the particle will end with. A smooth gradient change will occur through the colours over the particles lifetime from one colour to the other.",
          "syntax": "part_type_colour3( ind, colour1, colour2, colour3 )"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_create",
      "type": "key",
      "topics": [
        {
          "name": "part_type_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_create.htm",
          "blurb": "With this function you can create a new particle type and the return value should be stored in a variable for use in all subsequent particle functions.",
          "syntax": "part_type_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_death",
      "type": "key",
      "topics": [
        {
          "name": "part_type_death",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_death.htm",
          "blurb": "This function can be used to make your particle burst another type of particle at the end of its lifetime.",
          "syntax": "part_type_death(ind, death_number, death_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_destroy",
      "type": "key",
      "topics": [
        {
          "name": "part_type_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_destroy.htm",
          "blurb": "With this function you can remove the specified particle type from the game. When you use this function, all particles of the given type will disappear from the room and the particle itself is removed form memory, so this function should be used only when you no longer need the particle.",
          "syntax": "part_type_destroy(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_direction",
      "type": "key",
      "topics": [
        {
          "name": "part_type_direction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_direction.htm",
          "blurb": "This function is used to determine the direction of the particle when it is created and can also be used to make the particle increase or decrease its direction over its lifetime. The minimum and maximum direction values default at 0, which means that the particle will move to the right with no variation, but these values can be changed to limit the direction of movement following the standard GameMaker directions of 0 being right, 90 being up, 180 being left and 270 being down. If you set them to the same value the particles will only move in one direction.",
          "syntax": "part_type_direction(ind, dir_min, dir_max, dir_incr, dir_wiggle)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_exists",
      "type": "key",
      "topics": [
        {
          "name": "part_type_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_exists.htm",
          "blurb": "With this function you can check to see if the given particle type indexed exists in the game or not. Note that if the variable being checked is an uninitialised variable (that a particle type would otherwise have its index assigned to) this will throw an error.",
          "syntax": "part_type_exists(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_gravity",
      "type": "key",
      "topics": [
        {
          "name": "part_type_gravity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_gravity.htm",
          "blurb": "This function will set the gravity that is to affect each particle of the given type that is created. The gravity strength value is added to the particle speed every step and is usually a small value like 0.5, while the direction is the direction of the gravity \"pull\" and follows the standard GameMaker directions of 0° being right, 90° being up, 180° being left and 270° being down.",
          "syntax": "part_type_gravity(ind, grav_amount, grav_direction)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_life",
      "type": "key",
      "topics": [
        {
          "name": "part_type_life",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_life.htm",
          "blurb": "This is the function that governs how long each individual particle of the indicated type remains on the screen. As with other particle functions, you provide a minimum and a maximum value (in steps)and each particle lifespan will be a random number of steps from within the specified range. To have all particles with the same lifetime, set the two values to be the same.",
          "syntax": "part_type_life(ind, life_min, life_max)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_orientation",
      "type": "key",
      "topics": [
        {
          "name": "part_type_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_orientation.htm",
          "blurb": "This function is used to determine the orientation of the particle sprite when it is created and can also be used to make the particle orientation increase or decrease over its lifetime. The minimum and maximum orientation values default at 0 but these values can be changed to randomise the orientation following the standard GameMaker directions of 0 degrees being right, 90 degrees being up, 180 degrees being left and 270 degrees being down. If you set them to the same value the particles will all be created with the same orientation.",
          "syntax": "part_type_orientation( ind, ang_min, ang_max, ang_incr, ang_wiggle, ang_relative )"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_scale",
      "type": "key",
      "topics": [
        {
          "name": "part_type_scale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_scale.htm",
          "blurb": "This function will set the horizontal and vertical scale of the particle before any other size changes are made. This function works on the ratio of the sprite size, so a value of 1 (the default value) is a 1:1 ratio, meaning that 0.5 would be half and 2 double.",
          "syntax": "part_type_scale(ind, xscale, yscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_shape",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_size",
      "type": "key",
      "topics": [
        {
          "name": "part_type_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_size.htm",
          "blurb": "This function is used to determine the size of the particle when it is created and can also be used to make the particle increase or decrease in size over its lifetime. The minimum and maximum size values default at 1 (meaning that the size is the same ratio as the base particle after the part_type_scale() scale has been set) and if they are set to the same value, the initial size for all particles will be the same, but if set to different values, each particle will start with a random size from within the range, for example if you have a minimum of 0.5 and a maximum of 2, all particles will be created with a size between half and double the base scale.",
          "syntax": "part_type_size(ind, size_min, size_max, size_incr, size_wiggle)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_speed",
      "type": "key",
      "topics": [
        {
          "name": "part_type_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_speed.htm",
          "blurb": "This function is used to set the movement speed of the particle when it is created and can also be used to make the particle increase or decrease its speed over its lifetime. The minimum and maximum speed values default at 1, which means that the particle will move 1 pixel each step, and if they are set to the same value, the initial speed for all particles will be the same, but if set to different values, each particle will start with a random speed from within the given range. For example if you have a minimum of 3 and a maximum of 6, all particles will be created with a speed between three and six pixels per step.",
          "syntax": "part_type_speed(ind, speed_min, speed_max, speed_incr, speed_wiggle)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_sprite",
      "type": "key",
      "topics": [
        {
          "name": "part_type_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm",
          "blurb": "This function can be used to set a particle type to use a custom sprite from the game assets. You can select the sprite and then tell GameMaker to use the sprite and animate it or not, and if you choose animated, then you can also choose to have the sub-images changed at an interval such that the animation will begin and end at the beginning and end of the lifetime of each particle created (so that if you have a lifetime set to a 15 step minimum and a 30 step maximum, no matter what value the lifetime has the animation will be made to fit, with it running faster for the shorter lifetimes and slower for the longer). You can also select to choose a random sub-image so that if the sprite is not animated, a different image will be chosen at random to create the sprite, or if the particle is animated it will start the animation at a random point.",
          "syntax": "part_type_sprite(ind, sprite, animate, stretch, random)"
        }
      ],
      "keys": []
    },
    {
      "name": "part_type_step",
      "type": "key",
      "topics": [
        {
          "name": "part_type_step",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_step.htm",
          "blurb": "This function can be used to make your particle type stream another type each step until the end of its lifetime. You can set a negative value for the step number and a particle will be emitted at a random interval based on that, so that, for example, a value of -3 will have a 1:3 chance of emitting a particle each step.",
          "syntax": "part_type_step(ind, step_number, step_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "Path Editor",
      "type": "key",
      "topics": [
        {
          "name": "Paths",
          "type": "topic",
          "url": "The_Asset_Editors/Paths.htm",
          "blurb": "At some point while creating your games you may need one of your instances to follow a path through a level. Now, this can be done in code by simply creating an array of positions within the room and then having an instance move between them, but that can be a chore to set up and is difficult to change, test and adapt for different instances. For this reason GameMaker has path resources and a dedicated path editor."
        }
      ],
      "keys": []
    },
    {
      "name": "path_action_continue",
      "type": "key",
      "topics": [
        {
          "name": "path_start",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm",
          "blurb": "A path is created from a series of defining points that are linked together and then used to plan the movements of an instance. They can be created with code, or in the Path Editor and they are assigned to an instance to use in the game. You would then use this function to tell your instance which path to follow, what speed to follow the path (measured in pixels per step), how to behave when it reaches the end of the path, and whether to follow the absolute or relative path position. This last part means that it either starts and follows the path exactly as you designed and placed it in the Path Editor (absolute), or it starts and follows the path from the position at which the instance was created (relative).",
          "syntax": "path_start(path, speed, endaction, absolute)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_action_restart",
      "type": "key",
      "topics": [
        {
          "name": "path_start",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm",
          "blurb": "A path is created from a series of defining points that are linked together and then used to plan the movements of an instance. They can be created with code, or in the Path Editor and they are assigned to an instance to use in the game. You would then use this function to tell your instance which path to follow, what speed to follow the path (measured in pixels per step), how to behave when it reaches the end of the path, and whether to follow the absolute or relative path position. This last part means that it either starts and follows the path exactly as you designed and placed it in the Path Editor (absolute), or it starts and follows the path from the position at which the instance was created (relative).",
          "syntax": "path_start(path, speed, endaction, absolute)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_action_reverse",
      "type": "key",
      "topics": [
        {
          "name": "path_start",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm",
          "blurb": "A path is created from a series of defining points that are linked together and then used to plan the movements of an instance. They can be created with code, or in the Path Editor and they are assigned to an instance to use in the game. You would then use this function to tell your instance which path to follow, what speed to follow the path (measured in pixels per step), how to behave when it reaches the end of the path, and whether to follow the absolute or relative path position. This last part means that it either starts and follows the path exactly as you designed and placed it in the Path Editor (absolute), or it starts and follows the path from the position at which the instance was created (relative).",
          "syntax": "path_start(path, speed, endaction, absolute)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_action_stop",
      "type": "key",
      "topics": [
        {
          "name": "path_start",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm",
          "blurb": "A path is created from a series of defining points that are linked together and then used to plan the movements of an instance. They can be created with code, or in the Path Editor and they are assigned to an instance to use in the game. You would then use this function to tell your instance which path to follow, what speed to follow the path (measured in pixels per step), how to behave when it reaches the end of the path, and whether to follow the absolute or relative path position. This last part means that it either starts and follows the path exactly as you designed and placed it in the Path Editor (absolute), or it starts and follows the path from the position at which the instance was created (relative).",
          "syntax": "path_start(path, speed, endaction, absolute)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_add",
      "type": "key",
      "topics": [
        {
          "name": "path_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_add.htm",
          "blurb": "With this function you can create a path in GameMaker without using the path editor. This function will return the index of the path which should be stored in a variable and used as the reference for that path from then on. Please note that the created path is empty ie: it has no points defined, so you will then have to use the other available functions to add points to the path or be using MP grids to generate the path. Once you have finished using the path, or wish to create a new one and store its index in the same variable you should first delete the old path with path_delete to prevent memory leaks which can eventually crash your game.",
          "syntax": "path_add()"
        }
      ],
      "keys": []
    },
    {
      "name": "path_add_point",
      "type": "key",
      "topics": [
        {
          "name": "path_add_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_add_point.htm",
          "blurb": "With this function you can add a point to the specified path and set its speed factor. This point is added onto the end of the path, irrespective of the position of the point, and the factor is equal to the percentage of path_speed that the following instance actually goes at when it reaches this point in the path. If you wish to place a path point at some other position that is not the end, you should use path_insert_point().",
          "syntax": "path_add_point(index, x, y, speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_append",
      "type": "key",
      "topics": [
        {
          "name": "path_append",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_append.htm",
          "blurb": "With this code you can append one path onto another one, effectively joining them together, and for this to work, both paths must previously exist. In general you would want to use this function on paths created using path_add(), since if you use it on a path asset, it will permanently affect the path for instances in the game from the moment the function is used until the end of the game.",
          "syntax": "path_append(index, path)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_assign",
      "type": "key",
      "topics": [
        {
          "name": "path_assign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_assign.htm",
          "blurb": "With this function you can copy the path data from one path to another. The path being copied to will be cleared first (should it have any path points) and be completely overwritten by the path being copied from. Neither path is deleted in the process and the result is two paths, with two different indexes, but the exact same form and points. In general you would want to use this function on a path created using path_add(),\nsince if you use it on a path asset, it will permanently affect the path for all instances in the game from the moment the function is used until the end of the game.",
          "syntax": "path_assign(index, path)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_change_point",
      "type": "key",
      "topics": [
        {
          "name": "path_change_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_change_point.htm",
          "blurb": "With this function you can change the position and/or the speed factor of any point previously defined for a path (the path can have been created in the path editor or through code using path_add()). If used on a path from the Asset Browser, note that the function will change the actual asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_change_point(index, n, x, y, speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_clear_points",
      "type": "key",
      "topics": [
        {
          "name": "path_clear_points",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_clear_points.htm",
          "blurb": "With this function you can remove all point definitions from a path, effectively making an \"empty\" path. This does not delete the path, for that you should use path_delete(), however it should be noted that this function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_clear_points(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_delete",
      "type": "key",
      "topics": [
        {
          "name": "path_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm",
          "blurb": "You can use this code to remove a path from memory. If this path has been created dynamically using path_add(), the variable that holds the path index will no longer be valid for accessing the path as it no longer exists, and if the path was created using the Path Editor that path can no longer be accessed in the whole game as you are permanently deleting it.",
          "syntax": "path_delete(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_delete_point",
      "type": "key",
      "topics": [
        {
          "name": "path_delete_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete_point.htm",
          "blurb": "With this function you can remove a point from the specified path. Path points are numbered from 0 so the first point is always the 0th point and the last path point will be path_get_number() - 1. If you call this function on a path asset, then the removal of the point will be permanent and all instances assigned the path in the future will be missing the point that was removed. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_delete_point(ind, n)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_duplicate",
      "type": "key",
      "topics": [
        {
          "name": "path_duplicate",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm",
          "blurb": "This function takes a path and copies it into a new path. The new path is created in the process, and its index is returned to be used in all further calls to use this new path.",
          "syntax": "path_duplicate(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_end",
      "type": "key",
      "topics": [
        {
          "name": "path_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_end.htm",
          "blurb": "Calling this function will end the current path that the instance is following, as set when the function path_start() was called..",
          "syntax": "path_end()"
        }
      ],
      "keys": []
    },
    {
      "name": "path_endaction",
      "type": "key",
      "topics": [
        {
          "name": "path_endaction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_endaction.htm",
          "blurb": "This variable can be used to get or to change the reaction of an instance when it reaches the end of the current path. Normally you would set this when you start the path using path_start() but you may wish to change this behaviour depending on any number of events in your game. The available values are expressed using the following constants:",
          "syntax": "path_endaction"
        }
      ],
      "keys": []
    },
    {
      "name": "path_exists",
      "type": "key",
      "topics": [
        {
          "name": "path_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_exists.htm",
          "blurb": "This function returns whether a path with the given index exists or not. Note that if you check for the existence of a path through a variable that has yet to have been declared, this will throw an error.",
          "syntax": "path_exists(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_flip",
      "type": "key",
      "topics": [
        {
          "name": "path_flip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_flip.htm",
          "blurb": "This function takes all the path points and flips them along the horizontal axis. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_flip(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_closed",
      "type": "key",
      "topics": [
        {
          "name": "path_get_closed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_closed.htm",
          "blurb": "This function can be used to return whether the path is flagged as closed (true) or open (false), ie whether the path loops or if it has a definitive beginning and end.",
          "syntax": "path_get_closed(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_kind",
      "type": "key",
      "topics": [
        {
          "name": "path_get_kind",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_kind.htm",
          "blurb": "Paths can be either smooth or straight (a smooth path calculates a curved path around the defining points, whereas a straight path just goes straight from one point to another). This function can be used to find out whether the given path is smooth (true) or not (false).",
          "syntax": "path_get_kind(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_length",
      "type": "key",
      "topics": [
        {
          "name": "path_get_length",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_length.htm",
          "blurb": "You can use this function to get the exact length of a path in pixels. this is not an approximate length from point to point, but rather an exact length along the shape of the path, even when the path is smooth with a high curved precision.",
          "syntax": "path_get_length(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_name",
      "type": "key",
      "topics": [
        {
          "name": "path_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_name.htm",
          "blurb": "This function will return the name of the path that is referenced as a string. The name is whatever has been used to define the path in the editor or (if the path has been created through a code function) it will return a string with the format \" _newpathXX\" where \"XX\" is the number of the path generated, starting at 0 and incrementing by one every time a new path is created. Please note that this is only a\nstring and cannot be used to reference the path directly - for that you would need the path index ID. You can, however, use this string to get the path index ID using the returned string along\nwith the function asset_get_index().",
          "syntax": "path_get_name(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_number",
      "type": "key",
      "topics": [
        {
          "name": "path_get_number",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_number.htm",
          "blurb": "This function can be used to return the number of points on a path.",
          "syntax": "path_get_number(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_point_speed",
      "type": "key",
      "topics": [
        {
          "name": "path_get_point_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_point_speed.htm",
          "blurb": "With this function you can get the speed of the point (as defined in the Path Editor or when you dynamically add a path point using path_add_point()) expressed as a percentage. So, if you have a path point set to 50 in the path editor, this function would return 50 when used.",
          "syntax": "path_get_point_speed(index, n)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_point_x",
      "type": "key",
      "topics": [
        {
          "name": "path_get_point_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_point_x.htm",
          "blurb": "This function will return the x position (in room coordinates) of the point that you input for the path that you index. If the point is outside of the range of the path (ie: a path has 8 points and you ask for the x position of point 10) then a value of 0 will be returned.",
          "syntax": "path_get_point_x(index, n)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_point_y",
      "type": "key",
      "topics": [
        {
          "name": "path_get_point_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_point_y.htm",
          "blurb": "This function will return the y position (in room coordinates) of the point that you input for the path that you index. If the point is outside of the range of the path (ie: a path has 8 points and you ask for the y position of point 10) then a value of 0 will be returned.",
          "syntax": "path_get_point_y(index, n)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_precision",
      "type": "key",
      "topics": [
        {
          "name": "path_get_precision",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_precision.htm",
          "blurb": "This function returns with what precision the given path has been \"smoothed\", and will be an integer value from 1 to 8. Although you can get (and set) this value for a straight-line path it will have no influence over how an instance uses the path as it is only relevant when the path kind is set to \"smooth\".",
          "syntax": "path_get_precision(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_speed",
      "type": "key",
      "topics": [
        {
          "name": "path_get_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_speed.htm",
          "blurb": "This function returns the speed factor of any given position on a path. The position should be a value between 0 and 1 (you can use path_position, for example, if you need the current position of the instance) with 0 being the start position and 1 being the end. The value returned will be the factor by which the actual path_speed is being set. For example, on a path with only two points, 0 and 1, where the point 0 speed factor is 100 and point 1 speed factor is 0, the function path_get_speed(path, 0.5) will return 50.",
          "syntax": "path_get_speed(ind, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_x",
      "type": "key",
      "topics": [
        {
          "name": "path_get_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_x.htm",
          "blurb": "With this function you can get the x coordinate of a position on any given path. 0 is the start of the path, 1 is the end of the path, and anything in between equates to that far through the path. This needn't be a defining point of the path, it can be anywhere on it.",
          "syntax": "path_get_x(ind, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_get_y",
      "type": "key",
      "topics": [
        {
          "name": "path_get_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_y.htm",
          "blurb": "With this function you can get the y coordinate of a position on any given path. 0 is the start of the path, 1 is the end of the path, and anything in between equates to the normalised distance along the length of the path. This value needn't be a defining point of the path, it can be anywhere on it.",
          "syntax": "path_get_y(ind, pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_index",
      "type": "key",
      "topics": [
        {
          "name": "path_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm",
          "blurb": "All resources in GameMaker have a unique identifying number, and the path_index is a read-only variable that holds the index value for a given path asset that has been assigned to an instance using the path_start() function. If the instance has no path assigned, the variable will be set to -1.",
          "syntax": "path_index"
        }
      ],
      "keys": []
    },
    {
      "name": "path_insert_point",
      "type": "key",
      "topics": [
        {
          "name": "path_insert_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_insert_point.htm",
          "blurb": "With this function you can insert a new point into a path (the path can have been created in the path editor or through code using path_add()). The point will be added into the path before the point \"n\" that is specified in the function.",
          "syntax": "path_insert_point(index, n, x, y, speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_mirror",
      "type": "key",
      "topics": [
        {
          "name": "path_mirror",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_mirror.htm",
          "blurb": "This function takes all the path points and mirrors them along the vertical axis. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the\nduplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_mirror(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_orientation",
      "type": "key",
      "topics": [
        {
          "name": "path_orientation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_orientation.htm",
          "blurb": "This variable holds the current orientation of the path that has been assigned to the instance when the function path_start() was called. When a path is created, its orientation is the default 0 degrees, but you can set this value to anything you wish using this. Remember that in GameMaker (unless you are using physics) the angles are calculated counter-clockwise, so setting the path orientation\nto 90° would rotate the path to the left.",
          "syntax": "path_orientation"
        }
      ],
      "keys": []
    },
    {
      "name": "path_position",
      "type": "key",
      "topics": [
        {
          "name": "path_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_position.htm",
          "blurb": "This function can be used to get or to set the position of an instance along a path. The value is normalised from 0 - 1, so if you set it to, for example, 0.5, the instance will be moved to exactly the middle of the path.",
          "syntax": "path_position"
        }
      ],
      "keys": []
    },
    {
      "name": "path_positionprevious",
      "type": "key",
      "topics": [
        {
          "name": "path_positionprevious",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_positionprevious.htm",
          "blurb": "This variable can be used to get or to set the position of an instance along its current path in the previous step, and is a normalised value between 0 and 1 ie: 0 is the start position of the path and 1 would be the end position. It is similar to the xprevious and yprevious variables in how it works, only it is specific for paths. It can be useful for things like temporarily stopping a path follower if something is in the way (see the example code below).",
          "syntax": "path_positionprevious"
        }
      ],
      "keys": []
    },
    {
      "name": "path_rescale",
      "type": "key",
      "topics": [
        {
          "name": "path_rescale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_rescale.htm",
          "blurb": "This function can be used to re-scale the given path along both (or either) the vertical and horizontal axis, basically moving each of the path points to a new position corresponding to this scale around the centre of the path. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_rescale(index, xscale, yscale)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_reverse",
      "type": "key",
      "topics": [
        {
          "name": "path_reverse",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_reverse.htm",
          "blurb": "With this function you can reverse the order in which the individual path points are numbered, so, for example, if the path has 5 points, point 0 would become point 4, point 1 would be point 3 and point 2 would not be changed. The actual position of the points remains the same, only the order in which they are processed is changed. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the\nfunction is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function\non the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_reverse(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_rotate",
      "type": "key",
      "topics": [
        {
          "name": "path_rotate",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_rotate.htm",
          "blurb": "You can use this function to rotate a given path around its center. Remember that in GameMaker (unless you are using physics) the angles are calculated counter-clockwise, so rotating the path by 90 degrees would rotate the path to the left. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_rotate(index, angle)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_scale",
      "type": "key",
      "topics": [
        {
          "name": "path_scale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_scale.htm",
          "blurb": "This value can be used to get or to set the scale of the currently assigned path for the instance (as set by the function path_start()) with a default value of 1. This is a scalar value, so 1 is a scale of 1:1, while setting it to 2, for example, will be double the scale and setting it to 0.5 would be halving the scale.",
          "syntax": "path_scale"
        }
      ],
      "keys": []
    },
    {
      "name": "path_set_closed",
      "type": "key",
      "topics": [
        {
          "name": "path_set_closed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_set_closed.htm",
          "blurb": "This function can be used to flag a given path as being open (false) or closed (true). A closed path has its start point connected to its end point, forming a loop, and an open path has a definitive, unconnected start and finish. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_set_closed(index, closed)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_set_kind",
      "type": "key",
      "topics": [
        {
          "name": "path_set_kind",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_set_kind.htm",
          "blurb": "This function can be used to set the kind of path that you wish the specified resource to be. This can be either a straight line path (set to 0) or a smoothed path (set to 1) in which case the path precision has to be taken into account too (the precision can be set too using path_set_precision()). This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment\nthe function is used until the end of the game.If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function\non the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_set_kind(index, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_set_precision",
      "type": "key",
      "topics": [
        {
          "name": "path_set_precision",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_set_precision.htm",
          "blurb": "With this function you can change the \"smoothness\" of a path. This value must be between 1 and 8, with a low value creating straighter edges with sharper curves between points, while a higher value will round the points and make the path a lot more \"curvy\". Note that this function will have no visible effect if the path has not been set to smooth in the path editor or using the function path_set_kind(). This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).",
          "syntax": "path_set_precision(index, prec)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_shift",
      "type": "key",
      "topics": [
        {
          "name": "path_shift",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_shift.htm",
          "blurb": "With this function you can shift a path along the horizontal and vertical axis. Please note that this will have no visible effect in-game if the instance following the path being shifted follows it relatively (rather than absolutely) as the path's position is disregarded then. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is\nnot what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call\npath_delete() on the asset when it is no longer required).",
          "syntax": "path_shift(index, xshift, yshift)"
        }
      ],
      "keys": []
    },
    {
      "name": "path_speed",
      "type": "key",
      "topics": [
        {
          "name": "path_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_speed.htm",
          "blurb": "You can use this function to get or to set the speed of a path after it has been started using the function path_start(). You can use negative values to signify that the instance should follow the path in reverse.",
          "syntax": "path_speed"
        }
      ],
      "keys": []
    },
    {
      "name": "path_start",
      "type": "key",
      "topics": [
        {
          "name": "path_start",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm",
          "blurb": "A path is created from a series of defining points that are linked together and then used to plan the movements of an instance. They can be created with code, or in the Path Editor and they are assigned to an instance to use in the game. You would then use this function to tell your instance which path to follow, what speed to follow the path (measured in pixels per step), how to behave when it reaches the end of the path, and whether to follow the absolute or relative path position. This last part means that it either starts and follows the path exactly as you designed and placed it in the Path Editor (absolute), or it starts and follows the path from the position at which the instance was created (relative).",
          "syntax": "path_start(path, speed, endaction, absolute)"
        }
      ],
      "keys": []
    },
    {
      "name": "persistent",
      "type": "key",
      "topics": [
        {
          "name": "persistent",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/persistent.htm",
          "blurb": "This variable can be read to find out if the instance is flagged as persistent or not, or it can used to set persistence to true (persistent) or false (not persistent) for the instance. A persistent instance is one that will be \"carried over\" from room to room, meaning (for example) that it only has to be created once at the start of the game and it will be present in all further rooms. Care should be taken with persistence as it is easy to lose track of persistent instances which can lead to problems later in the development of the game.",
          "syntax": "persistent"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_active",
      "type": "key",
      "topics": [
        {
          "name": "phy_active",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_active.htm",
          "blurb": "This variable controls whether or not the instance is currently \"active\". Setting it to false will prevent the instance from participating in the physics world, and setting it to true will have it participating again. Please note that this is not the same as deactivating the instance, as the instance is still visible on the screen and can still be changed through code, rather this function just prevents it from participating in the physics simulation",
          "syntax": "phy_active"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_angular_damping",
      "type": "key",
      "topics": [
        {
          "name": "phy_angular_damping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_angular_damping.htm",
          "blurb": "This variable can be used to set the angular damping of the instance, or it can be used to get the current angular damping. The damping is the amount of \"resistance\" to angular rotation that the physics enabled instance has, with a lower value permitting the instance to rotate faster after a collision (for example) and a higher value making it require a more forceful push and rotate slower",
          "syntax": "phy_angular_damping"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_angular_velocity",
      "type": "key",
      "topics": [
        {
          "name": "phy_angular_velocity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_angular_velocity.htm",
          "blurb": "This variable can be used to set the angular velocity of the instance, or it can be used to get the current angular velocity, in degrees per second and the value used can be either positive (for clockwise rotation) or negative (for anticlockwise rotation). If you set this on an instance that was previously static (ie: it has a density of 0) it will become a kinematic object and begin rotating",
          "syntax": "phy_angular_velocity"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_bullet",
      "type": "key",
      "topics": [
        {
          "name": "phy_bullet",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_bullet.htm",
          "blurb": "This variable defines whether or not the instance is extremely fast moving (for example a bullet). The default value is false but if set to true this tells GameMaker that the instance will be moving at such high speeds that it will require more expensive collision detection to ensure it doesn't pass through other instances undetected",
          "syntax": "phy_bullet"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_col_normal_x",
      "type": "key",
      "topics": [
        {
          "name": "phy_col_normal_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_col_normal_x.htm",
          "blurb": "This read-only variable returns the x component of the collision normal corresponding to the phy_collision_x array value. For each contact point there is an associated contact normal (which is usually the same normal for all points of contact in the collision). This contact normal is a unit vector that points from one instance in the collision to another, and can be used, for example, to calculate the correct \"push\" direction to resolve collisions",
          "syntax": "phy_col_normal_x"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_col_normal_y",
      "type": "key",
      "topics": [
        {
          "name": "phy_col_normal_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_col_normal_y.htm",
          "blurb": "This read-only variable returns the y component of the collision normal corresponding to the phy_collision_y array value. For each contact point there is an associated contact normal (which is usually the same normal for all points of contact in the collision). This contact normal is a unit vector that points from one instance in the collision to another, and can be used, for example, to calculate the correct \"push\" direction to resolve collisions",
          "syntax": "phy_col_normal_y"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_collision_points",
      "type": "key",
      "topics": [
        {
          "name": "phy_collision_points",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_collision_points.htm",
          "blurb": "This read-only variable returns the number of points of collision detected between the two objects in the collision",
          "syntax": "phy_collision_points"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_collision_x",
      "type": "key",
      "topics": [
        {
          "name": "phy_collision_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_collision_x.htm",
          "blurb": "This read-only array returns the x position of all points detected in a collision between two physics enabled instances.",
          "syntax": "phy_collision_x"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_collision_y",
      "type": "key",
      "topics": [
        {
          "name": "phy_collision_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_collision_y.htm",
          "blurb": "This read-only array returns the y position of all points detected in a collision between two physics enabled instances.",
          "syntax": "phy_collision_y"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_com_x",
      "type": "key",
      "topics": [
        {
          "name": "phy_com_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_com_x.htm",
          "blurb": "This read-only variable will return the x position of the instance's center of mass. This is calculated automatically based on the density, inertia and mass of the instance as defined by the appropriate functions",
          "syntax": "phy_com_x"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_com_y",
      "type": "key",
      "topics": [
        {
          "name": "phy_com_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_com_y.htm",
          "blurb": "This read-only variable will return the y position of the instance's center of mass. This is calculated automatically based on the density, inertia and mass of the instance as defined by the appropriate functions",
          "syntax": "phy_com_y"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_debug_render_aabb",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm",
          "blurb": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
          "syntax": "physics_world_draw_debug(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_debug_render_collision_pairs",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm",
          "blurb": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
          "syntax": "physics_world_draw_debug(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_debug_render_coms",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm",
          "blurb": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
          "syntax": "physics_world_draw_debug(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_debug_render_core_shapes",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm",
          "blurb": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
          "syntax": "physics_world_draw_debug(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_debug_render_joints",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm",
          "blurb": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
          "syntax": "physics_world_draw_debug(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_debug_render_obb",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm",
          "blurb": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
          "syntax": "physics_world_draw_debug(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_debug_render_shapes",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm",
          "blurb": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
          "syntax": "physics_world_draw_debug(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_dynamic",
      "type": "key",
      "topics": [
        {
          "name": "phy_dynamic",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_dynamic.htm",
          "blurb": "A dynamic instance is one that is fully simulated within the physics world and this read-only variable will return true if the instance being checked is fully simulated or false if it is not",
          "syntax": "phy_dynamic"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_fixed_rotation",
      "type": "key",
      "topics": [
        {
          "name": "phy_fixed_rotation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_fixed_rotation.htm",
          "blurb": "This variable can be used to set whether or not the instance can be affected by rotational forces (default is false). If this is set to true, no external force (either from coded impulses or forces, or from collisions) will affect the rotation value of the instance and this would have to be set manually using the phy_rotation variable",
          "syntax": "phy_fixed_rotation"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_inertia",
      "type": "key",
      "topics": [
        {
          "name": "phy_inertia",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_inertia.htm",
          "blurb": "Inertia is the measure of how hard it is to make something start or stop moving, so the lower the value for this read-only variable and the easier it will be to set the instance in motion, while higher values will require more force to start it moving",
          "syntax": "phy_inertia"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_anchor_1_x",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_anchor_1_y",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_anchor_2_x",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_anchor_2_y",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_angle",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_angle_limits",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_damping_ratio",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_frequency",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_length_1",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_length_2",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_lower_angle_limit",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_max_force",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_max_length",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_max_motor_force",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_max_motor_torque",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_max_torque",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_motor_force",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_motor_speed",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_motor_torque",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_reaction_force_x",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_reaction_force_y",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_reaction_torque",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_speed",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_translation",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_joint_upper_angle_limit",
      "type": "key",
      "topics": [
        {
          "name": "Physics Joint Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
          "blurb": "There are a great number of constants included within the GameMaker GML that are specific to joints between fixtures in the physics world. These can be used in conjunction with many of the different joint functions to set or get information from them in real time while the physics simulation is running. You should be aware, however, that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint. Also note that while you can get all these values with the appropriate function, you can only set those that are marked as not being read-only."
        }
      ],
      "keys": []
    },
    {
      "name": "phy_kinematic",
      "type": "key",
      "topics": [
        {
          "name": "phy_kinematic",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_kinematic.htm",
          "blurb": "This read-only variable will return true if the instance is classed as being a kinematic object, or false if it is not. A kinematic instance is one that has infinite mass (a density of 0) but can move. So, to make an instance kinematic, you would first create a static instance and then set one or more of the instance variables related to movement (ie: phy_speed_x, phy_speed_y, or phy_angular_velocity)",
          "syntax": "phy_kinematic"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_linear_damping",
      "type": "key",
      "topics": [
        {
          "name": "phy_linear_damping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_linear_damping.htm",
          "blurb": "This variable can be used to set the linear damping of the instance, or it can be used to get the current linear damping. The damping is the amount of \"resistance\" to forward movement that the physics enabled instance has, with a lower value permitting the instance to move and accelerate faster and a higher value making it require a more forceful push",
          "syntax": "phy_linear_damping"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_linear_velocity_x",
      "type": "key",
      "topics": [
        {
          "name": "phy_linear_velocity_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_linear_velocity_x.htm",
          "blurb": "This variable can be used to get or change the x component of the instance's linear velocity vector and is defined in pixels per second (for pixels per step, see phy_speed_x). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance",
          "syntax": "phy_linear_velocity_x"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_linear_velocity_y",
      "type": "key",
      "topics": [
        {
          "name": "phy_linear_velocity_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_linear_velocity_y.htm",
          "blurb": "This variable can be used to get or change the y component of the instance's linear velocity vector and is defined in pixels per second (for pixels per step, see phy_speed_y). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance",
          "syntax": "phy_linear_velocity_y"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_mass",
      "type": "key",
      "topics": [
        {
          "name": "phy_mass",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_mass.htm",
          "blurb": "This read-only variable returns the mass of the instance in kilograms. This value is calculated automatically based on the surface area of the assigned fixtures and their density values, but it can be changed using the function physics_mass_properties().",
          "syntax": "phy_mass"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_data_flag_category",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data.htm",
          "blurb": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function buffer_create(), and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data(buffer, flags)"
        },
        {
          "name": "physics_particle_get_data_particle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
          "blurb": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics_particle_create(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data_particle(ind, buffer, flags)"
        },
        {
          "name": "physics_particle_group_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_data.htm",
          "blurb": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics_particle_group_end(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_group_get_data(group, buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_data_flag_color",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data.htm",
          "blurb": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function buffer_create(), and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data(buffer, flags)"
        },
        {
          "name": "physics_particle_get_data_particle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
          "blurb": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics_particle_create(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data_particle(ind, buffer, flags)"
        },
        {
          "name": "physics_particle_group_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_data.htm",
          "blurb": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics_particle_group_end(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_group_get_data(group, buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_data_flag_colour",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data.htm",
          "blurb": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function buffer_create(), and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data(buffer, flags)"
        },
        {
          "name": "physics_particle_get_data_particle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
          "blurb": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics_particle_create(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data_particle(ind, buffer, flags)"
        },
        {
          "name": "physics_particle_group_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_data.htm",
          "blurb": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics_particle_group_end(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_group_get_data(group, buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_data_flag_position",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data.htm",
          "blurb": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function buffer_create(), and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data(buffer, flags)"
        },
        {
          "name": "physics_particle_get_data_particle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
          "blurb": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics_particle_create(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data_particle(ind, buffer, flags)"
        },
        {
          "name": "physics_particle_group_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_data.htm",
          "blurb": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics_particle_group_end(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_group_get_data(group, buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_data_flag_typeflags",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data.htm",
          "blurb": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function buffer_create(), and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data(buffer, flags)"
        },
        {
          "name": "physics_particle_get_data_particle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
          "blurb": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics_particle_create(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data_particle(ind, buffer, flags)"
        },
        {
          "name": "physics_particle_group_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_data.htm",
          "blurb": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics_particle_group_end(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_group_get_data(group, buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_data_flag_velocity",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data.htm",
          "blurb": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function buffer_create(), and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data(buffer, flags)"
        },
        {
          "name": "physics_particle_get_data_particle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
          "blurb": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics_particle_create(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data_particle(ind, buffer, flags)"
        },
        {
          "name": "physics_particle_group_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_data.htm",
          "blurb": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics_particle_group_end(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_group_get_data(group, buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_colormixing",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_colourmixing",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_elastic",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_powder",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_spring",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_tensile",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_viscous",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_wall",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_water",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_flag_zombie",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        },
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        },
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_group_flag_rigid",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_begin.htm",
          "blurb": "With this function you can create a group of particles in a room. A group of particles is one where the particles necessary to create a specific form are created all at once as a group, permitting you to create simulated soft-bodies with various properties set by the flags used. The \"flags\" are the return value of a combination of the particle constants (see the function physics_particle_create() for details of these), while the \"groupFlags\" are a combination of the following group constants (or 0 for no flags):",
          "syntax": "physics_particle_group_begin(flags, groupflags, x, y, ang, xv, yv, ang_velocity, col, alpha, strength, category)"
        },
        {
          "name": "physics_particle_set_group_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_group_flags.htm",
          "blurb": "With this function you can change the group flags for a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_group_flags(group, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_particle_group_flag_solid",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_begin.htm",
          "blurb": "With this function you can create a group of particles in a room. A group of particles is one where the particles necessary to create a specific form are created all at once as a group, permitting you to create simulated soft-bodies with various properties set by the flags used. The \"flags\" are the return value of a combination of the particle constants (see the function physics_particle_create() for details of these), while the \"groupFlags\" are a combination of the following group constants (or 0 for no flags):",
          "syntax": "physics_particle_group_begin(flags, groupflags, x, y, ang, xv, yv, ang_velocity, col, alpha, strength, category)"
        },
        {
          "name": "physics_particle_set_group_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_group_flags.htm",
          "blurb": "With this function you can change the group flags for a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_group_flags(group, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_position_x",
      "type": "key",
      "topics": [
        {
          "name": "phy_position_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_x.htm",
          "blurb": "This variable can be used to get (or to set) the x position of the instance within the game room physics world. Please note that the physics world may present errors when instances are moved by directly setting this variable as it will interrupt the continuous simulation. This variable is the physics equivalent of the instance variable x.",
          "syntax": "phy_position_x"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_position_xprevious",
      "type": "key",
      "topics": [
        {
          "name": "phy_position_xprevious",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_xprevious.htm",
          "blurb": "This variable can be used to get (or to set) the previous x position of the instance within the game room physics world. This is the position of the instance within the physics world in the previous step to the current one.",
          "syntax": "phy_position_xprevious"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_position_y",
      "type": "key",
      "topics": [
        {
          "name": "phy_position_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_y.htm",
          "blurb": "This variable can be used to get (or to set) the y position of the instance within the game room physics world. Please note that the physics world may present errors when instances are moved by directly setting this variable as it will interrupt the continuous simulation. This variable is the physics equivalent of the instance variable y.",
          "syntax": "phy_position_y"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_position_yprevious",
      "type": "key",
      "topics": [
        {
          "name": "phy_position_yprevious",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_yprevious.htm",
          "blurb": "This variable can be used to get (or to set) the previous y position of the instance within the game room physics world. This is the position of the instance within the physics world in the previous step to the current one",
          "syntax": "phy_position_yprevious"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_rotation",
      "type": "key",
      "topics": [
        {
          "name": "phy_rotation",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_rotation.htm",
          "blurb": "This variable can be used to get (or to set) the angle of the instances fixture in degrees, similar to setting or getting the image_angle. However note that in the physics world rotations are calculated in the opposite way to the normal GameMaker game world, meaning that vector functions like point_direction()should have their return values modified (simply making positive to negative should resolve this).",
          "syntax": "phy_rotation"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_sleeping",
      "type": "key",
      "topics": [
        {
          "name": "phy_sleeping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_sleeping.htm",
          "blurb": "This read-only variable returns whether or not the instance is currently \"sleeping\" (true) or not (false), A \"sleeping\" instance is one that is not actively engaged in any physical simulation. GameMaker will put objects to sleep to save simulation cycles when an instance is at rest and not in collision with another instance",
          "syntax": "phy_sleeping"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_speed",
      "type": "key",
      "topics": [
        {
          "name": "phy_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_speed.htm",
          "blurb": "This read-only variable returns the current speed of the physics enabled instance, defined in pixels per step. Should you need to change this value, you must do so by changing the x and y vectors using the variables phy_speed_x and phy_speed_y.",
          "syntax": "phy_speed"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_speed_x",
      "type": "key",
      "topics": [
        {
          "name": "phy_speed_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_speed_x.htm",
          "blurb": "This variable can be used to get or change the x component of the instance's linear speed vector and is defined in pixels per step (for pixels per second, see phy_linear_velocity_x). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.",
          "syntax": "phy_speed_x"
        }
      ],
      "keys": []
    },
    {
      "name": "phy_speed_y",
      "type": "key",
      "topics": [
        {
          "name": "phy_speed_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_speed_y.htm",
          "blurb": "This variable can be used to get or change the y component of the instance's linear speed vector and is defined in pixels per step (for pixels per second, see phy_linear_velocity_y). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.",
          "syntax": "phy_speed_y"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_apply_angular_impulse",
      "type": "key",
      "topics": [
        {
          "name": "physics_apply_angular_impulse",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_angular_impulse.htm",
          "blurb": "This function will give an angular impulse to a physics enabled instance. This impulse will set the angular rotation by the amount given, ignoring the current torque, essentially setting the amount of \"spin\" that a fixture has. If you wish to apply an angular force to an instance using torque, then you should be using the function physics_apply_torque().",
          "syntax": "physics_apply_angular_impulse(impulse)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_apply_force",
      "type": "key",
      "topics": [
        {
          "name": "physics_apply_force",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_force.htm",
          "blurb": "When working with physics you need to apply not only gravity to objects, but forces as well. A force is any influence that causes an object to undergo a change in speed, a change in direction, or a change in shape, and is defined in the GameMaker physics world the same as we define gravity, by getting the vector from the two xforce/yforce components. It should be noted that forces are not applied to the center of mass of the object, but rather at a point in the room and they will change the direction and speed as well as the torque (spin) dependant on any other forces that are working on the object (like gravity). Here is an example image to help illustrate:",
          "syntax": "physics_apply_force(xpos, ypos, xforce, yforce)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_apply_impulse",
      "type": "key",
      "topics": [
        {
          "name": "physics_apply_impulse",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_impulse.htm",
          "blurb": "Not only can you apply force and gravity to an object with the physics in GameMaker but you can also apply an impulse. This is slightly different to a force in that when it is applied it will immediately affect the speed, and, potentially the torque (or \"spin\") of the object, particularly if the point chosen to apply the impulse is not aligned with the center of mass (note: the center of mass is not necessarily the same as the origin!). Here is an illustration:",
          "syntax": "physics_apply_impulse(xpos, ypos, ximpulse, yimpulse)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_apply_local_force",
      "type": "key",
      "topics": [
        {
          "name": "physics_apply_local_force",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_local_force.htm",
          "blurb": "Another way to use force in the physics world is to apply it locally to an instance. What this means is that the strength and direction of the force are calculated based on the origin (or the position if it has no sprite) of the instance, without taking into consideration the direction or rotation it may have in the game room or physics world. It should be noted that with this function, forces are not applied to the center of mass of the object, but rather at a point relative to the instance and they will not be instantly applied as they are dependent on any other forces that are working on the object (like gravity). This illustration demonstrates how a local force works:",
          "syntax": "physics_apply_local_force(xlocal, ylocal, xforce, yforce)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_apply_local_impulse",
      "type": "key",
      "topics": [
        {
          "name": "physics_apply_local_impulse",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_local_impulse.htm",
          "blurb": "Not only can you apply force and gravity to an object with the physics in GameMaker but you can also apply an impulse. This is slightly different to a force in that when it is applied it will immediately affect the speed, and, potentially the torque (or \"spin\") of the object, particularly if the point chosen to apply the impulse has a vector that is not aligned with the centre of mass (note: the center of mass is not necessarily the same as the origin!). This function applies an impulse locally to an instance. What this means is that the strength and direction of the impulse are calculated based on the origin (or the position if it has no sprite) of the instance, without taking into consideration the direction or rotation it may have in the game room or physics world. Here is an illustration:",
          "syntax": "physics_apply_local_impulse(xpos, ypos, ximpulse, yimpulse)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_apply_torque",
      "type": "key",
      "topics": [
        {
          "name": "physics_apply_torque",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_torque.htm",
          "blurb": "When we talk about torque, we are generally talking about the tendency of a force or impulse to rotate an instance about its centre of mass, but in GameMaker you can also apply torque independently to an instance, causing it to rotate in a given direction. How much torque you apply to get the desired rotation all depends on the size and density of the fixture you assign to your instance, as both these properties go towards defining its mass, which defines its inertia, which affects torque! The general rule of thumb is that if an instance has a lot of inertia, you will need a lot of torque to get it to start rotating. It should also be noted that other factors like gravity and collisions can also affect the torque of an instance. Here is an image to help explain:",
          "syntax": "physics_apply_torque(torque)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_draw_debug",
      "type": "key",
      "topics": [
        {
          "name": "physics_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_draw_debug.htm",
          "blurb": "When creating a physics system in GameMaker, it is often important to have a visual representation of what is actually happening with an instance. This can be achieved by using physics_draw_debug(), which draws a schematic outline of the physical properties associated with the instance running the code. Here is an image of how it looks:",
          "syntax": "physics_draw_debug()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_add_point",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_add_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_add_point.htm",
          "blurb": "This function defines the points of a polygon which has previously been set to the fixture using either physics_fixture_set_polygon_shape() or it can be used to add points to a chain of edge fixtures using the function physics_fixture_set_chain_shape(). For a polygon shape, the points are relative to the origin of the fixture, with the 0,0 position of the x/y axis being the centre,\nand the subsequent coordinates being calculated as usual in GameMaker with down/right being +x,+y and up/left being -x,-y. Here is an illustration to help you visualise this process:",
          "syntax": "physics_fixture_add_point(fixture, xpos, ypos)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_bind",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_bind",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_bind.htm",
          "blurb": "Once we have defined our fixture it has to be bound to an instance. This means that its properties are transferred to the selected instance, not the actual fixture itself, so that one fixture can be bound to multiple instances if all are to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special keywords other and all. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer necessary and the instances with that fixtures properties will not be affected and maintain those properties.",
          "syntax": "physics_fixture_bind(fixture, target)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_bind_ext",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_bind_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_bind_ext.htm",
          "blurb": "Once we have defined our fixture it has to be bound to an instance. This means that its properties are transferred to the selected instance, not the actual fixture itself, so that one fixture can be bound to multiple instances if all are to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special keywords other and all. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer necessary and the instances with that fixtures properties will not be affected and maintain those properties.",
          "syntax": "physics_fixture_bind_ext(fixture, target, xoffset, yoffset)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_create.htm",
          "blurb": "The first step in setting up a fixture is creating it with this function. The returning index should be stored in a variable to be used in all further functions that are used to define and use this fixture.",
          "syntax": "physics_fixture_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_delete",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_delete.htm",
          "blurb": "Since once a fixture has been bound to an instance that instance maintains the fixtures properties, we can remove the fixture from memory with this function, particularly if we no longer plan to use it again. Please note that failure to remove fixtures after they are no longer needed may cause a memory leak which will slow down and eventually crash your game, so you should take care to clean up properly after defining and binding fixtures.",
          "syntax": "physics_fixture_delete(fixture)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_angular_damping",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_angular_damping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_angular_damping.htm",
          "blurb": "If you think about any rotating object in the \"real world\", unless it has a motor or is in space, it slows down over time due to the influence of external forces (like friction with the air around it). We can use the function physics_fixture_set_angular_damping() in GameMaker to simulate this effect and reduce the velocity of rotation of instances in the physics world, as, without it, any rotating instance would continue to rotate infinitely. Damping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 1, but you can use any non-negative value if required.",
          "syntax": "physics_fixture_set_angular_damping(fixture, damping)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_awake",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_awake",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_awake.htm",
          "blurb": "When you start a room with physics, or bind fixtures to instances, the fixtures are always considered to be \"awake\"... that is to say, they are processing events and interacting with the surrounding instances. However this can sometimes lead to problems, especially if you have a number of instances with fixtures that are side by side when a room starts (think of a tower made of various instances with fixtures) as with them being \"awake\" they will move and possibly change position\ndue to the sudden start of gravity and collisions affecting them. In these cases you can use this function to flag the fixture as been \"asleep\", in which case it will not be processing anything when it is first created in the room.",
          "syntax": "physics_fixture_set_awake(fixture, state)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_box_shape",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_box_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_box_shape.htm",
          "blurb": "This function defines a box shape for your fixture. It takes the half width and height as the physics world uses this value far more than whole width/height values to determine things like collisions.",
          "syntax": "physics_fixture_set_box_shape(fixture, halfWidth, halfHeight)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_chain_shape",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_chain_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_chain_shape.htm",
          "blurb": "This function defines a \"chain\" fixture shape. A chain fixture is comprised of a number of points, which are then connected together using edge shapes to join them. The function itself takes the index (ID) of the fixture and can tell the fixture to loop or not. Setting this to true will connect the last point to the first point with an edge, while setting it to false will not. Note that this function on prepares the fixture to accept the points required to make the chain, and these should be added after calling this function using physics_fixture_add_point(), much as you would when building a polygon fixture.",
          "syntax": "physics_fixture_set_chain_shape(fixture, loop)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_circle_shape",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_circle_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_circle_shape.htm",
          "blurb": "This function defines a circle shape for your fixture with a radius defined by the argument \"rad\".",
          "syntax": "physics_fixture_set_circle_shape(fixture, rad)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_collision_group",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_collision_group",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_collision_group.htm",
          "blurb": "Once you have created your fixture you can define it as being part of a collision group. This means that you can tell instances with that fixture to always collide or never collide with other instance that have fixtures bound to them with the same collision group. The values that can be assigned are based on positive or negative numbers, with 0 being the default value (meaning that the instance with this fixture setting is ignored unless a collision event is created for it). Here is an image to help explain:",
          "syntax": "physics_fixture_set_collision_group(fixture, group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_density",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_density",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_density.htm",
          "blurb": "The density of something is defined as its mass per unit volume, which basically means how much mass is crammed into the space it takes up in the world. So, a balloon would have a low density as it has little mass that occupies a large space, while a lead bar would have a high density as it has a great mass, yet occupies little space.",
          "syntax": "physics_fixture_set_density(fixture, density)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_edge_shape",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_edge_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_edge_shape.htm",
          "blurb": "This function defines an \"edge\" fixture shape. An edge shape is simply a line that will generate a collision when other fixtures over lap it, and can be very useful for generating (for example) terrain, or for creating borders around a room. The position of the edge is defined using local space, ie: the x/y position of the instance is considered (0,0), so this should be taken into consideration when creating them (in the code example below, the instance would have been placed at (0,0) in the room to avoid complications).",
          "syntax": "physics_fixture_set_edge_shape(fixture, local_x1, local_y1, local_x2, local_y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_friction",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_friction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_friction.htm",
          "blurb": "Friction is the force that resists the relative motion of material elements sliding against each other, which in the GameMaker physics world, translates as the loss of momentum caused by the collision of two instances with fixtures bound to them. So, when two instances collide, their motion is affected by this value, with a high friction causing a larger loss of momentum than a lower value. Note that the friction is usually set to a value between 0 and 1, but you can use any non-negative\nvalue if required.",
          "syntax": "physics_fixture_set_friction(fixture, friction)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_kinematic",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_kinematic",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_kinematic.htm",
          "blurb": "There will be certain instances in a physics based game which you want to move around but do not wish to be acted on by forces such as gravity, nor forces incurred by collisions with dynamic objects (think of moving platforms in a platform game, for example). For such objects simply setting the density of a fixture to 0 will mean that the physics will assume that the object is intended to be static. However, should you set the phy_speed_x,\nphy_speed_y or phy_angular_velocity variables for an instance that has had such a fixture bound to it, it will be converted\ninto a kinematic object and begin movement. Change the instance from static to kinematic mid-simulation can be expensive in terms of processing (depending on the state of the instances in the physics world) and therefore it is recommended to set the\nfixture to be kinematic using this function prior to binding it to an instance, so that it will be unaffected by collisions and forces (such as gravity) but may move with constant linear and/or angular velocity.",
          "syntax": "physics_fixture_set_kinematic(fixture)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_linear_damping",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_linear_damping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_linear_damping.htm",
          "blurb": "Damping is used to reduce the physics world velocity of instances, and differs from friction in that friction only occurs when two instances with fixtures are in contact. Damping is also much cheaper to simulate than friction, but please note that damping is not a replacement for friction; the two effects can, and should, be used together. Here is an image to illustrate damping:",
          "syntax": "physics_fixture_set_linear_damping(fixture, damping)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_polygon_shape",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_polygon_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_polygon_shape.htm",
          "blurb": "This function sets a polygon shape for your fixture, but you will need to use physics_fixture_add_point() to actually define the shape of this polygon relative to the origin of the fixture. The polygon is closed when the fixture is bound to an instance. You should note too that this function must be called before defining any points, and you must also have at least three points defined for your polygon before binding it to an instance or\nyou will get an error.",
          "syntax": "physics_fixture_set_polygon_shape(fixture)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_restitution",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_restitution",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_restitution.htm",
          "blurb": "In physics, restitution is defined as \"the return of an object or system to its original state after elastic deformation\", but as the fixtures in the GameMaker are really rigid bodies and cannot be deformed, restitution is really a way of saying how \"bouncy\" the fixture is. This setting will affect how much an object \"bounces\" when it collides with other objects and is co-dependent on other forces that act on the instance like gravity and friction,\nand is usually a value between 0 and 1 (higher values can be used but may give unpredictable results). Here is an illustration of how it works:",
          "syntax": "physics_fixture_set_restitution(fixture, restitution)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_fixture_set_sensor",
      "type": "key",
      "topics": [
        {
          "name": "physics_fixture_set_sensor",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_sensor.htm",
          "blurb": "Some times you will want your game to detect and recognise when two instances with fixtures collide, but not have any physical reaction to the collision. This can be done by converting the fixture into a sensor, which basically means that they will generate a collision event but with no physical response so that you can use these instances as \"triggers\" for other events to happen in the game room. Any fixture can be flagged as a sensor, and it makes no difference if the instance it is bound to is static or in movement.",
          "syntax": "physics_fixture_set_sensor(fixture, state)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_get_density",
      "type": "key",
      "topics": [
        {
          "name": "physics_get_density",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_get_density.htm",
          "blurb": "When you bind a fixture to an instance using physics_fixture_bind() this returns an \"id\" for the bound fixture. You can use this id to get the density value of the bound fixture (not the \"base\" fixture) at any time using this function.",
          "syntax": "physics_get_density(fixture)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_get_friction",
      "type": "key",
      "topics": [
        {
          "name": "physics_get_friction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_get_friction.htm",
          "blurb": "When you bind a fixture to an instance using physics_fixture_bind() this returns an \"id\" for the bound fixture. You can use this id to get the friction value of the bound fixture (not the \"base\" fixture) at any time using this function.",
          "syntax": "physics_get_friction(fixture)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_get_restitution",
      "type": "key",
      "topics": [
        {
          "name": "physics_get_restitution",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_get_restitution.htm",
          "blurb": "When you bind a fixture to an instance using physics_fixture_bind() this returns an \"id\" for the bound fixture. You can use this id to get the restitution (the \"bounciness\" property) value of the bound fixture, not the \"base\" fixture, at any time using this function.",
          "syntax": "physics_get_restitution(fixture)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_delete",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_delete.htm",
          "blurb": "Once two instances with physics representations have been bound by a joint, this can be deleted again at any time. Normally this will happen automatically when one of the two instances is destroyed, or when the room ends, but there are times when you may wish to do this manually. In those cases you would use this function.",
          "syntax": "physics_joint_delete(joint)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_distance_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_distance_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_distance_create.htm",
          "blurb": "One of the simplest joint is a distance joint which says that the distance between two points on two instances must be constant. When you specify a distance joint the two instances should already be created and have a fixture assigned, then you define the two anchor points in room coordinates. The first anchor point is connected to instance 1, the second anchor point is connected to instance 2 and the distance between these points imply the length of the distance constrain. The image below shows how this works:",
          "syntax": "physics_joint_distance_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_enable_motor",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_enable_motor",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_enable_motor.htm",
          "blurb": "When you have a joint with a motor (prismatic or revolute), you may want to be able to switch the motor on or off depending on variables and conditions within the game. For this, you need to have stored the index of the joint previously in a variable and then you can switch the motor on or off by using this function and setting the \"motor\" argument to true or false.",
          "syntax": "physics_joint_enable_motor(joint, motor)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_friction_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_friction_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_friction_create.htm",
          "blurb": "The friction joint is a bit different to all other joints in the physics simulation in that the connection created will not constrain the instances position or movement, but rather its speed and rotation. This works by taking the maximum input values for force and torque and applying those to the second fixture to bring the speed and angular momentum down to the same values as that of the first instance. So, if you have a stationary instance and a moving instance then connect them with a friction joint, the moving instance will gradually slow down until it too is stationary. If both instances were moving then the second instance will have its movement speed modified to match that of the first instance.",
          "syntax": "physics_joint_friction_create(inst1, inst2, anchor_x, anchor_y, max_force, max_torque, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_gear_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_gear_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_gear_create.htm",
          "blurb": "If you want to create a sophisticated mechanical contraption you might want to use gears. In principle you can create gears in GameMaker by using compounding instances to model gear teeth, but this is not very efficient and might be tedious to author! Thankfully there is a simpler method, and that is to use a gear joint. To make one you need to have previously defined your fixtures and created the two basic joints that are going to comprise your gear - these must be made up of one revolute joint and either a prismatic joint or another revolute joint. The image below shows how a gear would typically be created in a game:",
          "syntax": "physics_joint_gear_create(inst1, inst2, joint_1, joint_2, ratio)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_get_value",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_get_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_get_value.htm",
          "blurb": "By using a series of predefined constants, you can ask GameMaker to tell you a number of things about the state of any given joint. This is very useful as it gives you the ability to delete joints or change an instances behaviour depending on whatever your needs are at the time. There are a number of constants that can be used in this function and they can be found here: Physics Joint Constants, but be aware that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint.",
          "syntax": "physics_joint_get_value(joint, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_prismatic_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_prismatic_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_prismatic_create.htm",
          "blurb": "Like a revolute joint, the prismatic joint only has one degree of freedom, but with this joint it is directional relative to an axis rather than rotational and actually prevents any form of rotation. Here is an image to help you visualise how this works:",
          "syntax": "physics_joint_prismatic_create(inst1, inst2, w_anchor_x, w_anchor_y, w_axis_x, w_axis_x, lower_trans_limit, upper_trans_limit, limit, max_motor_force, motor_speed, motor, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_pulley_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_pulley_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_pulley_create.htm",
          "blurb": "The pulley joint is used to connect two instances within the physics world in such a way that moving one will directly influence the movement of the other. These joints are first anchored in the world space at two points, each one connected to an instance at its center of mass. This can be changed by setting the local anchor x/y coordinates relative to the origin of the instance, meaning that the actual connection from the instance to the physics world anchor point can be offset somewhere other than its origin. The following image illustrates this:",
          "syntax": "physics_joint_pulley_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, l_anchor1_x, l_anchor1_y, l_anchor2_x, l_anchor2_y, ratio, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_revolute_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_revolute_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_revolute_create.htm",
          "blurb": "A revolute joint forces two bodies to share a common anchor point (often called a hinge point) and the joint has a single degree of freedom - the relative rotation of the two bodies around this point. To specify a revolute you need to provide two instances and a single anchor point in the room, as you can see in the image provided:",
          "syntax": "physics_joint_revolute_create(inst1, inst2, w_anchor_x, w_anchor_y, ang_min_limt, ang_max_limit, ang_limit, max_motor_torque, motor_speed, motor, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_rope_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_rope_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_rope_create.htm",
          "blurb": "A rope joint is one which is used to join two instances that you want to keep a constant distance apart, no matter what other forces are acting on it. With a distance joint, you can get \"joint stretching\" where the two fixtures will separate and behave strangely should too much stress be put on the joint, however the rope joint does not do this and will not stretch any further than the maximum defined length. When you create a rope joint the two instances should already be created and have a fixture assigned, then you define the two anchor points in room coordinates. The first anchor point is connected to instance 1, the second anchor point is connected to instance 2 and the distance and the maxlength argument sets the maximum length constraint on the joint. The image below shows how this works:",
          "syntax": "physics_joint_rope_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, maxlength, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_set_value",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_set_value",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_set_value.htm",
          "blurb": "Certain joint properties can be changed and set even after the creation of the joint. There are a number of constants that can be used in this function and they can be found here: Physics Joint Constants.",
          "syntax": "physics_joint_set_value(joint, field, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_weld_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_weld_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_weld_create.htm",
          "blurb": "The weld joint is designed to attach two fixtures together in a strong, yet flexible bond. The weld joint will permit flexing between the two joined fixtures but without the stretching associated with, for example, a distance joint, and will always try to \"spring\" back to the reference angle when put under any stress or load. You define the point in the room where the joint should be created, as well as the angle that you wish the joint to try and maintain at all times, as shown in the image below:",
          "syntax": "physics_joint_weld_create(inst1, inst2, anchor_x, anchor_y, ref_angle, freq_hz, damping_ratio, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_joint_wheel_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_joint_wheel_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_wheel_create.htm",
          "blurb": "A wheel joint simply combines a piston and a revolute joint, like a wheel mounted on the shock absorber of a car. You specify the anchor point for the joint well as the two physics enabled instances to joint, and the first instance will act as the \"body\" for the joint, while the second will be the \"wheel\", and be permitted to move freely around the joint axis. You can also set an axis vector, which is the imaginary line along which the joint will act as a \"spring\" permitting the wheel to bounce up and down along it as it encounters obstacles (much like the piston joint). The following image illustrates this:",
          "syntax": "physics_joint_wheel_create(inst1, inst2, anchor_x, anchor_y, axis_x, axis_y, enableMotor, max_motor_torque, motor_speed, freq_hz, damping_ratio, col)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_mass_properties",
      "type": "key",
      "topics": [
        {
          "name": "physics_mass_properties",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/physics_mass_properties.htm",
          "blurb": "This function can be used to set custom mass and rotational inertia values for a physics enabled instance. Normally the mass, centre of mass, and rotational inertia for an instance are calculated using a combination the surface area of the bound fixtures and their density. However, in very special occasions, you may need to offset the centre of mass or change the inertia, and that is when you would use this function.",
          "syntax": "physics_mass_properties(mass, local_center_x, local_center_y, inertia)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_count",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_count.htm",
          "blurb": "This function will return the number of particles that are active in a physics enabled room.",
          "syntax": "physics_particle_count()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm",
          "blurb": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following constants:",
          "syntax": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_delete",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_delete.htm",
          "blurb": "With this function you can delete (remove) a particle from the physics simulation in the current room. The function takes the unique ID of the particle to delete, as returned by the function physics_particle_create()."
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_delete_region_box",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_delete_region_box",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_delete_region_box.htm",
          "blurb": "With this function you can delete (remove) all the particles that fall within the bounds of the defined rectangular area from the physics simulation in the current room. The function takes the x and y position for the center of the area to delete as well as the half width and height of the rectangle (in pixels) which defines the area.",
          "syntax": "physics_particle_delete_region_box(x, y, halfWidth, halfHeight)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_delete_region_circle",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_delete_region_circle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_delete_region_circle.htm",
          "blurb": "With this function you can delete (remove) all the particles that fall within the bounds of the defined circular area from the physics simulation in the current room. The function takes the x and y position for the center of the area to delete as well as the radius (in pixels) which defines the circular area.",
          "syntax": "physics_particle_delete_region_circle(x, y, radius)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_delete_region_poly",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_delete_region_poly",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_delete_region_poly.htm",
          "blurb": "With this function you can delete (remove) all the particles that fall within the bounds of the defined polygonal area from the physics simulation in the current room. The function takes a (previously created) ds_list() containing the x/y position of each point of the polygon, with the even numbered positions in the list being the x coordinates, and odd numbered positions the y coordinates, ie: for a triangle, your list would have six entries, with entry 0, 2, and 4 being the x coordinates and 1, 3, and 5 being the y coordinates. The polygon will then be used to delete all the particles that fall within the defined area.",
          "syntax": "physics_particle_delete_region_poly(pointList)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_draw",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_draw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_draw.htm",
          "blurb": "This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the flags when creating the particle (see the function physics_particle_create() for an example), ie: using the bitwise or \"|\" to mask off the appropriate bits for each flag.",
          "syntax": "physics_particle_draw(typemask, category, sprite, subimg)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_draw_ext",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_draw_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_draw_ext.htm",
          "blurb": "This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the flags when creating the particles (see the functions physics_particle_create() for an example), ie: using the bitwise or \"|\" to mask off the appropriate bits for each flag.",
          "syntax": "physics_particle_draw_ext(typemask, category, sprite, subimg, xscale, yscale, ang, col, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_get_damping",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_damping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_damping.htm",
          "blurb": "With this function you can find out what the current linear damping is for particles in the physics simulation (you can set this value using physics_particle_set_damping()).",
          "syntax": "physics_particle_get_damping()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_get_data",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data.htm",
          "blurb": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function buffer_create(), and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data(buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_get_data_particle",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_data_particle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
          "blurb": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics_particle_create(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_get_data_particle(ind, buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_get_density",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_density",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_density.htm",
          "blurb": "With this function you can find out what the current density is for particles in the physics simulation (you can set this value using physics_particle_set_density())."
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_get_gravity_scale",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_gravity_scale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_gravity_scale.htm",
          "blurb": "With this function you can find out what the current gravity scale factor is for particles in the physics simulation (you can set this value using physics_particle_set_gravity_scale()).",
          "syntax": "physics_particle_get_gravity_scale()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_get_group_flags",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_group_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_group_flags.htm",
          "blurb": "With this function you can retrieve the group flags for a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_get_group_flags(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_get_max_count",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_max_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_max_count.htm",
          "blurb": "With this function you can find out what the current cap value is on particles permitted in the physics simulation (you can set this value using physics_particle_set_max_count()).",
          "syntax": "physics_particle_get_max_count()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_get_radius",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_get_radius",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_radius.htm",
          "blurb": "With this function you can find out what the current radius (in pixels) is for particles in the physics simulation (you can set this value using physics_particle_set_radius()).",
          "syntax": "physics_particle_get_radius()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_add_point",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_add_point",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_add_point.htm",
          "blurb": "This function sets a point in the room to define the shape of a polygon which will be used to create a group of soft body particles. You must have previously signaled to GameMaker that you are going define a polygon shape using the function physics_particle_group_polygon() and then use this function to define the individual points of the polygon. You must give at least three points when defining the polygon shape, but can give up to eight,\nand the function will permit the definition of concave polygons. However, if you generate a polygon with any cavities, the points within will be ignored and a convex shape will be created for the particle group.",
          "syntax": "physics_particle_group_add_point(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_begin",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_begin.htm",
          "blurb": "With this function you can create a group of particles in a room. A group of particles is one where the particles necessary to create a specific form are created all at once as a group, permitting you to create simulated soft-bodies with various properties set by the flags used. The \"flags\" are the return value of a combination of the particle constants (see the function physics_particle_create() for details of these), while the \"groupFlags\" are a combination of the following group constants (or 0 for no flags):",
          "syntax": "physics_particle_group_begin(flags, groupflags, x, y, ang, xv, yv, ang_velocity, col, alpha, strength, category)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_box",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_box",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_box.htm",
          "blurb": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function physics_particle_group_begin(), and then you would use this function to set the approximate half width and half height of the group in pixels - approximate because the exact width and height will depend on the size of the base particles, as defined by the physics_particle_set_radius() function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape. Finally you need to call physics_particle_group_end() to create the group of particles in the room.",
          "syntax": "physics_particle_group_box(halfWidth, halfHeight)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_circle",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_circle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_circle.htm",
          "blurb": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function physics_particle_group_begin(), and then you would use this function to set the approximate radius of the group in pixels - approximate because the exact radius will depend on the size of the base particles, as defined by the physics_particle_set_radius() function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape. Finally you need to call physics_particle_group_end() to create the group\nof particles in the room.",
          "syntax": "physics_particle_group_circle(radius)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_count",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_count.htm",
          "blurb": "This function will return the number of particles that are active in a single group. The group index (ID) is the value that is returned when you call the function physics_particle_group_end().",
          "syntax": "physics_particle_group_count(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_delete",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_delete.htm",
          "blurb": "With this function you can delete (remove) a particle group from the physics simulation in the current room. The function takes the unique group ID of the group to delete, as returned by the function physics_particle_group_end().",
          "syntax": "physics_particle_group_delete(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_end",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_end.htm",
          "blurb": "This function is used to end the definition of a particle group shape. Calling this function will create the particles within the given shape parameters, and also return an ID value which can be stored and used in further functions for interactions with the particle group.",
          "syntax": "physics_particle_group_end()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_ang_vel",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_ang_vel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_ang_vel.htm",
          "blurb": "With this function you can retrieve the angular velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_ang_vel(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_angle",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_angle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_angle.htm",
          "blurb": "With this function you can retrieve the rotation (angle) in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_angle(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_centre_x",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_centre_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_centre_x.htm",
          "blurb": "With this function you can retrieve the x component of the center of mass of an entire group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_centre_x(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_centre_y",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_centre_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_centre_y.htm",
          "blurb": "With this function you can retrieve the y component of the center of mass of an entire group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_centre_y(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_data",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_data.htm",
          "blurb": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics_particle_group_end(), and the buffer used must have been created previously using the function buffer_create(). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or \"|\" to create a single flag value to get the desired information.",
          "syntax": "physics_particle_group_get_data(group, buffer, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_inertia",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_inertia",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_inertia.htm",
          "blurb": "With this function you can retrieve the inertia of an entire group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_inertia(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_mass",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_mass",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_mass.htm",
          "blurb": "With this function you can retrieve the mass of an entire group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end().",
          "syntax": "physics_particle_group_get_mass(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_vel_x",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_vel_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_vel_x.htm",
          "blurb": "With this function you can retrieve the horizontal velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_vel_x(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_vel_y",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_vel_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_vel_y.htm",
          "blurb": "With this function you can retrieve the vertical velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_vel_y(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_x",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_x.htm",
          "blurb": "With this function you can retrieve the x position in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_x(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_get_y",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_get_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_y.htm",
          "blurb": "With this function you can retrieve the y position in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.",
          "syntax": "physics_particle_group_get_y(group)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_join",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_join",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_join.htm",
          "blurb": "With this function you can join two particle groups together, and the joined groups will then behave as if they were both part of a single entity. The groups should have been created with over-lapping edges, as, if they are not already touching, they will not be joined. The function takes the unique group IDs of the groups to join, as returned by the function physics_particle_group_end(), and you can use the function any number of times for a single group to join various soft bodies together.",
          "syntax": "physics_particle_group_join(to, from)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_group_polygon",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_group_polygon",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_polygon.htm",
          "blurb": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function physics_particle_group_begin(), and then you would use this function to tell GameMaker that you are going to add in the approximate points that will be used to define the polygon shape - approximate because the exact shape will depend on the size of the base particles, as defined by\nthe physics_particle_set_radius() function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape.",
          "syntax": "physics_particle_group_polygon()"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_set_category_flags",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_set_category_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm",
          "blurb": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_category_flags(category, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_set_damping",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_set_damping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_damping.htm",
          "blurb": "With this function you can set the linear damping of particles in the simulation. Damping is used to reduce the physics simulation velocity of instances over time, much like air resistance in the real world. This function is global in scope, in that it will change the damping not just for new particles created after the change, but also for those already present in the simulation.",
          "syntax": "physics_particle_set_damping(damping)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_set_density",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_set_density",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_density.htm",
          "blurb": "With this function you can set the density of the particles in a physics simulation. Setting the density of the particle will have a direct impact on how much inertia it has as well as how it reacts to collisions, so if you make a small particle with a high density it will have a very large mass, but if you define a large particle with a low density it will have a much smaller mass. This function is global in scope, in that it will change the density not just for new particles created after\nthe change, but also for those already present in the simulation.",
          "syntax": "physics_particle_set_density(density)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_set_flags",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_set_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
          "blurb": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_flags(index, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_set_gravity_scale",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_set_gravity_scale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_gravity_scale.htm",
          "blurb": "With this function you can set the gravity scale factor for particles in the physics simulation. The function is designed to help prevent instability in the physics simulation, especially when using very small particles which may behave unpredictably (i.e. break conservation of momentum) in scenarios such as explosions. Slowing these particles down by reducing gravity scale can stabilize their behaviour. This function is global in scope, in that it will change the gravity scale not just\nfor new particles created after the change, but also for those already present in the simulation.",
          "syntax": "physics_particle_set_gravity_scale(scale)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_set_group_flags",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_set_group_flags",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_group_flags.htm",
          "blurb": "With this function you can change the group flags for a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), while the flags are the return value of a combination of the following constants:",
          "syntax": "physics_particle_set_group_flags(group, flags)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_set_max_count",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_set_max_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_max_count.htm",
          "blurb": "This function will set the total permitted number of particles in a physics simulation. If you set this value to 0, then there is no cap the particles created, and setting it to any other value will stop any further particles being created when the total number of particles is equal to the value. Note that the minimum number of particles you can create in a simulation is 128, so setting this value any lower will have no effect (unless set to 0).",
          "syntax": "physics_particle_set_max_count(count)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_particle_set_radius",
      "type": "key",
      "topics": [
        {
          "name": "physics_particle_set_radius",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_radius.htm",
          "blurb": "With this function you can set the radius (in pixels) for the particles in a physics simulation. This function is global in scope, in that it will change the radius not just for new particles created after the change, but also for those already present in the simulation.",
          "syntax": "physics_particle_set_radius(radius)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_pause_enable",
      "type": "key",
      "topics": [
        {
          "name": "physics_pause_enable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_pause_enable.htm",
          "blurb": "Normally for a physics simulation to work, it must be continuous and cannot be stopped and started, or have instances suddenly moved from one place to another in the room. However, there are moments when you need to pause the simulation as (for example) the device os has paused, and so you would use this function. It pauses the simulation if the flag is set to true and no further physics calculations will be done until the flag is set to false again.",
          "syntax": "physics_pause_enable(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_remove_fixture",
      "type": "key",
      "topics": [
        {
          "name": "physics_remove_fixture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_remove_fixture.htm",
          "blurb": "This function removes (or \"un-binds\") a fixture from an instance or instances. It requires the unique \"id\" of the bound fixture (as returned by the function physics_fixture_bind() and it will remove all the currently defined physics properties for the instance, permitting you to redefine a new fixture and bind that to the instance. In this way you can change the instances physical properties without having to destroy and re-create it.",
          "syntax": "physics_remove_fixture(id, fixture)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_set_density",
      "type": "key",
      "topics": [
        {
          "name": "physics_set_density",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_set_density.htm",
          "blurb": "When you bind a fixture to an instance using physics_fixture_bind() this returns an \"id\" for the bound fixture. You can use this id to set the density value of the bound fixture, not the \"base\" fixture, at any time using this function.",
          "syntax": "physics_set_density(fixture, density)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_set_friction",
      "type": "key",
      "topics": [
        {
          "name": "physics_set_friction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_set_friction.htm",
          "blurb": "When you bind a fixture to an instance using physics_fixture_bind() this returns an \"id\" for the bound fixture. You can use this id to set the friction value of the bound fixture, not the \"base\" fixture, at any time using this function. Note that the friction is usually set to a value between 0 and 1, but you can use any non-negative value if required.",
          "syntax": "physics_set_friction(fixture, friction)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_set_restitution",
      "type": "key",
      "topics": [
        {
          "name": "physics_set_restitution",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/Fixtures/physics_set_restitution.htm",
          "blurb": "When you bind a fixture to an instance using physics_fixture_bind() this returns an \"id\" for the bound fixture. You can use this id to set the restitution value of the bound fixture, not the \"base\" fixture, at any time using this function. Restitution is usually set as a value between 0 and 1, but you can use higher values if required, although the results may be unpredictable.",
          "syntax": "physics_set_restitution(fixture, restitution)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_test_overlap",
      "type": "key",
      "topics": [
        {
          "name": "physics_test_overlap",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/physics_test_overlap.htm",
          "blurb": "This function can be used to check and see if a physical body (ie: the fixture of an instance) overlaps, or will overlap, when rotated and placed at a given position in the room. the \"angle\" argument is the angle of rotation that the calling instance has (or will have) at the position to be checked, and the \"obj\" argument can be either a single instance id, and object index or the keywords all or other.",
          "syntax": "physics_test_overlap(xpos, ypos, angle, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_world_create",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_create.htm",
          "blurb": "Even if you have defined the physics for your objects, without a world to place them in they will default to the traditional GameMaker collision system, so you need this function to create the physics system for the specified room either in an object event, or the creation code of the room itself (it can also be defined without using code in the room editor). This function will associate a physics \"world\" with the room and all instances created in the room will behave using\nthe physics that has been defined for them and the world itself.",
          "syntax": "physics_world_create(pixeltometrescale)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_world_draw_debug",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_draw_debug",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm",
          "blurb": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
          "syntax": "physics_world_draw_debug(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_world_gravity",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_gravity",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_gravity.htm",
          "blurb": "As with all the physics functions, physics_world_gravity() will only work on an instance if the room has a physics world defined for it in the room editor or using physics_world_create(). It will then use the 0,0 defining point of the physics world to calculate the direction and strength of gravity based on the vector calculated from the xg and yg inputs. Here are some images to illustrate...",
          "syntax": "physics_world_gravity(xg, yg)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_world_update_iterations",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_update_iterations",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_update_iterations.htm",
          "blurb": "Everything in GameMaker is based around steps and, normally, each event will only happen once per step. However, to get the necessary precision with the physics functions they are made to do several calculations each step which are called \"iterations\" the number of which are controlled by this function. The default number for the physics system is 10, but this can be changed to higher or lower depending how many times you want the physics to calculate each step, but it is recommended that you set this no lower than 5 and no higher than 30. You should also be aware that this function is dependent on the physics_world_update_speed() function.",
          "syntax": "physics_world_update_iterations(iterations)"
        }
      ],
      "keys": []
    },
    {
      "name": "physics_world_update_speed",
      "type": "key",
      "topics": [
        {
          "name": "physics_world_update_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_update_speed.htm",
          "blurb": "GameMaker updates things based on the room speed, so that if you set it to ,say, 30, GameMaker will run 30 steps in the course of a second. However, for the physics functions that may not be enough and you may want things to be updated at a slightly faster speed to increase stability or precision. To that end we use the function physics_world_update_speed() which sets the update speed for the physics system independently of the room speed. This means that you could have a room speed of 30, but set the physics to 60, effectively doubling the speed at which the physics system updates and performs its calculations compared to the speed at which the step are updated.",
          "syntax": "physics_world_update_speed(speed)"
        }
      ],
      "keys": []
    },
    {
      "name": "pi",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        },
        {
          "name": "Maths And Numbers",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Maths_And_Numbers.htm",
          "blurb": "GameMaker contains a large number functions to deal with different areas of mathematics, numbers of all types and the date and time. Most of these functions can be found in the sections listed below:"
        }
      ],
      "keys": []
    },
    {
      "name": "place_empty",
      "type": "key",
      "topics": [
        {
          "name": "place_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/place_empty.htm",
          "blurb": "You can use this function to check and see if the calling instance would collide with any other instance of an object or all instances in your game. For this to collision to resolve correctly, the instance running the code must have a valid collision mask (either for the sprite itself, or through the mask_index) and it will only register collisions with those instances that also have a valid mask.",
          "syntax": "place_empty(x, y, [object_id])"
        }
      ],
      "keys": []
    },
    {
      "name": "place_free",
      "type": "key",
      "topics": [
        {
          "name": "place_free",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/place_free.htm",
          "blurb": "You can use this function to check and see if the calling instance would collide with any instance flagged as solid in your game. Now, it should be noted that for this to work, the instance running the code must have a valid collision mask (either for the sprite itself, or through the mask_index) and it will only register collisions with those solid flagged instances that also have a valid mask.",
          "syntax": "place_free(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "place_meeting",
      "type": "key",
      "topics": [
        {
          "name": "place_meeting",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/place_meeting.htm",
          "blurb": "With this function you can check a position for a collision with another instance or all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker to move the instance to the new position, check for a collision, move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the object being checked for have precise collision masks selected otherwise only bounding box collisions are applied. This function also accepts the special keywords all and other. Please note that should you need to get the unique instance id of the object being collided with, you should use instance_place().",
          "syntax": "place_meeting(x, y, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "place_snapped",
      "type": "key",
      "topics": [
        {
          "name": "place_snapped",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/place_snapped.htm",
          "blurb": "With this function you can check and see if the origin of an instance (its x and y position) is aligned to a grid with the hsnap and vsnap values specified by you.",
          "syntax": "place_snapped(hsnap, vsnap)"
        }
      ],
      "keys": []
    },
    {
      "name": "Platform Preferences",
      "type": "key",
      "topics": [
        {
          "name": "Platform Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Platform_Preferences.htm",
          "blurb": "This section of the manual covers the different platform specific Preferences that need to be set up before you can compile your games to certain targets. These generally only need set up once to start with (although future updates to the runtimes may require you to change certain things, but these will be mentioned in the Release Notes) and are use to point to any SDKs that are required and set basic Compiling options for how you want GameMaker to compile your game projects for any given platform. Note that the platforms available will depend on the Licence that you have and not all of them may be available."
        }
      ],
      "keys": []
    },
    {
      "name": "point_direction",
      "type": "key",
      "topics": [
        {
          "name": "point_direction",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/point_direction.htm",
          "blurb": "This function returns the direction of a vector formed by the specified components [x1,y1] and [x2,y2] in relation to the fixed x/y coordinates of the room. For example, in the image below if we want to get the direction from the player ship position to the enemy position so that we can fire a missile at the enemy then we would use this function (the exact code is in the example below the image):",
          "syntax": "point_direction(x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "point_distance",
      "type": "key",
      "topics": [
        {
          "name": "point_distance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/point_distance.htm",
          "blurb": "This function returns the length of a vector formed by the specified components [x1,y1] and [x2,y2]. For example, in the image below if we want to get the distance between the player ship position and the enemy position so that we can calculate if the enemy is close enough to shoot at then we would use this function (the exact code is in the example below the image):",
          "syntax": "point_distance(x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "point_distance_3d",
      "type": "key",
      "topics": [
        {
          "name": "point_distance_3d",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/point_distance_3d.htm",
          "blurb": "This function takes the supplied components of the vector and returns the length (distance) of the vector. It works in exactly the same way as point_distance() but with the addition of factoring in the z value (depth) for use in 3D space.",
          "syntax": "point_distance_3d(x1, y1, z1, x2, y2, z2)"
        }
      ],
      "keys": []
    },
    {
      "name": "point_in_circle",
      "type": "key",
      "topics": [
        {
          "name": "point_in_circle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/point_in_circle.htm",
          "blurb": "When using this function, you define a circular area and GameMaker will work out whether the given point falls within its bounds or not. If the point falls within the defined circle the function will return true otherwise the function will return false.",
          "syntax": "point_in_circle(px, py, x1, y1, rad)"
        }
      ],
      "keys": []
    },
    {
      "name": "point_in_rectangle",
      "type": "key",
      "topics": [
        {
          "name": "point_in_rectangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/point_in_rectangle.htm",
          "blurb": "When using this function, you define a rectangular area and GameMaker will work out whether the given point falls within its bounds or not. If the point falls within the defined rectangle the function will return true otherwise the function will return false.",
          "syntax": "point_in_rectangle(px, py, x1, y1, x2, y2)"
        }
      ],
      "keys": []
    },
    {
      "name": "point_in_triangle",
      "type": "key",
      "topics": [
        {
          "name": "point_in_triangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/point_in_triangle.htm",
          "blurb": "When using this function, you define a triangular area and GameMaker will work out whether the given point falls within its bounds or not. If the point falls within the defined triangle the function will return true otherwise the function will return false.",
          "syntax": "point_in_triangle(px, py, x1, y1, x2, y2, x3, y3)"
        }
      ],
      "keys": []
    },
    {
      "name": "pointer_invalid",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        }
      ],
      "keys": []
    },
    {
      "name": "pointer_null",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        }
      ],
      "keys": []
    },
    {
      "name": "position_change",
      "type": "key",
      "topics": [
        {
          "name": "position_change",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/position_change.htm",
          "blurb": "This function will check a position for a collision with any instances at the given point, and if there is one, it will change all instances in collision to be instances of the chosen object. You can set the \"perf\" argument to true which will force GameMaker to perform the Destroy and Clean Up events of the found instance as well as the Create event of the new instance, or false to not perform any of these events. Please note, that if you choose not to perform the Destroy, Clean Up and Create events, any instance created that uses a variable normally defined in the create event will crash the game as that variable will no longer exist.",
          "syntax": "position_change(x, y, obj, perf)"
        }
      ],
      "keys": []
    },
    {
      "name": "position_destroy",
      "type": "key",
      "topics": [
        {
          "name": "position_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/position_destroy.htm",
          "blurb": "This function simply destroys all instances that are found to be in collision with the specified position. Collisions are based on the mask of the instances, and if any part of the mask over-laps with the target point it then the function will destroy that instance. Instances destroyed in this way will trigger their Destroy and Clean Up events.",
          "syntax": "position_destroy(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "position_empty",
      "type": "key",
      "topics": [
        {
          "name": "position_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/position_empty.htm",
          "blurb": "This function will check to see if a given position enters into collision with any instance with a valid collision mask at the given position.",
          "syntax": "position_empty(x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "position_meeting",
      "type": "key",
      "topics": [
        {
          "name": "position_meeting",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/position_meeting.htm",
          "blurb": "With this function you can check a position for a collision with another instance or all instances of an object. When you use this you are checking a single point in the room for an instance or an object. This check will be done against the bounding box of the instance or against the mask of the instance if that instance has precise collisions checked. If you need to get the unique instance id if the object being collided with you should use instance_position(). This function also accepts the special keywords all and other.",
          "syntax": "position_meeting(x, y, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "power",
      "type": "key",
      "topics": [
        {
          "name": "power",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/power.htm",
          "blurb": "This will return the value of a number multiplied by itself \"n\" number of times. For example, power(5,3) will multiply 5 by itself 3 times and return 125, which is the same as saying 5*5*5=125. Please note that the \"x\" value (the number to change) cannot be a negative value.",
          "syntax": "power(x, n)"
        }
      ],
      "keys": []
    },
    {
      "name": "pr_linelist",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm",
          "blurb": "This function must be called before you can define any primitives. There are 6 types of primitives you can define as the following constants:",
          "syntax": "draw_primitive_begin(kind)"
        },
        {
          "name": "vertex_submit",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
          "blurb": "You can use this function to submit the contents of a vertex buffer to the graphics pipeline for use with a shader. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.",
          "syntax": "vertex_submit(buffer, primitive, texture)"
        }
      ],
      "keys": []
    },
    {
      "name": "pr_linestrip",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm",
          "blurb": "This function must be called before you can define any primitives. There are 6 types of primitives you can define as the following constants:",
          "syntax": "draw_primitive_begin(kind)"
        },
        {
          "name": "vertex_submit",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
          "blurb": "You can use this function to submit the contents of a vertex buffer to the graphics pipeline for use with a shader. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.",
          "syntax": "vertex_submit(buffer, primitive, texture)"
        }
      ],
      "keys": []
    },
    {
      "name": "pr_pointlist",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm",
          "blurb": "This function must be called before you can define any primitives. There are 6 types of primitives you can define as the following constants:",
          "syntax": "draw_primitive_begin(kind)"
        },
        {
          "name": "vertex_submit",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
          "blurb": "You can use this function to submit the contents of a vertex buffer to the graphics pipeline for use with a shader. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.",
          "syntax": "vertex_submit(buffer, primitive, texture)"
        }
      ],
      "keys": []
    },
    {
      "name": "pr_trianglefan",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm",
          "blurb": "This function must be called before you can define any primitives. There are 6 types of primitives you can define as the following constants:",
          "syntax": "draw_primitive_begin(kind)"
        }
      ],
      "keys": []
    },
    {
      "name": "pr_trianglelist",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm",
          "blurb": "This function must be called before you can define any primitives. There are 6 types of primitives you can define as the following constants:",
          "syntax": "draw_primitive_begin(kind)"
        },
        {
          "name": "vertex_submit",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
          "blurb": "You can use this function to submit the contents of a vertex buffer to the graphics pipeline for use with a shader. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.",
          "syntax": "vertex_submit(buffer, primitive, texture)"
        }
      ],
      "keys": []
    },
    {
      "name": "pr_trianglestrip",
      "type": "key",
      "topics": [
        {
          "name": "draw_primitive_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm",
          "blurb": "This function must be called before you can define any primitives. There are 6 types of primitives you can define as the following constants:",
          "syntax": "draw_primitive_begin(kind)"
        },
        {
          "name": "vertex_submit",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
          "blurb": "You can use this function to submit the contents of a vertex buffer to the graphics pipeline for use with a shader. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.",
          "syntax": "vertex_submit(buffer, primitive, texture)"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Android",
      "type": "key",
      "topics": [
        {
          "name": "Android",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Platform_Preferences/Android.htm",
          "blurb": "The Android preferences are split into various sections listed below:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Anim Curves",
      "type": "key",
      "topics": [
        {
          "name": "Animation Curve Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Anim_Curve_Editor_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Asset Browser",
      "type": "key",
      "topics": [
        {
          "name": "Asset Browser Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Asset_Browser_Preferences.htm",
          "blurb": "The Asset Browser Preferences are used to define certain properties for how the Asset Browser and its elements function. The main options are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Extensions",
      "type": "key",
      "topics": [
        {
          "name": "Extension Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Extension_Editor_Preferences.htm",
          "blurb": "The Extension Editor preferences cover a few options related to the messages that you are shown when using it, with the exact details outlined below:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Feather Settings",
      "type": "key",
      "topics": [
        {
          "name": "Feather",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm",
          "blurb": "Feather provides intelligent code completion and improved syntax checking in your GML Code scripts, along with smart refactoring options."
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Fonts",
      "type": "key",
      "topics": [
        {
          "name": "Font Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Font_Editor_Preferences.htm",
          "blurb": "The Font Editor Preferences are used to define how the Font Editor behaves. The different options available are listed below along with a description of what each one does."
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General",
      "type": "key",
      "topics": [
        {
          "name": "General Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General_Preferences.htm",
          "blurb": "The General Preferences are used to define the general behaviour of the GameMaker IDE. The most general ones are listed on the main page while many others are split into multiple sub-categories, explained further down this page."
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Background",
      "type": "key",
      "topics": [
        {
          "name": "Background",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Background.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Compiling",
      "type": "key",
      "topics": [
        {
          "name": "Compiling",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Compiling.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Confirm Dialogs",
      "type": "key",
      "topics": [
        {
          "name": "Confirm Dialogs",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Confirm_Dialogs.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Debugging",
      "type": "key",
      "topics": [
        {
          "name": "Debugging",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Debugging.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - File Watcher",
      "type": "key",
      "topics": [
        {
          "name": "File Watcher",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/File_Watcher.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Go To",
      "type": "key",
      "topics": [
        {
          "name": "Go To",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Go_To.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Help",
      "type": "key",
      "topics": [
        {
          "name": "Help",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Help.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Input",
      "type": "key",
      "topics": [
        {
          "name": "Input",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Input.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Output Windows",
      "type": "key",
      "topics": [
        {
          "name": "Output Windows",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Output_Windows.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Paths",
      "type": "key",
      "topics": [
        {
          "name": "Paths",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Paths.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Power Saving",
      "type": "key",
      "topics": [
        {
          "name": "Power Saving",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Power_Saving.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Recent Windows",
      "type": "key",
      "topics": [
        {
          "name": "Recent Windows",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Recent_Windows.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Resources",
      "type": "key",
      "topics": [
        {
          "name": "Resources",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Resources.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - General - Workspaces",
      "type": "key",
      "topics": [
        {
          "name": "Workspace",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/General/Workspace.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - GML Visual",
      "type": "key",
      "topics": [
        {
          "name": "GML Visual Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/GML_Visual_Preferences.htm",
          "blurb": " The GML Visual Preferences are used to define how the Visual editor looks and feels. The different options available are listed below along with a description of what each one does."
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - GX.games",
      "type": "key",
      "topics": [
        {
          "name": "GX.games",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Platform_Preferences/GX_Games_Preferences.htm",
          "blurb": "The GX.games preferences have the following options:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - HTML5",
      "type": "key",
      "topics": [
        {
          "name": "HTML5",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Platform_Preferences/HTML5.htm",
          "blurb": "The HTML5 preferences have the following options:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Images",
      "type": "key",
      "topics": [
        {
          "name": "Image Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Image_Editor_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - iOS",
      "type": "key",
      "topics": [
        {
          "name": "iOS",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Platform_Preferences/iOS.htm",
          "blurb": "The iOS preferences have the following options:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Language",
      "type": "key",
      "topics": [
        {
          "name": "GML Code Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/GML_Code_Preferences.htm",
          "blurb": "The GML Code Preferences are used to define how some of the language features for coding will be displayed in the IDE of GameMaker. The options for GML Code are as follows:"
        },
        {
          "name": "Language Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Language_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - macOS",
      "type": "key",
      "topics": [
        {
          "name": "macOS",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Platform_Preferences/macOS.htm",
          "blurb": "The macOS preferences have the following options:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Marketplace",
      "type": "key",
      "topics": [
        {
          "name": "Marketplace Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Marketplace_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Objects",
      "type": "key",
      "topics": [
        {
          "name": "Object Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Object_Editor_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Plugins",
      "type": "key",
      "topics": [
        {
          "name": "Plugin Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Plugin_Preferences.htm",
          "blurb": "The Plugins Preferences are used to control any extra plugins that have been added to the GameMaker IDE. By default this has one section dedicated to the Source Control plugin for integrating GameMaker projects with Git."
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Redefine Keys",
      "type": "key",
      "topics": [
        {
          "name": "Redefine Keys Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Redefine_Keys_Preferences.htm",
          "blurb": "The Redefine Keys section of the Preferences allows you to change the mappings for the various keyboard shortcuts provided in the GameMaker IDE."
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Rooms",
      "type": "key",
      "topics": [
        {
          "name": "Room Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Room_Editor_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Runtime Feeds",
      "type": "key",
      "topics": [
        {
          "name": "Runtime Feed Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Runtime_Feed_Preferences.htm",
          "blurb": "The Runtime Feeds Preferences are used to display and change the currently installed Runtime as well as the runtime in current use. GameMaker can have several different runtime tools installed at any one time and you can set which one to use from this preference. Ideally you want to be using the most up-to-date runtime, but sometimes it may have an issue, or you may be required to use an older one for comparability, etc... and so you can change the runtime tools that GameMaker uses to build your game here."
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Sequences",
      "type": "key",
      "topics": [
        {
          "name": "Sequences Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Sequences_Preferences.htm",
          "blurb": "The Sequences Preferences are used to define certain properties for how the Sequences Editor and its elements function. The main options are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Source Control",
      "type": "key",
      "topics": [
        {
          "name": "Plugin Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Plugin_Preferences.htm",
          "blurb": "The Plugins Preferences are used to control any extra plugins that have been added to the GameMaker IDE. By default this has one section dedicated to the Source Control plugin for integrating GameMaker projects with Git."
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Splines",
      "type": "key",
      "topics": [
        {
          "name": "Spline Editor",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Spline_Editor.htm",
          "blurb": "The  spline Editor Preferences are used primarily to define how the smooth paths in the Path Editor look, although they will affect certain other aspects of the IDE (like the Physics Shape\nEditor). The following options exist:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Sprites",
      "type": "key",
      "topics": [
        {
          "name": "Sprite Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Sprite_Editor_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Start Screen",
      "type": "key",
      "topics": [
        {
          "name": "Start Screen Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Start_Screen_Preferences.htm",
          "blurb": "The Start Screen Preferences allow you to change how the Start Page behaves. The main options are:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Text",
      "type": "key",
      "topics": [
        {
          "name": "Text Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Text_Editor_Preferences.htm",
          "blurb": "The Text Editors preferences are used to define how the different code/script editors look and feel. The main page has the following options:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Tile Sets",
      "type": "key",
      "topics": [
        {
          "name": "Tile Set Editor Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Tile_Set_Editor_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Timelines",
      "type": "key",
      "topics": [
        {
          "name": "Timeline Preferences",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/IDE_Preferences/Timeline_Preferences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - tvOS",
      "type": "key",
      "topics": [
        {
          "name": "tvOS",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Platform_Preferences/tvOS.htm",
          "blurb": "The tvOS preferences have the following options:"
        }
      ],
      "keys": []
    },
    {
      "name": "Prefs - Windows",
      "type": "key",
      "topics": [
        {
          "name": "Windows",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Platform_Preferences/Windows.htm",
          "blurb": "The Windows preferences have the following options:"
        }
      ],
      "keys": []
    },
    {
      "name": "program_directory",
      "type": "key",
      "topics": [
        {
          "name": "program_directory",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_Directories/program_directory.htm",
          "blurb": "This will return the directory where the game executable is stored. However this may not always be useful, particularly as some devices run the exe from a *.zip file, so this would return the same no matter where the game is actually running from.",
          "syntax": "program_directory"
        }
      ],
      "keys": []
    },
    {
      "name": "Project Image Generator",
      "type": "key",
      "topics": [
        {
          "name": "Project Image Generator",
          "type": "topic",
          "url": "IDE_Tools/Project_Image_Generator.htm",
          "blurb": "The Project Image Generator is accessed from the Tools Menu at the top of the GameMaker IDE. This tool is designed to quickly create all the different splash screens, promo images and icons that are required by all the different target platforms from a single set of images. You supply the base image\nand the base icon and then click the Generate button, and your Game Options for each platform will update with the new images."
        }
      ],
      "keys": []
    },
    {
      "name": "ps_distr_gaussian",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
          "blurb": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
          "syntax": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution)"
        }
      ],
      "keys": []
    },
    {
      "name": "ps_distr_invgaussian",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
          "blurb": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
          "syntax": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution)"
        }
      ],
      "keys": []
    },
    {
      "name": "ps_distr_linear",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
          "blurb": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
          "syntax": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution)"
        }
      ],
      "keys": []
    },
    {
      "name": "ps_shape_diamond",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
          "blurb": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
          "syntax": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution)"
        }
      ],
      "keys": []
    },
    {
      "name": "ps_shape_ellipse",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
          "blurb": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
          "syntax": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution)"
        }
      ],
      "keys": []
    },
    {
      "name": "ps_shape_line",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
          "blurb": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
          "syntax": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution)"
        }
      ],
      "keys": []
    },
    {
      "name": "ps_shape_rectangle",
      "type": "key",
      "topics": [
        {
          "name": "part_emitter_region",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
          "blurb": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
          "syntax": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_circle",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_cloud",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_disk",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_explosion",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_flare",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_line",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_pixel",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_ring",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_smoke",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_snow",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_spark",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_sphere",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_square",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "pt_shape_star",
      "type": "key",
      "topics": [
        {
          "name": "part_type_shape",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
          "blurb": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
          "syntax": "part_type_shape(ind, shape)"
        }
      ],
      "keys": []
    },
    {
      "name": "ptr",
      "type": "key",
      "topics": [
        {
          "name": "ptr",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/ptr.htm",
          "blurb": "This function will attempt to convert a given value into a pointer data type, where the value must be either a real, a string, an int64, an int32, or a ptr. Anything else will cause the game to crash with an error message.",
          "syntax": "ptr(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start",
      "type": "key",
      "topics": [
        {
          "name": "Making A Game Using GameMaker",
          "type": "topic",
          "url": "Quick_Start_Guide/Quick_Start_Guide.htm",
          "blurb": "Welcome to the Quick Start Guide! This section of the manual is designed to familiarise you with the most important aspects of GameMaker and will show you the basics to get you making games as quick as possible. The guide covers essential IDE functionality and also provides a brief introduction to programming, so you can make the most of the product as quick as possible, whether you use GML Code or GML Visual."
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Drawing",
      "type": "key",
      "topics": [
        {
          "name": "Drawing",
          "type": "topic",
          "url": "Quick_Start_Guide/Drawing.htm",
          "blurb": "This section (and the following section on Movement and Controls) is aimed at giving you practical examples of GML or GML Visual to enable you to get started as quickly as possible making your first game projects. We won't be explaining things in too much depth as we want you to get started making stuff as quickly as possible, so we encourage you to explore any links as you go along and to use the \"search\" function of the manual to look for additional information on anything you aren't sure about."
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Movement And Controls",
      "type": "key",
      "topics": [
        {
          "name": "Movement And Controls",
          "type": "topic",
          "url": "Quick_Start_Guide/Movement_And_Controls.htm",
          "blurb": "The previous section of this Quick Start Guide gave some examples for drawing things to the screen, but just drawing things isn't much good if you can't also move them around... so in this section we'll be giving you some examples of movement for your objects, as well as some basic control schemes for different types of games. All the examples are given using GML Visual as well as the GML Code, so you can use whichever you feel more comfortable with. Note that we won't be explaining things in too much depth here, as we want you to get started making stuff as quickly as possible, so we encourage you to explore any links as you go along and to use the \"search\" function of the manual to look for additional information on anything you aren't sure about."
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Objects And Instances",
      "type": "key",
      "topics": [
        {
          "name": "Objects And Instances",
          "type": "topic",
          "url": "Quick_Start_Guide/Objects_And_Instances.htm",
          "blurb": "With the assets you have seen so far you can add some nice images and sounds to the game asset browser, but they don't do anything in the game itself yet! For that we need the most important assets of all in GameMaker, the Object asset. Objects are a special asset that we use to control aspects of a game and to do specific things. Most of the time they have a sprite associated with them so that you can see them in the game rooms, but sometimes they are used as a \"behind the scenes\" controller objects to do things like track stats, or set timings for cut-scenes, etc... Objects can be given behaviours and they can react to certain events as well as to each other, and most of the things you see in a game are based on objects and their interactions with the user and each other."
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Rooms",
      "type": "key",
      "topics": [
        {
          "name": "Rooms",
          "type": "topic",
          "url": "Quick_Start_Guide/Rooms.htm",
          "blurb": "All games that you make in GameMaker need at least one room to run (but can have many, many more) , and a room is just a space where you place instances of the objects that make up your game as well as tiles and any other graphical resources. When you first create a room in the Asset Browser you will be presented with a new Room Editor workspace with which to edit its properties, something like this:"
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Sequences",
      "type": "key",
      "topics": [
        {
          "name": "Sequences",
          "type": "topic",
          "url": "Quick_Start_Guide/Sequences.htm",
          "blurb": "The final asset we'll discuss in this guide before moving on to discuss how it all comes together in the Room Editor, is the Sequences asset. A sequence is essentially a collection of other assets that are collected in one place and then animated together. The final animation (sequence) can then be added to rooms in your game much like instances."
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Sounds",
      "type": "key",
      "topics": [
        {
          "name": "Creating Sound Effects",
          "type": "topic",
          "url": "Quick_Start_Guide/Creating_Sound_Effects.htm",
          "blurb": "All games have to have sound effects - and most also have music - which means that you need to be able to add them to your game in GameMaker. This is done through the Sound Editor, which is opened whenever you create a new Sound asset in the Asset Browser:"
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Sprites",
      "type": "key",
      "topics": [
        {
          "name": "Creating Sprites",
          "type": "topic",
          "url": "Quick_Start_Guide/Creating_Sprites.htm",
          "blurb": "Now that you know what a program is, it's time to look at some of the different assets that can be used in GameMaker to make your game. To start with, we'll look at sprites, which are generally one of the first things you'll need when making any project. As explained in the section on The Asset Browser, a sprite is an image that can be animated (although it doesn't\nhave to be) and then drawn to the screen. In general a sprite will be associated with an object, but you can draw sprites on their own, either from code or in the room editor Asset Layer (we'll talk about this in more detail later,\nin the section on rooms). You can also create a sprite to be used as a tile sets, but we'll explore that option in a later section too."
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Summary",
      "type": "key",
      "topics": [
        {
          "name": "Summary",
          "type": "topic",
          "url": "Quick_Start_Guide/Summary.htm",
          "blurb": "We're at the end of this Quick Start Guide and we hope you've gained enough knowledge and confidence to go and start using GameMaker to make your own projects! if you've gone through all the pages of this guide, then you should now know the following:"
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - Tile Sets",
      "type": "key",
      "topics": [
        {
          "name": "Creating Tile Sets",
          "type": "topic",
          "url": "Quick_Start_Guide/Creating_Tile_Sets.htm",
          "blurb": "Tile Sets are created from sprites, but they are also classified as a separate asset type since the way that GameMaker handles them is a bit different to both sprites and objects. So, a tile set is a collection of tiles created together in one sprite, and a tile is simply a graphical resource that gets added to a GameMaker room as part of a  tile map. These tile maps are then drawn to the\nscreen with very little CPU/GPU processing, making them ideal for designing any static items in levels."
        }
      ],
      "keys": []
    },
    {
      "name": "Quick Start - What Is Programming?",
      "type": "key",
      "topics": [
        {
          "name": "What Is Programming?",
          "type": "topic",
          "url": "Quick_Start_Guide/What_Is_Programming_.htm",
          "blurb": "In the previous section, we outlined how GameMaker works to create your game, but regardless of the sprites, objects or rooms that you have added, nothing will happen unless you have programmed it to happen. But, what is a program?"
        }
      ],
      "keys": []
    },
    {
      "name": "radtodeg",
      "type": "key",
      "topics": [
        {
          "name": "radtodeg",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/radtodeg.htm",
          "blurb": "Once you have done your calculations using sin, or cos etc... the result is in radians. This may not always be what you want and so to turn the radians into degrees we use this function. For example, radtodeg(sin(180)) will return -45 degrees. This function translates radians into degrees using the formula:",
          "syntax": "radtodeg(rad)"
        }
      ],
      "keys": []
    },
    {
      "name": "random",
      "type": "key",
      "topics": [
        {
          "name": "random",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/random.htm",
          "blurb": "This function returns a random floating-point (decimal) number between 0.0 (inclusive) and the specified upper limit (inclusive).",
          "syntax": "random(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "random_get_seed",
      "type": "key",
      "topics": [
        {
          "name": "random_get_seed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/random_get_seed.htm",
          "blurb": "To generate a random number GameMaker starts with a random seed number. With this function you can retrieve that seed, which can then be stored to reproduce a specific series of random events. For example, say you have a procedurally generated game, but want the player to be able to go back to previously discovered areas. Well, at the start of each area, you can store the random seed with this function and so every time you need to go back there, you can use random_set_seed() to set the seed to what it was previously and so force GameMaker to reproduce the same set of \"random\" functions that it used previously.",
          "syntax": "random_get_seed()"
        }
      ],
      "keys": []
    },
    {
      "name": "random_range",
      "type": "key",
      "topics": [
        {
          "name": "random_range",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/random_range.htm",
          "blurb": "This function returns a random floating-point (decimal) number between the specified lower limit (inclusive) and the specified upper limit (inclusive).",
          "syntax": "random_range(n1, n2)"
        }
      ],
      "keys": []
    },
    {
      "name": "random_set_seed",
      "type": "key",
      "topics": [
        {
          "name": "random_set_seed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/random_set_seed.htm",
          "blurb": "To generate a random number GameMaker starts with a random seed number. With this function you can set that seed to a known value and so \"force\" the outcome of all random events afterwards to be the same every time the program is run. For example, this function can be used in conjunction with random_get_seed() to create procedurally generated content and save the results without having huge savegames (you save the seed only, no need for anything else). Should you need truly random results for everything, you should be using the randomise() function.",
          "syntax": "random_set_seed(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "randomise",
      "type": "key",
      "topics": [
        {
          "name": "randomise",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/randomise.htm",
          "blurb": "This function sets the seed to a random value. Should you need to keep a consistent value over a number of runs of a game, you should be using random_set_seed(). Please note, that when using the random number functions in GameMaker the initial seed is always the same, as this makes tracing errors and debugging far easier. Should you wish to test with true random, you should call this function at the start of your game. The function will\nreturn the new randomised seed value (an unsigned 32bit integer).",
          "syntax": "randomise() // or randomize();"
        }
      ],
      "keys": []
    },
    {
      "name": "real",
      "type": "key",
      "topics": [
        {
          "name": "real",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/real.htm",
          "blurb": "This function can be used to turn a given string into a real number. When using this function, numbers, minus signs, decimal points and exponential parts in the string are taken into account, while other characters (such as letters) will cause an error to be thrown. If you know, or suspect, that a string may have other characters then you can use string_digits() to remove all non-numeric characters, before using this function to turn the resulting string\ninto a real number.",
          "syntax": "real(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "Recent Windows",
      "type": "key",
      "topics": [
        {
          "name": "Recent Windows",
          "type": "topic",
          "url": "IDE_Navigation/Recent_Windows.htm",
          "blurb": "The Recent Windows list can be opened from the Windows menu, and will show a short list (by default it has a maximum of 10 items) of the windows you have previously opened. To start with this list will be blank, but as you open different windows in the IDE (like a sprite or a script or an object, etc...) the list will be populated. Should you need to go back to any of these previously opened windows then you simply click the left mouse button  on the item in the list and the workspace will pan to the window. If you click the right mouse button  on an item, then you will open the following menu: Here you can choose to delete an item (or items, as you can use  +  or /  +  to select multiple) from the list or you can have them moved to the top of the list. The RMB menu also has an additional option permitting you to clear the list completely. It's worth noting that the Recent Windows list can be docked to the sides of the IDE and you can also adjust certain Preferences to change how it behaves."
        }
      ],
      "keys": []
    },
    {
      "name": "rectangle_in_circle",
      "type": "key",
      "topics": [
        {
          "name": "rectangle_in_circle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/rectangle_in_circle.htm",
          "blurb": "This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined circular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:",
          "syntax": "rectangle_in_circle(sx1, sy1, sx2, sy2, x, y, rad)"
        }
      ],
      "keys": []
    },
    {
      "name": "rectangle_in_rectangle",
      "type": "key",
      "topics": [
        {
          "name": "rectangle_in_rectangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/rectangle_in_rectangle.htm",
          "blurb": "This function will check two rectangular areas that you define to see if the source rectangle is either not in collision, completely within the destination rectangles bounds, or if they are simply touching. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:",
          "syntax": "rectangle_in_rectangle(sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2)"
        }
      ],
      "keys": []
    },
    {
      "name": "rectangle_in_triangle",
      "type": "key",
      "topics": [
        {
          "name": "rectangle_in_triangle",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/rectangle_in_triangle.htm",
          "blurb": "This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined triangular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:",
          "syntax": "rectangle_in_triangle(sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2, dx3, dy3)"
        }
      ],
      "keys": []
    },
    {
      "name": "Release Notes",
      "type": "key",
      "topics": [
        {
          "name": "Release Notes",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Release_Notes.htm",
          "blurb": "Each release of GameMaker comes with it's own set of release notes. These contain detailed information on the changes that have been made as well as a complete list of all the bugs that have been fixed. This is an invaluable tool for deciding whether to update your current version, or when you find something that may be a bug after a release."
        }
      ],
      "keys": []
    },
    {
      "name": "repeat",
      "type": "key",
      "topics": [
        {
          "name": "repeat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/repeat.htm",
          "blurb": "The GameMaker Language has a number of ways that you can perform loops, ie: have a statement or statements iterate over itself a certain number of times. The simplest of these is the repeat statement, which has the form:"
        }
      ],
      "keys": []
    },
    {
      "name": "Required SDKs",
      "type": "key",
      "topics": [
        {
          "name": "Required SDKs",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Required_SDKs.htm",
          "blurb": "GameMaker itself has no special requirements other than those listed on the Installing page and will install any required dependencies the first time you install the product as part of the package. However if you have any licence other than the Free licence, then you will also be required to set up and maintain the SDK's and other build tools that the export modules for the licence require."
        }
      ],
      "keys": []
    },
    {
      "name": "return",
      "type": "key",
      "topics": [
        {
          "name": "return",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/return.htm",
          "blurb": "The return statement has the following syntax:"
        }
      ],
      "keys": []
    },
    {
      "name": "room",
      "type": "key",
      "topics": [
        {
          "name": "room",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room.htm",
          "blurb": "This variable holds the room index for the current room that your game is running. This is not a read only variable, however changing this will not change the index value for the current room, but rather change the room to match the index that you have set the variable to. Care should be taken when doing this as if the index you change the variable to is not valid the game will throw an error and close. In general it is much better practice to use room_goto() to change rooms.",
          "syntax": "room"
        }
      ],
      "keys": []
    },
    {
      "name": "Room Editor",
      "type": "key",
      "topics": [
        {
          "name": "Rooms",
          "type": "topic",
          "url": "The_Asset_Editors/Rooms.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Room Manager",
      "type": "key",
      "topics": [
        {
          "name": "The Room Manager",
          "type": "topic",
          "url": "Settings/The_Room_Manager.htm",
          "blurb": "When using the Asset Browser, you can create your rooms and move them between the different folder groups to organise the project in a way that best suits you. However, games in GameMaker generally have rooms that follow a certain order, and at the very least must have a specific start room (after\nthe game starts in this room you can use code or actions to go to any room in the game if you wish), which is where the Room Manager comes into play."
        }
      ],
      "keys": []
    },
    {
      "name": "room_add",
      "type": "key",
      "topics": [
        {
          "name": "room_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_add.htm",
          "blurb": "This function will create a new, empty, room and add it to your game, returning its index to be stored in a variable for all further codes that deal with this room. Note that each room is permanently added to the game until the executable is closed, ie: rooms added through code cannot be deleted again. This has important implications for memory use and so you should use this function with care.",
          "syntax": "room_add()"
        }
      ],
      "keys": []
    },
    {
      "name": "room_assign",
      "type": "key",
      "topics": [
        {
          "name": "room_assign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_assign.htm",
          "blurb": "This function will copy one room to another, removing all instances, tiles etc... from the room that is being copied to and replacing them completely with the new room contents. You supply the index to for the room to be copied to (either as defined in the asset browser or as returned by the function room_add()) as well as the index of the source room. Note that calling this function on a room asset created in the Asset Browser will permanently change the contents of the room, and even calling game_restart() will not return the room to it's original state (only ending the game and opening it again will start with the room in its original state again).",
          "syntax": "room_assign(ind, source)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_duplicate",
      "type": "key",
      "topics": [
        {
          "name": "room_duplicate",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_duplicate.htm",
          "blurb": "This will duplicate a given room and return the duplicates index to be used in all further calls to reference the new room.",
          "syntax": "room_duplicate(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_exists",
      "type": "key",
      "topics": [
        {
          "name": "room_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_exists.htm",
          "blurb": "With this function you can check and see whether the room you specify exists or not. This function takes the room index (a real number) and not the room name (a string). This function is most useful when you are creating rooms dynamically using the function room_add(), but you can also use the read only variables room_first and room_last or the functions room_next() and room_previous() to get a specific room index, or provide a variable that has stored the index of any other room in your game.",
          "syntax": "room_exists(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_first",
      "type": "key",
      "topics": [
        {
          "name": "room_first",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_first.htm",
          "blurb": "This read only variable returns the index of the very first room in the game (this is defined by the order in which the rooms appear in the Room Manager and not by the order in which they were created).",
          "syntax": "room_first"
        }
      ],
      "keys": []
    },
    {
      "name": "room_get_camera",
      "type": "key",
      "topics": [
        {
          "name": "room_get_camera",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_get_camera.htm",
          "blurb": "With this function you can get the unique index ID of the camera assigned to a specific view in a room other than the current one. You give the room to use, the view port to use (from 0 to 7) and the function will return a camera index.",
          "syntax": "room_get_camera(rm, vind)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_get_name",
      "type": "key",
      "topics": [
        {
          "name": "room_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_get_name.htm",
          "blurb": "This function can be used to return the name of the specified room as a string. Please note that this is only a string and cannot be used to reference the room directly - for that you would need the room index. You can, however, use this string to get the room index using the returned string along with the function asset_get_index().",
          "syntax": "room_get_name(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_get_viewport",
      "type": "key",
      "topics": [
        {
          "name": "room_get_viewport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_get_viewport.htm",
          "blurb": "With this function you can retrieve the details of a view port in a room other than the current one. You give the room ID and the index of the view port to retrieve (from 0 to 7) and the function will return an array of 5 indices, where:",
          "syntax": "room_get_viewport(rm, vind)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_goto",
      "type": "key",
      "topics": [
        {
          "name": "room_goto",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_goto.htm",
          "blurb": "This function permits you to go to any room in your game project, whether created using code or in the Asset Browser. You supply the room index (stored in the variable for the room name, or as a variable returned from the function room_add()). Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the Room End event.",
          "syntax": "room_goto(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_goto_next",
      "type": "key",
      "topics": [
        {
          "name": "room_goto_next",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_goto_next.htm",
          "blurb": "With this function you can make your game go to the next one as listed in the Room Manager at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event.",
          "syntax": "room_goto_next()"
        }
      ],
      "keys": []
    },
    {
      "name": "room_goto_previous",
      "type": "key",
      "topics": [
        {
          "name": "room_goto_previous",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_goto_previous.htm",
          "blurb": "With this function you can make your game go to the previous one as listed in the Room Manager at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the Room End event.",
          "syntax": "room_goto_previous()"
        }
      ],
      "keys": []
    },
    {
      "name": "room_height",
      "type": "key",
      "topics": [
        {
          "name": "room_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_height.htm",
          "blurb": "This variable holds the height of the current room in pixels. You can change this variable to change the height of the room at any time, and changes will be applied to the bottom of the room, as the origin is considered to be the top left corner. So, for example, if the room is 480px in height and you set it to 640px, the room will be expanded downwards with an extra 180px added to the bottom.",
          "syntax": "room_height"
        }
      ],
      "keys": []
    },
    {
      "name": "room_instance_add",
      "type": "key",
      "topics": [
        {
          "name": "room_instance_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_instance_add.htm",
          "blurb": "With this function you can add an instance into any room other than the current one and at any position within that room. The function returns the unique id of the instance which can then be used in further function calls to set properties etc... of that instance, but only once the game has entered the specified room. If you wish to create an instance in the current room you should be using the function instance_create_layer(). Note that calling this function on a room asset created in the Asset Browser will permanently add the instance to the room, and even calling game_restart() will not return the room to it's original state (only ending the game and opening it again will start with the room in its original state again).",
          "syntax": "room_instance_add(index, x, y, obj)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_instance_clear",
      "type": "key",
      "topics": [
        {
          "name": "room_instance_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_instance_clear.htm",
          "blurb": "This function will clear a room of all instances (no destroy events shall be called for the instances that are being removed). Note that calling this function on a room asset created in the Asset Browser will permanently clear the room of instances, and even calling game_restart() will not return the room to it's original state (only ending the game and opening it again will start with the room in its original state again).",
          "syntax": "room_instance_clear(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_last",
      "type": "key",
      "topics": [
        {
          "name": "room_last",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_last.htm",
          "blurb": "This read only variable returns the index of the very last room in the game (this is defined by the order in which the rooms appear in the Room Manager and not by the order in which they were created). Note that this variable will not recognise or take into consideration rooms that have been added dynamically using room_add() or room_duplicate().",
          "syntax": "room_last"
        }
      ],
      "keys": []
    },
    {
      "name": "room_next",
      "type": "key",
      "topics": [
        {
          "name": "room_next",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_next.htm",
          "blurb": "With this function you can retrieve the index of the room after the room input into the function. For example you can use the variable room to get the index of the current room and then use this function to find the room that follows it, as listed in the Room Manager. If there is no room after the one you input then -1 is returned. Note that this function will not recognise or take into consideration rooms that have been added dynamically using room_add() or room_duplicate().",
          "syntax": "room_next(numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_persistent",
      "type": "key",
      "topics": [
        {
          "name": "room_persistent",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_persistent.htm",
          "blurb": "This variable can be used to get and to set the persistent flag for the current room. If set to true the room is considered persistent, in which case each time you leave the room and come back again the state of the instances within that room will have been maintained. However if it is flagged as false, each time you return to the room it will be reset to its initial state. You should note that a persistent room uses considerably more memory than a normal room and it is not recommended to have too many of them in your game.",
          "syntax": "room_persistent"
        }
      ],
      "keys": []
    },
    {
      "name": "room_previous",
      "type": "key",
      "topics": [
        {
          "name": "room_previous",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_previous.htm",
          "blurb": "With this function you can retrieve the index of the room before the room input into the function. For example you can use the variable room to get the index of the current room and then use this function to find the room that comes before it, as listed in the Room Manager. If there is no room before the one you input then -1 is returned. Note that this function will not recognise or take into consideration rooms that have been added dynamically using room_add() or room_duplicate().",
          "syntax": "room_previous(numb)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_restart",
      "type": "key",
      "topics": [
        {
          "name": "room_restart",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_restart.htm",
          "blurb": "This function will restart the current room, as if it had just been entered. Note that the room will not restart until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the Room End event.",
          "syntax": "room_restart()"
        }
      ],
      "keys": []
    },
    {
      "name": "room_set_camera",
      "type": "key",
      "topics": [
        {
          "name": "room_set_camera",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_camera.htm",
          "blurb": "With this function you can assign a camera to a specific viewport in a room other than the current one. You supply the room index, the view index (from 0 to 7) and then the index of the camera to use.",
          "syntax": "room_set_camera(rm, vind, camera)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_set_height",
      "type": "key",
      "topics": [
        {
          "name": "room_set_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_height.htm",
          "blurb": "With this function you can change (or set) the height of any room in your game except the current one.",
          "syntax": "room_set_height(index, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_set_persistent",
      "type": "key",
      "topics": [
        {
          "name": "room_set_persistent",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_persistent.htm",
          "blurb": "With this function you can change (or set) the persistence of any room in your game except the current one. A room with persistence flagged as true it will maintain the state of all instances within that room if the player leaves and then returns, whereas if persistence is flagged as false it will be reset to the initial state every time. You should note that a persistent room uses considerably more memory than a normal room and it is not recommended to have too many of them in your game.",
          "syntax": "room_set_persistent(index, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_set_view_enabled",
      "type": "key",
      "topics": [
        {
          "name": "room_set_view_enabled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_view_enabled.htm",
          "blurb": "With this function you can enable (true) or disable (false) the view of any room within your game except the current one.",
          "syntax": "room_set_view_enabled(index, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_set_viewport",
      "type": "key",
      "topics": [
        {
          "name": "room_set_viewport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_viewport.htm",
          "blurb": "With this function you can set the view port properties for any room in your game except the current one. You supply the room index to set the view port in, the view port index (from 0 to 7) and then whether the view port should be visible at the start of the room or not (set to true to make the port visible, and false otherwise). After that you set the x and y coordinate (corresponding to the top left position of the view port) and then the width and height in pixels.",
          "syntax": "room_set_viewport(rm, vind, vis, xport, yport, wport, hport)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_set_width",
      "type": "key",
      "topics": [
        {
          "name": "room_set_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_width.htm",
          "blurb": "With this function you can change (or set) the width of any room in your game except the current one.",
          "syntax": "room_set_width(index, w)"
        }
      ],
      "keys": []
    },
    {
      "name": "room_speed",
      "type": "key",
      "topics": [
        {
          "name": "room_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_speed.htm",
          "blurb": "This variable holds the running speed of all rooms (and the game) in game frames per second. Note that this is NOT the FPS (frames per second) but rather the number of game steps that GameMaker will try to maintain each second.",
          "syntax": "room_speed"
        }
      ],
      "keys": []
    },
    {
      "name": "room_width",
      "type": "key",
      "topics": [
        {
          "name": "room_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_width.htm",
          "blurb": "This variable holds the width of the current room in pixels. You can change this variable to change the width of the room at any time.",
          "syntax": "room_width"
        }
      ],
      "keys": []
    },
    {
      "name": "Rooms - Inheritance",
      "type": "key",
      "topics": [
        {
          "name": "Room Inheritance",
          "type": "topic",
          "url": "The_Asset_Editors/Room_Properties/Room_Inheritance.htm",
          "blurb": "An important feature of the room editor is inheritance. Inheritance means that you can create a \"parent\" room then from that create a \"child\" room which will inherit all the parent room's properties. This child room is essentially a clone of the parent, and everything in it is linked to the parent room. This means that if you change the view in the parent, or move a tile, or add instances, it will be reflected in the child room. Not only that, in the child room you can selectively switch off inheritance for specific layers, instances, assets or anything else that is required."
        }
      ],
      "keys": []
    },
    {
      "name": "Rooms - Layers",
      "type": "key",
      "topics": [
        {
          "name": "Layer Properties",
          "type": "topic",
          "url": "The_Asset_Editors/Room_Properties/Layer_Properties.htm",
          "blurb": "Everything that goes into the room you create in the Room Editor is placed on a layer. Layers can be added, removed, and sorted from the Layer Editor, and come in a variety of different types, each with their own set of options and way of working. You aren't limited to the number of each type of layer, and can have multiple tile layers, or path layers, or instance layers, etc... Each type of layer has its own properties window where you can set different things depending on the layer type. You can also toggle the layer's visibility, with invisible layers not being processed at runtime (but you can make them visible again at any time using the appropriate layer function)."
        }
      ],
      "keys": []
    },
    {
      "name": "Rooms - Room Settings",
      "type": "key",
      "topics": [
        {
          "name": "Room Properties",
          "type": "topic",
          "url": "The_Asset_Editors/Room_Properties/Room_Properties.htm",
          "blurb": "The Room Properties section is where you can set the inheritance toggle for the settings, change options such as persistency, the room's size and manage viewports. This is visible when you select a room asset in the Asset Browser."
        }
      ],
      "keys": []
    },
    {
      "name": "round",
      "type": "key",
      "topics": [
        {
          "name": "round",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/round.htm",
          "blurb": "Just as it says, round() takes a real number and rounds it up or down to the nearest integer. In the special case where the number supplied is exactly a half-integer (1.5, 17.5, -2.5, etc), the number will be rounded to the nearest even value, for example, 2.5 would be rounded to 2, while 3.5 will be rounded to 4. This type of rounding is called bankers rounding and over large numbers of iterations or when using floating point maths, it gives a statistically better rounding than the more traditional \"round up if over .5 and round down otherwise\" approach.",
          "syntax": "round(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "Runner Compiler Details",
      "type": "key",
      "topics": [
        {
          "name": "Runner & Compiler",
          "type": "topic",
          "url": "Settings/Runner_Details/Runner_Details.htm",
          "blurb": "This section contains details on the runner and compiler, and how you can interact with them in various ways; such as building and testing your game via the command line, adding command line parameters before running your game and executing batch files at various stages of compilation."
        }
      ],
      "keys": []
    },
    {
      "name": "Runner Errors",
      "type": "key",
      "topics": [
        {
          "name": "Runner Errors",
          "type": "topic",
          "url": "Additional_Information/Errors/Runner_Errors.htm",
          "blurb": "Even after syntax checking in the code editor and then having the compiler check your code for compiler errors, there are still occasions when something can go wrong. In most cases this will throw a Virtual Machine (VM) runner error (also called a runtime exception) which looks like this:"
        }
      ],
      "keys": []
    },
    {
      "name": "Runtime Errors",
      "type": "key",
      "topics": [
        {
          "name": "Runner Errors",
          "type": "topic",
          "url": "Additional_Information/Errors/Runner_Errors.htm",
          "blurb": "Even after syntax checking in the code editor and then having the compiler check your code for compiler errors, there are still occasions when something can go wrong. In most cases this will throw a Virtual Machine (VM) runner error (also called a runtime exception) which looks like this:"
        }
      ],
      "keys": []
    },
    {
      "name": "Runtime Functions",
      "type": "key",
      "topics": [
        {
          "name": "Runtime Functions",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Runtime_Functions.htm",
          "blurb": "The general definition of a function is something like this:"
        }
      ],
      "keys": []
    },
    {
      "name": "scheduler_resolution_get",
      "type": "key",
      "topics": [
        {
          "name": "scheduler_resolution_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/scheduler_resolution_get.htm",
          "blurb": "This function is used to retrieve the resolution of the Windows thread scheduler in milliseconds. If the scheduler's resolution is set to the default value (as set by Windows), the function will return -1.",
          "syntax": "scheduler_resolution_get()"
        }
      ],
      "keys": []
    },
    {
      "name": "scheduler_resolution_set",
      "type": "key",
      "topics": [
        {
          "name": "scheduler_resolution_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/scheduler_resolution_set.htm",
          "blurb": "This function is used to change the resolution of the Windows thread scheduler. The resolution value supplied in the argument needs to be in milliseconds.",
          "syntax": "scheduler_resolution_set(milliseconds)"
        }
      ],
      "keys": []
    },
    {
      "name": "score",
      "type": "key",
      "topics": [
        {
          "name": "score",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/score.htm",
          "blurb": "This variable is global in scope and is used to hold a numeric value which is usually used for the player score. This variable is only designed to support legacy projects from previous versions of GameMaker and should not be used in new projects as it may be deprecated in the future.",
          "syntax": "score"
        }
      ],
      "keys": []
    },
    {
      "name": "screen_save",
      "type": "key",
      "topics": [
        {
          "name": "screen_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/screen_save.htm",
          "blurb": "With this function you can save a screenshot of the game as it currently appears in the game window.",
          "syntax": "screen_save(fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "screen_save_part",
      "type": "key",
      "topics": [
        {
          "name": "screen_save_part",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/screen_save_part.htm",
          "blurb": "With this function you can save a screenshot of a part of the game as it currently appears in the game display. The selection coordinates are based on the absolute size of the display (or window if not fullscreen), so (0,0) is always the top left hand corner of the screen (or window). Below is an image that shows how this function works:",
          "syntax": "screen_save_part(fname,x,y,w,h)"
        }
      ],
      "keys": []
    },
    {
      "name": "Script Editor",
      "type": "key",
      "topics": [
        {
          "name": "Scripts",
          "type": "topic",
          "url": "The_Asset_Editors/Scripts.htm",
          "blurb": "This section deals with the script editor (also called the text editor) which is where you type in all the code that your game will require to run. This editor is used for creating custom script assets, as well as for coding object events, for adding room creation code, and for many other things."
        }
      ],
      "keys": []
    },
    {
      "name": "Script Functions And Variables",
      "type": "key",
      "topics": [
        {
          "name": "Script Functions And Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Script_Functions.htm",
          "blurb": "Script assets are essentially a collection of one or more user defined functions or variables that you write yourself as snippets of code in the Script Editor. The functions you define in a script can resolve expressions, return values or do anything else that the GameMaker Language permits, just like the built in runtime functions."
        }
      ],
      "keys": []
    },
    {
      "name": "Script Functions vs. Methods",
      "type": "key",
      "topics": [
        {
          "name": "Script Functions vs. Methods",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Script_Functions_vs_Methods.htm",
          "blurb": "This page covers essential information about using script functions vs. methods."
        }
      ],
      "keys": []
    },
    {
      "name": "script_execute",
      "type": "key",
      "topics": [
        {
          "name": "script_execute",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_execute.htm",
          "blurb": "This function was originally designed for calling script assets in a dynamic way, but with the introduction of user-defined functions it can now be used in two ways:",
          "syntax": "script_execute(scr, arg0, arg1, arg2..., etc...)"
        }
      ],
      "keys": []
    },
    {
      "name": "script_execute_ext",
      "type": "key",
      "topics": [
        {
          "name": "script_execute_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_execute_ext.htm",
          "blurb": "This function works similarly to the function script_execute() only you can supply an array that contains the arguments required for the function/script being called. You may also supply two optional arguments to the function to specify an offset into the array to get the arguments from, as well as the number of arguments to use from the array (this must be a maximum of array_length - offset). ",
          "syntax": "script_execute_ext(scr, array_args, [offset], [num_args])"
        }
      ],
      "keys": []
    },
    {
      "name": "script_exists",
      "type": "key",
      "topics": [
        {
          "name": "script_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_exists.htm",
          "blurb": "This function will return true or false depending on whether the script or script function with the given index exists. Note, that this is not a string, but rather the asset name which holds the unique index for each script (as it would appear in the IDE) or the named script function, as defined within the script asset (note that this will not work for method variables). For more information on scripts, see The Script Editor.",
          "syntax": "script_exists(scr)"
        }
      ],
      "keys": []
    },
    {
      "name": "script_get_name",
      "type": "key",
      "topics": [
        {
          "name": "script_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_get_name.htm",
          "blurb": "This function will return the name as a string of the specified script. This name is the one that has been specified for the script in the Asset Browser of the main GameMaker window. For more information about scripts, see The Script Editor.",
          "syntax": "script_get_name(scr)"
        }
      ],
      "keys": []
    },
    {
      "name": "Search Results",
      "type": "key",
      "topics": [
        {
          "name": "The Output Window",
          "type": "topic",
          "url": "Introduction/The_Output_Window.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "self",
      "type": "key",
      "topics": [
        {
          "name": "Instance Keywords",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Instance_Keywords.htm",
          "blurb": "To make certain things easier in GameMaker, you can use one of several instance keywords in your code (whether GML or GML Visual). These keywords are used primarily to identify instances - and in some cases structs - under different situations, and each one is explained in the text below."
        }
      ],
      "keys": []
    },
    {
      "name": "seq_dir_left",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_headdir",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_headdir.htm",
          "blurb": "With this function you can set the direction for the given sequence playhead. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions, and then give the playhead direction which should be one of the following constants:",
          "syntax": "layer_sequence_headdir(sequence_element_id, direction)"
        }
      ],
      "keys": []
    },
    {
      "name": "seq_dir_right",
      "type": "key",
      "topics": [
        {
          "name": "layer_sequence_headdir",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_headdir.htm",
          "blurb": "With this function you can set the direction for the given sequence playhead. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions, and then give the playhead direction which should be one of the following constants:",
          "syntax": "layer_sequence_headdir(sequence_element_id, direction)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_audio",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_bool",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_clipmask",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_clipmask_mask",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_clipmask_subject",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_colour",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_empty",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_graphic",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_group",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_instance",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_message",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_moment",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_real",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_sequence",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_spriteframes",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "seqtracktype_string",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "Sequence Instance Struct",
      "type": "key",
      "topics": [
        {
          "name": "The Sequence Instance Struct",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Instance_Struct.htm",
          "blurb": "A sequence, when placed in a room, is placed as an element on the layer, and this element contains a sequence instance. This sequence instance will have the following properties in its struct:"
        }
      ],
      "keys": []
    },
    {
      "name": "Sequence Keyframe Data Struct",
      "type": "key",
      "topics": [
        {
          "name": "The Keyframe Data Struct",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Keyframe_Data_Struct.htm",
          "blurb": "When you define a keyframe struct for a track, you need to also define the data that will be associated with it. This is comprised of different channels, where each channel is simply a Keyframe Data Struct. A channel can be given specific type of data depending on what type of track you are setting the keyframe data for."
        }
      ],
      "keys": []
    },
    {
      "name": "Sequence Keyframe Struct",
      "type": "key",
      "topics": [
        {
          "name": "The Keyframe Struct",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Keyframe_Struct.htm",
          "blurb": "Each track (as defined on the page covering track structs) will have one or more keyframe structs assigned to it (which you can get from the keyframes property of the track struct), and each one will have the following properties:"
        }
      ],
      "keys": []
    },
    {
      "name": "Sequence Object Struct",
      "type": "key",
      "topics": [
        {
          "name": "The Sequence Object Struct",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Object_Struct.htm",
          "blurb": "A Sequence Object Struct is the name given to the struct retrieved from a Sequence asset. All the data for a Sequence is stored in this struct at runtime, and is referenced by any elements of the Sequence that are created in a room. This means that if any variables in this struct (or inside any of its nested structs) are modified, the original Sequence will change (until the game is closed and re-opened) and any of its existing Sequence elements will be affected."
        }
      ],
      "keys": []
    },
    {
      "name": "Sequence Track Struct",
      "type": "key",
      "topics": [
        {
          "name": "The Track Struct",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
          "blurb": "The track struct can be used either for top-level asset tracks or for sub-track parameter tracks, and the behaviour of the track is defined by two things, its name and its type. Track structs are created using the function sequence_track_new() and can be retrieved from sequence assets using the activeTracks property from the Sequence Instance Struct or the tracks property from the Sequence Object Struct."
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_create",
      "type": "key",
      "topics": [
        {
          "name": "sequence_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_create.htm",
          "blurb": "With this function you can create a new sequence object which you can then add tracks to. The function returns a struct which you can then access to setup the new sequence you have created. The contents of this struct are detailed on this page. The sequence object struct can then be used to create instances of the sequence on a room layer using the function layer_sequence_create(). Note that when creating sequence objects in this way you should remove them again by calling the function sequence_destroy() when they are no longer required, otherwise you will have a memory leak which can slow down and eventually crash your game.",
          "syntax": "sequence_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_destroy",
      "type": "key",
      "topics": [
        {
          "name": "sequence_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_destroy.htm",
          "blurb": "With this function you can destroy a sequence object that has been created dynamically. You supply either the sequence object struct (as returned by the function sequence_create()) or the sequence ID (as returned by the function layer_sequence_get_sequence() or from the sequence instance struct property sequence). This function should be used whenever a dynamically created sequence is no longer required to free up the memory associated with it.",
          "syntax": "sequence_destroy(sequence_struct_or_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_exists",
      "type": "key",
      "topics": [
        {
          "name": "sequence_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_exists.htm",
          "blurb": "With this function you can check to see if a sequence object exists or not. You supply either the sequence object struct (as returned by the function sequence_create() or sequence_get()) or the sequence ID (as returned by the function layer_sequence_get_sequence() or from the sequence instance struct property sequence, or the index from the asset browser) and the function will return true if the sequence object exists or false if it does not.",
          "syntax": "sequence_exists(sequence_struct_or_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_get",
      "type": "key",
      "topics": [
        {
          "name": "sequence_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_get.htm",
          "blurb": "With this function you can retrieve the Sequence Object Struct from a sequence asset index. You supply the asset index for the sequence as defined in the asset browser, and the function will return the sequence object struct that can then be accessed, or -1 if the sequence doesn't exist or the asset index given is not a sequence.",
          "syntax": "sequence_get(sequence_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_get_objects",
      "type": "key",
      "topics": [
        {
          "name": "sequence_get_objects",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_get_objects.htm",
          "blurb": "With this function you can retrieve an array of all the object indices that have instances being created within the given sequence. You supply either the sequence object struct (as returned by the function sequence_create() or sequence_get()) or the sequence ID (as returned by the function layer_sequence_get_sequence() or from the sequence instance struct property sequence) and the function will return an array, where each item in the array is an object_index for the different objects being used by the sequence to create instances.",
          "syntax": "sequence_get_objects(sequence_struct_or_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_instance",
      "type": "key",
      "topics": [
        {
          "name": "sequence_instance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_instance.htm",
          "blurb": "This is a built-in variable that is part of the instance variables created for every object instance in your game. If the instance is being controlled by a sequence, this variable will hold the sequence instance struct for the Sequence controlling the instance, otherwise it will be undefined. This is a read-only variable and cannot be changed.",
          "syntax": "sequence_instance"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_instance_override_object",
      "type": "key",
      "topics": [
        {
          "name": "sequence_instance_override_object",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_instance_override_object.htm",
          "blurb": "With this function you can override (replace) all instances of an object used in a sequence with another one. You supply the sequence instance struct ID (as returned when the sequence instance was created in the room or by using one of the room layer functions - see here), as well as the object index (as defined in the asset browser) for the object that you want to override. Finally you give an object index or an instance ID to use as the object that is going to override the sequence (supplying an instance ID will simply use the object that the instance was created from as the override). Note that this can only be done on sequence instances (not sequence objects) and must be done before the sequence starts to play, otherwise it won't work.",
          "syntax": "sequence_instance_override_object(sequence_instance_struct, object_id, instance_or_object_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_keyframe_new",
      "type": "key",
      "topics": [
        {
          "name": "sequence_keyframe_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_keyframe_new.htm",
          "blurb": "With this function you can create a new track keyframe struct, supplying the type of track that the keyframe will be applied to. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_keyframe_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_keyframedata_new",
      "type": "key",
      "topics": [
        {
          "name": "sequence_keyframedata_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_keyframedata_new.htm",
          "blurb": "With this function you can create a new keyframe data struct, supplying the type of track that the keyframe data will be applied to. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_keyframedata_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "sequence_track_new",
      "type": "key",
      "topics": [
        {
          "name": "sequence_track_new",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm",
          "blurb": "With this function you can create a new sequence track struct, supplying the type of track that you wish to make. The type argument can be any one of the Sequence Track Type Constants listed on this page.",
          "syntax": "sequence_track_new(type)"
        }
      ],
      "keys": []
    },
    {
      "name": "Sequences",
      "type": "key",
      "topics": [
        {
          "name": "Text in Sequences",
          "type": "topic",
          "url": "The_Asset_Editors/Sequence_Properties/Text_in_Sequences.htm",
          "blurb": "Text tracks can be added to a Sequence through the editor. This is done by selecting the  Add a Text Track button from the Canvas Toolbox, and then clicking (and optionally dragging) in the Canvas to create a text track."
        }
      ],
      "keys": []
    },
    {
      "name": "Sequences - Animation Curves",
      "type": "key",
      "topics": [
        {
          "name": "Using Animation Curves",
          "type": "topic",
          "url": "The_Asset_Editors/Sequence_Properties/Using_Animation_Curves.htm",
          "blurb": "An important feature of the dope sheet is the ability to assign Animation Curves to parameter tracks within the sequence to create parameter curves instead of parameter keyframes. There are two types of curves that can be used for parameter tracks:"
        }
      ],
      "keys": []
    },
    {
      "name": "Sequences - Broadcast Messages",
      "type": "key",
      "topics": [
        {
          "name": "Broadcast Messages",
          "type": "topic",
          "url": "The_Asset_Editors/Sequence_Properties/Broadcast_Messages.htm",
          "blurb": "Both Sequences and Sprites can generate what are called broadcast messages at any point along their length. These messages are simple strings that are added to specific frames along the animation timeline, and when that point in the timeline is reached, then the string will be broadcast out to all instances that listen for it. Any instance that has a Broadcast Message Event (found in the \"Other\" event category) will receive the message string when it is reached in the timeline, at which point it's up to you to have some code that will parse it and react accordingly. Note too that sequences can also listen for broadcast messages, but this requires you to first set up the listener method using code (see the GML section on Sequence Events And Moments for more information)."
        }
      ],
      "keys": []
    },
    {
      "name": "Sequences - Clipping Masks",
      "type": "key",
      "topics": [
        {
          "name": "Clipping Masks",
          "type": "topic",
          "url": "The_Asset_Editors/Sequence_Properties/Clipping_Masks.htm",
          "blurb": "As mentioned in the Track Panel page, there is an action to create what is called a clipping mask group in the track editor. This is accessed by clicking on the  button at the bottom of the Track Panel:"
        }
      ],
      "keys": []
    },
    {
      "name": "Sequences - The Canvas",
      "type": "key",
      "topics": [
        {
          "name": "The Sequence Canvas",
          "type": "topic",
          "url": "The_Asset_Editors/Sequence_Properties/The_Sequence_Canvas.htm",
          "blurb": "When creating sequences for your projects a large part of the work will be done in the canvas of the Sequence Editor. The canvas is simply the area that will be used to contain the sequence elements, and it also defines what will be shown when the sequence is added to a room to be displayed. When you first create a sequence, the canvas will be set to the default size of 1366px by 768px, but this can be changed from the Toolbox by clicking the  beside the Canvas Frame Toggle  button:"
        }
      ],
      "keys": []
    },
    {
      "name": "Sequences - The Dope Sheet",
      "type": "key",
      "topics": [
        {
          "name": "Using The Dope Sheet",
          "type": "topic",
          "url": "The_Asset_Editors/Sequence_Properties/Using_The_Dope_Sheet.htm",
          "blurb": "The Dope Sheet is where the data from the different tracks added to the sequence is displayed over time, giving you not just an overview of each track, but also a means to edit the position of them as well as the timings for changes in parameters, etc..."
        }
      ],
      "keys": []
    },
    {
      "name": "Sequences - The Track Panel",
      "type": "key",
      "topics": [
        {
          "name": "The Track Panel",
          "type": "topic",
          "url": "The_Asset_Editors/Sequence_Properties/The_Track_Panel.htm",
          "blurb": "What your sequences do are governed by the assets and parameters that have been added to the Track Panel. You can add a track to the editor by either:"
        }
      ],
      "keys": []
    },
    {
      "name": "Sequences Editor",
      "type": "key",
      "topics": [
        {
          "name": "Sequences",
          "type": "topic",
          "url": "The_Asset_Editors/Sequences.htm",
          "blurb": ""
        }
      ],
      "keys": []
    },
    {
      "name": "Set Particle Speed",
      "type": "key",
      "topics": [
        {
          "name": "Set Particle Speed",
          "type": "topic",
          "url": "Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Speed.htm",
          "blurb": "This action is used to set the particle's movement speed, which can be static or set to increase / decrease over time. You supply the unique ID value for the type to set the size of (as returned when you created the type with the action Create Particle Type) and then give a range of initial starting speeds, then the increase amount and finally the \"wiggle\". The speed a particle is created at is calculated as pixels-per-game-frame, so a minimum setting of 2 and a maximum setting of 5 will emit particles moving at anywhere between 2 and 5 pixels-per-game-frame."
        }
      ],
      "keys": []
    },
    {
      "name": "sha1_file",
      "type": "key",
      "topics": [
        {
          "name": "sha1_file",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/sha1_file.htm",
          "blurb": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States National Security Agency and is employed in several widely used applications popular Git where it is used to check for file changes, and the protocols TLS and SSL, PGP, SSH, S/MIME, and IPsec. This function will take an input file and return a 160 bit message digest in ASCII format unique to that file to be used for integrity verification at any later date.",
          "syntax": "sha1_file(filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "sha1_string_unicode",
      "type": "key",
      "topics": [
        {
          "name": "sha1_string_unicode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/sha1_string_unicode.htm",
          "blurb": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States National Security Agency and is employed in several widely used applications and protocols like the popular Git where it is used to check for file changes. This function will take an input unicode string and returns a 160 bit message digest in ASCII format, for example:",
          "syntax": "sha1_string_unicode(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "sha1_string_utf8",
      "type": "key",
      "topics": [
        {
          "name": "sha1_string_utf8",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/sha1_string_utf8.htm",
          "blurb": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States National Security Agency and is employed in several widely used applications and protocols like the popular Git where it is used to check for file changes. This function will take an input UTF-8 string (which has a variable number of bytes per character) and returns a 160 bit message digest in ASCII format, for example:",
          "syntax": "sha1_string_utf8(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "Shader Editor",
      "type": "key",
      "topics": [
        {
          "name": "Shaders",
          "type": "topic",
          "url": "The_Asset_Editors/Shaders.htm",
          "blurb": "Shaders are a very powerful tool that can be used to manipulate the graphics that your game renders to the screen, permitting incredibly fast effects that can range from, for example, adding a subtle colour hue to a sprite, right up to full screen distortion effects. But what is a shader?"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_current",
      "type": "key",
      "topics": [
        {
          "name": "shader_current",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_current.htm",
          "blurb": "This function will return the index ID value of the shader currently being used for rendering, or it will return -1 if no shader is being used.",
          "syntax": "shader_current()"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_enable_corner_id",
      "type": "key",
      "topics": [
        {
          "name": "shader_enable_corner_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_enable_corner_id.htm",
          "blurb": "With this function you can set a global state for all shaders being used where, when enabled, the shader \"steals\" 2 bits from the input colour values. The first is from the lower bit of the red colour value, and the second is from the lower bit of the blue colour value. These values can get then be recovered in the shader to work out which vertex you are dealing with (ie: which corner).",
          "syntax": "shader_enable_corner_id(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_get_name",
      "type": "key",
      "topics": [
        {
          "name": "shader_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_name.htm",
          "blurb": "With this function you can retrieve the name of a shader resource. You supply the unique ID value for the shader to get the name of and the function will return the name of the resource as a string.",
          "syntax": "shader_get_name(shader)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_get_sampler_index",
      "type": "key",
      "topics": [
        {
          "name": "shader_get_sampler_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_sampler_index.htm",
          "blurb": "Since you cannot change the value of a shader sampler within the shader itself, you have to set it before calling the shader using one of the available uniform set functions. However, to be able to do that you must first call this function to get the \"handle\" of the shader sampler that you will want to set.",
          "syntax": "shader_get_sampler_index(shader, uniform)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_get_uniform",
      "type": "key",
      "topics": [
        {
          "name": "shader_get_uniform",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_uniform.htm",
          "blurb": "Since you cannot change the value of a shader constant within the shader itself, you have to set it before calling the shader using one of the available uniform set functions. However, to be able to do that you must first call this function to get the \"handle\" of the shader constant that you will want to change.",
          "syntax": "shader_get_uniform(shader, uniform)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_is_compiled",
      "type": "key",
      "topics": [
        {
          "name": "shader_is_compiled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_is_compiled.htm",
          "blurb": "This function will check a shader at run-time to make sure that it has been successfully compiled. If it has then the function returns true otherwise it returns false. This function should be used at the start of the game to make sure that the platform running your game has successfully compiled any shaders used (particularly on Windows where some computers may be using DX9 with Shader Level 2.0 and not a later version using shader level 3.0).",
          "syntax": "shader_is_compiled(shader)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_reset",
      "type": "key",
      "topics": [
        {
          "name": "shader_reset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_reset.htm",
          "blurb": "This function resets the shader used for drawing and should be called when you no longer wish to use the current shader (set using shader_set()).",
          "syntax": "shader_reset()"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_set",
      "type": "key",
      "topics": [
        {
          "name": "shader_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set.htm",
          "blurb": "With this function you can set the drawing target to the given shader and all further drawing will be done using that. You can end shader use with the function shader_reset().",
          "syntax": "shader_set(shader)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_set_uniform_f",
      "type": "key",
      "topics": [
        {
          "name": "shader_set_uniform_f",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_f.htm",
          "blurb": "With this function you can set the value (or values) of a shader constant. You must previously have gotten the \"handle\" of the constant using the function shader_get_uniform(), and you will have to know what type of constant it is to pass the correct number of floating point values through to it, ie: if you have a vec2 you will need to pass two values to the function.",
          "syntax": "shader_set_uniform_f(handle, value1 [, value2, value3, value4])"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_set_uniform_f_array",
      "type": "key",
      "topics": [
        {
          "name": "shader_set_uniform_f_array",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_f_array.htm",
          "blurb": "With this function you can set a shader constant to hold an array of values. You must previously have gotten the \"handle\" of the constant using the function shader_get_uniform(), and you will have to have previously initialised the array.",
          "syntax": "shader_set_uniform_f_array(handle, array)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_set_uniform_i",
      "type": "key",
      "topics": [
        {
          "name": "shader_set_uniform_i",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_i.htm",
          "blurb": "With this function you can set the value (or values) of a shader constant. You must previously have gotten the \"handle\" of the constant using the function shader_get_uniform(), and you will have to know what type of constant it is to pass the correct number of integer values through to it, ie: if you have a vec2 you will need to pass two values to the function.",
          "syntax": "shader_set_uniform_i(handle, value1 [, value2, value3, value4])"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_set_uniform_i_array",
      "type": "key",
      "topics": [
        {
          "name": "shader_set_uniform_i_array",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_i_array.htm",
          "blurb": "With this function you can set a shader constant to hold an array of values. You must previously have gotten the \"handle\" of the constant using the function shader_get_uniform(), and you will have to have previously initialised the array.",
          "syntax": "shader_set_uniform_i_array(handle, array)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_set_uniform_matrix",
      "type": "key",
      "topics": [
        {
          "name": "shader_set_uniform_matrix",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_matrix.htm",
          "blurb": "With this function you can set the value (or values) of a shader constant to the current transform matrix (as set using the Matrix Functions). You must previously have gotten the \"handle\" of the constant using the function shader_get_uniform().",
          "syntax": "shader_set_uniform_matrix(handle)"
        }
      ],
      "keys": []
    },
    {
      "name": "shader_set_uniform_matrix_array",
      "type": "key",
      "topics": [
        {
          "name": "shader_set_uniform_matrix_array",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_matrix_array.htm",
          "blurb": "With this function you can set a shader constant to hold an array of matrix values. You must previously have gotten the \"handle\" of the constant using the function shader_get_uniform(), and you will have to have previously initialised the array as an array of floating point values, where each successive group of 16 floats is a 4x4 matrix.",
          "syntax": "shader_set_uniform_matrix_array(handle, array)"
        }
      ],
      "keys": []
    },
    {
      "name": "shaders_are_supported",
      "type": "key",
      "topics": [
        {
          "name": "shaders_are_supported",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Shaders/shaders_are_supported.htm",
          "blurb": "This function will do a check to see if the chosen target platform supports shaders, returning true if they do, and false if they do not. It is important to note that on Android, if the project does not have any shader resources defined, then the function will always return false, regardless of whether the device supports shaders or not.",
          "syntax": "shaders_are_supported()"
        }
      ],
      "keys": []
    },
    {
      "name": "shop_leave_rating",
      "type": "key",
      "topics": [
        {
          "name": "shop_leave_rating",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/shop_leave_rating.htm",
          "blurb": "This function opens up an OS dependent dialog where you can ask the user to post a rating or comment to a particular page. You can define the text that is to appear in the dialogue, as well as the text you wish to appear on the two buttons and the URL where the comment has to be posted.",
          "syntax": "shop_leave_rating(text, yes_string, no_string, url)"
        }
      ],
      "keys": []
    },
    {
      "name": "Shortcuts",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Shortcuts",
          "type": "topic",
          "url": "IDE_Navigation/Keyboard_Shortcuts.htm",
          "blurb": "There are a huge number of keyboard shortcuts available for GameMaker, and although most of them are marked in the IDE beside the menu items that they relate too, not all of them are or are obvious to the user at the start. Here you can find a complete list of all the keyboard shortcuts for an easy reference guide. In general, shortcuts fall into the following three categories:"
        }
      ],
      "keys": []
    },
    {
      "name": "show_debug_message",
      "type": "key",
      "topics": [
        {
          "name": "show_debug_message",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/show_debug_message.htm",
          "blurb": "This function will create a custom debug message that is shown in the compiler window at runtime. Note that the message can be either a string or a real number, but if you need both then the number will have to be converted to string first using the string() function (see the example below) and that if the number has more than two decimal places then you should use string_format() to show them as by default decimals are rounded to the nearest two decimal places (so \"1.2468\" would show as \"1.25\" in the output window).",
          "syntax": "show_debug_message(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "show_debug_overlay",
      "type": "key",
      "topics": [
        {
          "name": "show_debug_overlay",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm",
          "blurb": "This function can be used to switch on and off the standard debug overlay when testing your game and is disabled by default. The debug overlay shows a graphic CPU/GPU usage bar in the actual game window itself along with the current real fps value, number of texture swaps and the number of vertex batches (note that texture swaps and vertex batches will never be zero and will normally show values of 2 or 3, since even with an empty room an no objects GameMaker still has to draw and batch things).",
          "syntax": "show_debug_overlay(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "show_error",
      "type": "key",
      "topics": [
        {
          "name": "show_error",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/show_error.htm",
          "blurb": "This function will show a custom string as an error message.",
          "syntax": "show_error(str, abort)"
        }
      ],
      "keys": []
    },
    {
      "name": "show_message",
      "type": "key",
      "topics": [
        {
          "name": "show_message",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/show_message.htm",
          "blurb": "This function creates a pop-up message box which displays the given string and a button marked \"Ok\" to close it.",
          "syntax": "show_message(str)"
        }
      ],
      "keys": []
    },
    {
      "name": "show_message_async",
      "type": "key",
      "topics": [
        {
          "name": "show_message_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/show_message_async.htm",
          "blurb": "This function opens a window and displays the message you define in the function to the user. This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has pressed the \"Okay\" button, an asynchronous Dialog event is triggered which, for the duration of that event only, will have a ds_map stored in the variable async_load.",
          "syntax": "show_message_async(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "show_question",
      "type": "key",
      "topics": [
        {
          "name": "show_question",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Debugging/show_question.htm",
          "blurb": "This function creates a pop-up message box with two buttons for \"Yes\" and \"No\". It returns true or false depending on which one of the two buttons the user presses.",
          "syntax": "show_question(str)"
        }
      ],
      "keys": []
    },
    {
      "name": "show_question_async",
      "type": "key",
      "topics": [
        {
          "name": "show_question_async",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/show_question_async.htm",
          "blurb": "This function opens a window and displays the question you define in the function to the user. This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. The function has two buttons that show \"Yes\" and \"No\", and once the user has pressed one, an asynchronous Dialog event is triggered which, for the duration of that event only, will have a DS map stored in the variable async_load.",
          "syntax": "show_question_async(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "sign",
      "type": "key",
      "topics": [
        {
          "name": "sign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/sign.htm",
          "blurb": "This function returns whether a number is positive, negative or neither and returns 1, -1, 0 respectively. For example - sign(458) will return 1, sign(-5) will return -1 and sign(0) will return 0.",
          "syntax": "sign(n)"
        }
      ],
      "keys": []
    },
    {
      "name": "sin",
      "type": "key",
      "topics": [
        {
          "name": "sin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/sin.htm",
          "blurb": "In a right angled triangle sin(val) = Opposite / Hypotenuse where val is one of the three angles.",
          "syntax": "sin(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_clear",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_clear.htm",
          "blurb": "This function will clear the specified animation track of all animations, ready to be re-assigned.",
          "syntax": "skeleton_animation_clear(track)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_get",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get.htm",
          "blurb": "With this function you can get the current animation set being used by your skeletal animation sprite. The return value is a string, which will be the name of the set as you defined it in your skeletal animation program.",
          "syntax": "skeleton_animation_get()"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_get_duration",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_get_duration",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_duration.htm",
          "blurb": "This function will return the time required for the given animation set to run before looping back to the beginning. The return value is in seconds.",
          "syntax": "skeleton_animation_get_duration(animname)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_get_event_frames",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_get_event_frames",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_event_frames.htm",
          "blurb": "This function can be used to retrieve all the frames for the given event, in the given animation. You supply the skeleton animation name (as a string, as defined in the program used to make the animation, or as returned by using the function skeleton_animation_get()) and an event name. The function returns an array with the frames for that event.",
          "syntax": "skeleton_animation_get_event_frames(anim_name, event_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_get_ext",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_get_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_ext.htm",
          "blurb": "A single skeletal animation sprite can have various animation sets, and these sets can be assigned different tracks so that you can \"mix and match\" animation sets. This function will return the name of the animation set currently used by the given track number (as set by the function skeleton_animation_set_ext).",
          "syntax": "skeleton_animation_get_ext(track)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_get_frame",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_get_frame",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_frame.htm",
          "blurb": "This function will return the frame number of the animation on the specified animation track. The function will return -1 if no animation is assigned to the specific track given.",
          "syntax": "skeleton_animation_get_frame(track)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_get_frames",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_get_frames",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_frames.htm",
          "blurb": "This function can be used to retrieve the number of frames that any given skeleton animation has. You supply the skeleton animation name (as a string, as defined in the program used to make the animation, or as returned by using the function skeleton_animation_get()) and the function returns the frames that it has as an integer value. The function will return 0 if the specified animation does not exist.",
          "syntax": "skeleton_animation_get_frames(anim_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_get_position",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_get_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_position.htm",
          "blurb": "This function will return the position of the animation on the specified animation track as a value ranging from 0 to 1. This way you can get the track position as a percentage where the value 0 corresponds to 0% and the value 1 to 100%.",
          "syntax": "skeleton_animation_get_position(track)"
        },
        {
          "name": "skeleton_animation_set_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_set_position.htm",
          "blurb": "This function will set the animation assigned to the given track to the position you supply. The position should be a real value between 0 and 1. If you supply a value outside of this range, then the track position will be set to the fractional part of that value. Suppose you use a value of 0.4, a value of 1.4, a value of 2.4, ... These will all set the position to 0.4.",
          "syntax": "skeleton_animation_set_position(track, position)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_is_finished",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_is_finished",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_is_finished.htm",
          "blurb": "With this function you can check if the current non-looping skeletal animation has finished playing on the given track.",
          "syntax": "skeleton_animation_is_finished(track)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_is_looping",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_is_looping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_is_looping.htm",
          "blurb": "With this function you can check if the current animation on the given track is set to loop.",
          "syntax": "skeleton_animation_is_looping(track)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_list",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_list.htm",
          "blurb": "With this function you can populate a (pre-created) DS list with all the names of the animations included as part of the skeletal animation sprite. The names will be strings and can then be used in the other animation functions for these types of sprite.",
          "syntax": "skeleton_animation_list(sprite, list)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_mix",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_mix",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_mix.htm",
          "blurb": "You can switch animation sets easily using the skeleton_animation_set() function, but this may cause a skip or stutter as one animation is swapped for another. To prevent this, you can set the mix value between two animation sets and the sprite will interpolate between them. Normally you would want to do this in the Create Event of the instance with the skeletal animation as it only needs set once, and GameMaker will interpolate all further changes to the sprite using the animation sets in that instance. Note that the duration value is from 0 to 1, where a value of 0.5 would have a \"half and half\" interpolation from one set to the other.",
          "syntax": "skeleton_animation_mix(animfrom, animto, duration)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_set",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_set.htm",
          "blurb": "Once you have assigned a skeletal animation sprite to your instance, you can then define which animation set it should use at any given time with this function. When you created your sprite (in Spine) you will have defined multiple animations sets for different states and named each of them appropriately. These names are what you will use to tell GameMaker which animation set to use at any time in your game. For example, if your sprite is for a platform game, then you may have a \"jump\" set, a \"run\" set and an \"idle\" set all contained within the one sprite and you can switch between them in your game using this function. The animation plays looped, which is the default.",
          "syntax": "skeleton_animation_set(animname, [loop])"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_set_ext",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_set_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_set_ext.htm",
          "blurb": "When you set an animation set for your skeletal animation sprite, it is assigned track 0 internally. However, you can assign further sets to further tracks (1 and above) and in this way have your sprite play two (or more) animations at the same time. Note that the sprite should have been designed in your animation program with this in mind, such that the \"base\" animation in track 0 only has keyframes for certain bones, while the next tracks have keyframes for the others. For example, if you have a \"walk\" animation and its keyframes only affect the legs of the sprite, you can then have a set of head animations and arm animations which you can set in tracks 1 and 2 respectively, permitting you to have a base movement and adapt on it in real-time while the game is being played. The animation plays looped, which is the default.",
          "syntax": "skeleton_animation_set_ext(animname, track, [loop])"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_animation_set_frame",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_animation_set_frame",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_set_frame.htm",
          "blurb": "This function will set the animation assigned to the given track to the frame you supply. The frame index should be an real value between 0 and the number of frames for the animation (which you can get using the function skeleton_animation_get_frames). If you supply a value outside of this range, the animation will be looped to make up the difference, for example if the animation has 5 frames and you set the frame to 8, the actual frame shown will be 3.",
          "syntax": "skeleton_animation_set_frame(track, index)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_attachment_create",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_attachment_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_create.htm",
          "blurb": "When you create you skeletal animation sprite, you can assign attachment slots and attachments to go in them. These are simply images that are apart from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires that you give the attachment a name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.",
          "syntax": "skeleton_attachment_create(name, sprite, ind, xorigin, yorigin, xscale, yscale, rot)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_attachment_create_color",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_attachment_create_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_create_colour.htm",
          "blurb": "When you create you skeletal animation sprite, you can assign attachment slots and attachments to go in them. These are simply images (sprites) that are separate from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires that you give the attachment a name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached, as well as the colour to be blended with the image and it's alpha (transparency) value. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.",
          "syntax": "skeleton_attachment_create_colour(name, sprite, ind, xorigin, yorigin, xscale, yscale, rot, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_attachment_create_colour",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_attachment_create_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_create_colour.htm",
          "blurb": "When you create you skeletal animation sprite, you can assign attachment slots and attachments to go in them. These are simply images (sprites) that are separate from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires that you give the attachment a name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached, as well as the colour to be blended with the image and it's alpha (transparency) value. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.",
          "syntax": "skeleton_attachment_create_colour(name, sprite, ind, xorigin, yorigin, xscale, yscale, rot, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_attachment_get",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_attachment_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_get.htm",
          "blurb": "A skeletal animation sprite may have other sprites added as attachments, with these sprites being added to a named slot (the name is given when you create the attachment slot in your animation program) and they will be drawn along with the animation of the current sprite. With this function you can get the name (as a string) of the attachment for the given slot of the currently assigned sprite. Note that attached sprites are referenced through their name string as assigned in Spine, or when you called skeleton_attachment_create().",
          "syntax": "skeleton_attachment_get(slot)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_attachment_set",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_attachment_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_set.htm",
          "blurb": "A skeletal animation sprite may have other images added as attachments, with these images being added to a named slot (the name is given when you create the attachment slot in your animation program) and they will be drawn along with the animation of the current sprite. With this function you can set an attachment to a given slot, where you are required to give the names (as strings) of the slot and the attachment. These names are defined by the animation program used, or (in the case of the attachment) when you call skeleton_attachment_create().",
          "syntax": "skeleton_attachment_set(slot, attachment)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_bone_data_get",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_bone_data_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_data_get.htm",
          "blurb": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program. This function can be used to get information on the named bone at any time and store the data in an empty DS map, which you must have created previously. Note that this data refers to the default pose for the skeleton, and not the current pose that is being drawn. If you need the data from the current pose, use skeleton_bone_state_get().",
          "syntax": "skeleton_bone_data_get(bone, map)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_bone_data_set",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_bone_data_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_data_set.htm",
          "blurb": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to set certain data for the named bone at any time. Note that this data refers to the default pose for the skeleton, and not the current pose that is being drawn (for that use the function skeleton_bone_state_set()), and must be set from a previously created DS map, which should have the following keys and their equivalent values:",
          "syntax": "skeleton_bone_data_set(bone, map)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_bone_list",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_bone_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_list.htm",
          "blurb": "With this function you can populate a (pre-created) DS list with all the names of the bones used as part of the skeletal animation sprite. The names will be strings and can then be used in the other skeleton animation bone functions for these types of sprite.",
          "syntax": "skeleton_bone_list(sprite, list)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_bone_state_get",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_bone_state_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_state_get.htm",
          "blurb": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to get certain data for the named bone at any time. Note that this data refers to the current pose for the skeleton, depending on the animation set used, and the function requires a previously created DS map, which will then have the following keys and their equivalent values after calling the function:",
          "syntax": "skeleton_bone_state_get(bone, map)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_bone_state_set",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_bone_state_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_state_set.htm",
          "blurb": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to set certain data for the named bone at any time. Note that this data will set the current pose for the skeleton, depending on the animation set used, and the function requires a previously created DS map, which should have the following keys and their required values:",
          "syntax": "skeleton_bone_state_set(bone, map)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_collision_draw_set",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_collision_draw_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/skeleton_collision_draw_set.htm",
          "blurb": "With this function, you can toggle on (true) or off (false) drawing the collision data for the current skeletal animation sprite being used by the instance. If this is switched on, the bounding box and the precise collision mask will be drawn as outlines around the sprite.",
          "syntax": "skeleton_collision_draw_set(flag)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_find_slot",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_find_slot",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_find_slot.htm",
          "blurb": "With this function you can find which slots are at a specified room-space position in the Spine sprite associated with the current instance. You create a DS list and supply its ID along with an x/y position to check and the list will be populated with name string for each of the available attachment slots for the sprite (including any attachment modifications). Note that the list is always sorted in descending order starting from the top-most slot.",
          "syntax": "skeleton_find_slot(x, y, list)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_get_bounds",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_get_bounds",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/skeleton_get_bounds.htm",
          "blurb": "This function will return an array of values associated with any given bounding box for the currently assigned skeleton animation sprite. You supply the index number for the bounding box to get the details of (you can retrieve the total number of bounding boxes for the sprite using the function skeleton_get_num_bounds()) and the function will return an array with the following elements:",
          "syntax": "skeleton_get_bounds(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_get_minmax",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_get_minmax",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/skeleton_get_minmax.htm",
          "blurb": "This function will return an array with the total bounding box value for all the individual bounding boxes assigned to a skeleton animation sprite. The returned array will have 4 elements:",
          "syntax": "skeleton_get_minmax()"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_get_num_bounds",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_get_num_bounds",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/skeleton_get_num_bounds.htm",
          "blurb": "This function will return the number of bounding boxes associated with the skeleton animation sprite assigned to the instance running the code. This can then be used along with the function skeleton_get_bounds() to retrieve data about each of the bounding boxes.",
          "syntax": "skeleton_get_num_bounds()"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_skin_create",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_skin_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skins/skeleton_skin_create.htm",
          "blurb": "This function creates a new runtime skin for skeletal animation sprites through code.",
          "syntax": "skeleton_skin_create(name, skins)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_skin_get",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_skin_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skins/skeleton_skin_get.htm",
          "blurb": "With skeletal animation sprites, you can assign separate textures (called \"skins\") to the animation, thereby using one animation for multiple different things. This function will return the name of the skin (as a string) that is currently assigned to the skeletal animation sprite your instance is using. The name returned is that which you set when you created the sprite in your animation program.",
          "syntax": "skeleton_skin_get()"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_skin_list",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_skin_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skins/skeleton_skin_list.htm",
          "blurb": "With this function you can populate a (pre-created) DS list with all the names of the skins included as part of the skeletal animation sprite. The names will be strings and can then be used in the other skeleton animation skin functions for these types of sprite.",
          "syntax": "skeleton_skin_list(sprite, list)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_skin_set",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_skin_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skins/skeleton_skin_set.htm",
          "blurb": "This function sets the skin used to draw a skeletal animation sprite.",
          "syntax": "skeleton_skin_set(skin)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_slot_alpha_get",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_slot_alpha_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_alpha_get.htm",
          "blurb": "With this function you can get an attachment slot alpha value. You supply the slot name (a string) and the function will return an real value for the alpha between 0 and 1.",
          "syntax": "skeleton_slot_alpha_get(slot)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_slot_colour_get",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_slot_colour_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_colour_get.htm",
          "blurb": "With this function you can get an attachment slot colour. You supply the slot name (a string) and the function will return an integer value for the colour.",
          "syntax": "skeleton_slot_colour_get(slot)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_slot_colour_set",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_slot_colour_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_colour_set.htm",
          "blurb": "With this function you can set an attachment slot colour and alpha so all sprites attached to it will be drawn with these blend values. Keep in mind that the instance sprite can have a blend colour and alpha setting (image_blend and image_alpha), as can the attachment (see the function skeleton_attachment_create_colour()), and so the final colour and alpha that the assigned attachment sprite for the slot will have will be a composite of all these values.",
          "syntax": "skeleton_slot_colour_set(slot, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_slot_data",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_slot_data",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_data.htm",
          "blurb": "With this function you can populate a (pre-created) DS list with data for each of the available attachment slots that an animation contains. This data is returned in the forum of a DS map which contains the following key/value pairs:",
          "syntax": "skeleton_slot_data(sprite, list)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_slot_data_instance",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_slot_data_instance",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_data_instance.htm",
          "blurb": "With this function you can populate a (pre-created) DS list with data for each of the available attachment slots for the Spine sprite associated with the current instance (including any attachment modifications). This data is returned in the forum of a DS map which contains the following key/value pairs:",
          "syntax": "skeleton_slot_data_instance(list)"
        }
      ],
      "keys": []
    },
    {
      "name": "skeleton_slot_list",
      "type": "key",
      "topics": [
        {
          "name": "skeleton_slot_list",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_list.htm",
          "blurb": "With this function you can populate a (pre-created) DS list with all the names of the slots created as part of the skeletal animation sprite. The names will be strings and can then be used in the other skeleton animation slot functions for these types of sprite.",
          "syntax": "skeleton_slot_list(sprite, list)"
        }
      ],
      "keys": []
    },
    {
      "name": "solid",
      "type": "key",
      "topics": [
        {
          "name": "solid",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/solid.htm",
          "blurb": "An instance can be flagged as solid through the object properties in the Object Editor, or by changing the value of this built-in variable. If solid is set to true then, when a collision is detected, the colliding instance is returned automatically to the position it was at in the step previous to the collision (and then any code or actions are run in the collision event). If it is set to false, all positioning must be dealt with through the collision event.",
          "syntax": "solid"
        }
      ],
      "keys": []
    },
    {
      "name": "Sound Editor",
      "type": "key",
      "topics": [
        {
          "name": "Sounds",
          "type": "topic",
          "url": "The_Asset_Editors/Sounds.htm",
          "blurb": "The Sound Editor is where you can load sounds into a new audio resource as well as set its properties. To load a sound, press the Load Sound button to the right of the sound name. A file selector dialogue pops up in which you can select the sound file. This be either a WAV, an MP3 file or an OGG file. In general *.wav are used for the short sound effects as even though they are generally larger files they will play instantaneously due to the fact that they do not need any type of decoding for playing. *.mp3 or *.ogg format files should be used for background music or for sound effects that are longer or larger in size. These files are much smaller than a wave file would be but have a small CPU overhead as they have to be decoded before being played."
        }
      ],
      "keys": []
    },
    {
      "name": "Sound Mixer",
      "type": "key",
      "topics": [
        {
          "name": "Sound Mixer",
          "type": "topic",
          "url": "IDE_Tools/Sound_Mixer.htm",
          "blurb": "While creating any project it can be useful to check and set volumes of groups of sounds together, so that you can be sure that in-game they all sound correct. This can be tricky when you have to open each individual sound editor within the workspace, and so GameMaker permits you to open a Sound Mixer window where you can play multiple sounds all from the same place and tweak their volume levels accordingly. This window can be opened from the Sound Editor (which will add that selected sound to the mixer view) or from the Tools Menu."
        }
      ],
      "keys": []
    },
    {
      "name": "Source Control",
      "type": "key",
      "topics": [
        {
          "name": "Source Control",
          "type": "topic",
          "url": "IDE_Tools/Source_Control.htm",
          "blurb": "Source Control Management (SCM) is the name given to the method of working with sub-versions or backups of your projects through a repository and local source. Basically, an SCM solution is an independent software package which controls all the aspects of maintaining, changing and comparing versions of your project as you work on it. This is especially useful to those that work in a team and need to be able to control who does what and not worry about losing data or making changes that may need to be undone at a later date, but individuals can benefit from this powerful yet flexible system too."
        }
      ],
      "keys": []
    },
    {
      "name": "Source Control - Cloning A Repository",
      "type": "key",
      "topics": [
        {
          "name": "Cloning A Repository",
          "type": "topic",
          "url": "IDE_Tools/Source_Control/Cloning_A_Repository.htm",
          "blurb": "When your project is stored in an external repository, you need to remember to both push your changes and pull any new ones. The reason for this is that when you commit, you store your changes locally, which allows you to work away from an internet connection and sync up when you're ready, and to sync up you push your changes to the remote repository. Pulling changes means that you want to pull any changes that others have made from the remote repository into your local repository. However, this means that there may be times when people can be editing the same files, which in turn creates a merge conflict. You need to know how to handle these conflicts so we're going to deliberately create one now and then show you how to deal with it."
        }
      ],
      "keys": []
    },
    {
      "name": "Source Control - Conflicts",
      "type": "key",
      "topics": [
        {
          "name": "Conflicts",
          "type": "topic",
          "url": "IDE_Tools/Source_Control/Conflicts.htm",
          "blurb": "In this section we are going to look at resolving conflicts between a cloned local repository and a master repository. Assuming you are now using a local repository we'll need to edit a file and then cause some kind of conflict, so open the test script we've been using and change the \"Hello World\" message to something like this:"
        }
      ],
      "keys": []
    },
    {
      "name": "Source Control - Esternal Merge/Dif Tools",
      "type": "key",
      "topics": [
        {
          "name": "External Merge/Diff Tools",
          "type": "topic",
          "url": "IDE_Tools/Source_Control/External_Merge_Diff_Tools.htm",
          "blurb": "When you work on a project with other people, there's always a chance there could be a conflict, as multiple people edit the same file and most source control systems can make a good attempt at merging any conflicted files, but when there are changes in the same place, it requires a bit of help to know what to do – this is where a merge tool comes in to show you the changes, and let you decide."
        }
      ],
      "keys": []
    },
    {
      "name": "Source Control - Repository Options",
      "type": "key",
      "topics": [
        {
          "name": "Repository Options",
          "type": "topic",
          "url": "IDE_Tools/Source_Control/Repository_Options.htm",
          "blurb": "Having set up the Git executable and enabled Source Control for you project, you now need to link the GameMaker IDE to a repository, which is done in one of two ways:"
        }
      ],
      "keys": []
    },
    {
      "name": "Source Control - Reverting Files",
      "type": "key",
      "topics": [
        {
          "name": "Reverting Files",
          "type": "topic",
          "url": "IDE_Tools/Source_Control/Reverting_Files.htm",
          "blurb": "In the previous sections you've seen how to create a repository and commit things to it, but what happens if you make a mistake and want to \"roll back\" to a previous commit? Let's make a deliberate error and see how we can deal with it then..."
        }
      ],
      "keys": []
    },
    {
      "name": "Source Control - Setting Up GIT Plugin",
      "type": "key",
      "topics": [
        {
          "name": "Setting Up The Git Plugin",
          "type": "topic",
          "url": "IDE_Tools/Source_Control/Setting_Up_Git_Plugin.htm",
          "blurb": "Before we can use the Git plugin, we need to set up the Git executable to use by going into the Plugins - Source Control (Git) section of the Preferences:"
        }
      ],
      "keys": []
    },
    {
      "name": "Source Control - Workflow",
      "type": "key",
      "topics": [
        {
          "name": "Standard Workflow",
          "type": "topic",
          "url": "IDE_Tools/Source_Control/Standard_Workflow.htm",
          "blurb": "As you work on your project, you will naturally create sprites, edit scripts, delete timelines, and whatever else is required as your project develops over time. These are all actions which you may want to keep track of and get back should something go wrong. This is the main reason to use Source Control - so that any accidents can be reverted - and we will quickly take you through the basic workflow from start so you understand how this works."
        }
      ],
      "keys": []
    },
    {
      "name": "Source Extension Examples",
      "type": "key",
      "topics": [
        {
          "name": "Source Examples",
          "type": "topic",
          "url": "The_Asset_Editors/Extension_Creation/Extended_Examples.htm",
          "blurb": "This page contains examples and information on extension source code for Android and iOS, to help you create your own native extensions for those platforms."
        }
      ],
      "keys": []
    },
    {
      "name": "speed",
      "type": "key",
      "topics": [
        {
          "name": "speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm",
          "blurb": "All instances in GameMaker have certain \"built in\" properties that you can use and set to govern how they look and behave. speed is one of those properties and defines how many pixels the instance will move every step. Unlike hspeed and vspeed, speed has no direction associated with it as this is governed by the direction value of the instance, but it\ncan have a negative value, in which case the instance will travel in the opposite direction to that set by the direction function (ie: direction - 180°). Note that setting the speed and/or the direction,\nwill also modify the values of the hspeed and vspeed variables, and that gravity, gravity_direction and friction can all modify the value of this variable when they are used in your games.",
          "syntax": "speed"
        }
      ],
      "keys": []
    },
    {
      "name": "Spine",
      "type": "key",
      "topics": [
        {
          "name": "Non-Bitmap Sprites",
          "type": "topic",
          "url": "Settings/Texture_Information/Non-Bitmap_Sprites.htm",
          "blurb": "GameMaker has support for non-bitmap sprites in the form of vector SWF files or Spine Skeletal Animation files. Both these formats have their pros and cons, and the two sections below explain how to import them into the Sprite Editor as well as a bit of information about how they are drawn."
        }
      ],
      "keys": []
    },
    {
      "name": "Sprite Editor",
      "type": "key",
      "topics": [
        {
          "name": "Nine Slice",
          "type": "topic",
          "url": "The_Asset_Editors/Sprite_Properties/Nine_Slices.htm",
          "blurb": "Nine Slicing (also known as 9-slicing) is a technique used to scale rectangular images for preserving details, making them retain their original form after scaling."
        },
        {
          "name": "Sprites",
          "type": "topic",
          "url": "The_Asset_Editors/Sprites.htm",
          "blurb": "The Sprite Editor is where you set the general properties for sprites that you make. You can open this window by creating a new sprite (right-click  on the Asset Browser and select \"Create Sprite\"), by double-clicking  on an existing sprite or by right-clicking  an existing sprite and selecting \"Properties\"."
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_add",
      "type": "key",
      "topics": [
        {
          "name": "sprite_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add.htm",
          "blurb": "With this function you can add an image as a sprite, loading it from an external source where the image file to be loaded should always be in either *.png, *.gif, *.jpg/jpeg or *.json format (*json files are used for loading skeleton animation sprites made with Spine). The function returns the new sprite index which must then be used in all further code that relates to the sprite. If you use this function with HTML5 or are getting an image from a URL, this function will also generate an Image Loaded asynchronous event. See this page for more information.",
          "syntax": "sprite_add(fname, imgnumb, removeback, smooth, xorig, yorig)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_add_from_surface",
      "type": "key",
      "topics": [
        {
          "name": "sprite_add_from_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add_from_surface.htm",
          "blurb": "This function works in exactly the same way as sprite_create_from_surface() only instead of creating a new sprite from the area of the indexed surface that you select, it adds the defined area of the surface as a new sub-image to a previously created sprite (this means that you cannot add it directly to a sprite from the resource tree, but rather only to one previously created from a surface, or one that has been duplicated from a resource sprite using sprite_duplicate()).",
          "syntax": "sprite_add_from_surface(index, surface, x, y, w, h, removeback, smooth)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_assign",
      "type": "key",
      "topics": [
        {
          "name": "sprite_assign",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_assign.htm",
          "blurb": "This function takes two previously created (or included) sprite indexes, and copies the image from one to the other. In this way you can copy (or \"clone\") one sprite into another index. Note that you cannot copy to a game resource. You have to have created the sprite to be copied to previously using the sprite_add() or sprite_duplicate() functions.",
          "syntax": "sprite_assign(index, sprite)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_collision_mask",
      "type": "key",
      "topics": [
        {
          "name": "sprite_collision_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_collision_mask.htm",
          "blurb": "With this function you can set the properties of the collision mask that a sprite should have. If you select either automatic (0) or full image (1) as the bounding box mode then the individual bounding box values can be set to 0. However for a user defined mask (2) you will have to set these values. The different bounding box values are always relative to the top left corner of the sprite (irrespective of the x and y origin) which is considered position (0, 0).",
          "syntax": "sprite_collision_mask(ind, sepmasks, bboxmode, bbleft, bbtop, bbright, bbbottom, kind, tolerance)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_create_from_surface",
      "type": "key",
      "topics": [
        {
          "name": "sprite_create_from_surface",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_create_from_surface.htm",
          "blurb": "With this function you can create a sprite from a previously initialised surface (the surface index ID value is returned when you create the surface using surface_create()). The x and y coordinates that you then input in the function should be relative to the (0,0) position of the surface (the top left corner) and not the game window (nor the view if you have one active). The width and height arguments are in pixels and define the width and height of the part of the surface to use.",
          "syntax": "sprite_create_from_surface(index, x, y, w, h, removeback, smooth, xorig, yorig)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_delete",
      "type": "key",
      "topics": [
        {
          "name": "sprite_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_delete.htm",
          "blurb": "This function will delete a sprite from the game, freeing any memory that was reserved for it. This is a very important function for those moments when you need to create and change sprites from external sources (like loading a sprite from a file with sprite_add(), or duplicating a sprite using sprite_duplicate()) and should always be used to remove those assets that are no longer\nneeded by a game, or to clear an indexed asset from a variable before re-assigning another asset to that variable. This cannot be used to delete sprites that are included in the game as part of the assets in the Asset Browser.",
          "syntax": "sprite_delete(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_duplicate",
      "type": "key",
      "topics": [
        {
          "name": "sprite_duplicate",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_duplicate.htm",
          "blurb": "This function will return the index of a newly created sprite that is a duplicate (copy) of the one input as the \"index\" argument. If the function fails, -1 is returned. This function must be used to copy any sprites from the original assets before any transformations can be done on them. For example, if you wish to change the bounding box for a sprite, or set its alpha from another sprite, you must first duplicate it, then perform the operation on the duplicated sprite and use that. A duplicated sprite will be places on its own unique texture page when created, meaning that duplicating multiple sprites will create multiple texture pages and have an impact on performance, so use this function only when necessary.",
          "syntax": "sprite_duplicate(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_exists",
      "type": "key",
      "topics": [
        {
          "name": "sprite_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_exists.htm",
          "blurb": "This function returns whether a sprite with the specified index exists or not in the project being run.",
          "syntax": "sprite_exists(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_flush",
      "type": "key",
      "topics": [
        {
          "name": "sprite_flush",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_flush.htm",
          "blurb": "With this function you can remove the texture page for the given sprite from texture memory (VRAM). The texture will stay in RAM after being flushed.",
          "syntax": "sprite_flush(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_flush_multi",
      "type": "key",
      "topics": [
        {
          "name": "sprite_flush_multi",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_flush_multi.htm",
          "blurb": "With this function you can remove the any number of texture pages for the given sprites from texture memory. You supply the sprite indices as an array and the texture pages they are assigned to will be removed from texture memory. Note that if one of the texture pages is used elsewhere in the room (by another instance sprite or a background, etc...) you may get a minor performance hit as the page is immediately reloaded back into memory again, so care should be taken when using this function.\nNote that the function will return -1 if flush is not supported for the chosen resources, or it will return 0 if all worked correctly.",
          "syntax": "sprite_flush_multi(array)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_bbox_bottom",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_bbox_bottom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_bottom.htm",
          "blurb": "This function returns the relative position of the bottom of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the collision mask properties. The image below shows how it is calculated:",
          "syntax": "sprite_get_bbox_bottom(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_bbox_left",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_bbox_left",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_left.htm",
          "blurb": "This function returns the relative position of the left of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the collision mask properties. The image below shows how it is calculated:",
          "syntax": "sprite_get_bbox_left(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_bbox_mode",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_bbox_mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_mode.htm",
          "blurb": "This function will return the current \"mode\" for the bounding box calculations. You supply the sprite index of the sprite to check, and the function will return one of the constants shown below.",
          "syntax": "sprite_get_bbox_mode(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_bbox_right",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_bbox_right",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_right.htm",
          "blurb": "This function returns the relative position of the right of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the collision mask properties. The image below shows how it is calculated:",
          "syntax": "sprite_get_bbox_right(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_bbox_top",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_bbox_top",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_top.htm",
          "blurb": "This function returns the relative position of the top of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the collision mask properties. The image below shows how it is calculated:",
          "syntax": "sprite_get_bbox_top(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_height",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_height.htm",
          "blurb": "With this function you can find the height of the base sprite asset, with no transforms, in pixels.",
          "syntax": "sprite_get_height(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_info",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_info",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_info.htm",
          "blurb": "This function is used to retrieve information for the given sprite. You supply a sprite index (which can be an asset added through the Asset Browser or a sprite added at runtime) and the function returns a struct with the following variables:",
          "syntax": "sprite_get_info(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_name",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_name.htm",
          "blurb": "This function will return the name as a string of the specified sprite. This name is the one that has been specified for the sprite in the resource tree of the main GameMaker window. Please note that this is only a string and cannot be used to reference the sprite directly - for that you would need the sprite index. You can, however, use this string to get the sprite index using the returned string along with the function asset_get_index().",
          "syntax": "sprite_get_name(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_nineslice",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_nineslice",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_nineslice.htm",
          "blurb": "This function returns the Nine Slice struct for a sprite, containing all its Nine Slice properties as set in the Sprite Editor or using sprite_set_nineslice(). The contents of this struct are detailed on this page.",
          "syntax": "sprite_get_nineslice(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_number",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_number",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_number.htm",
          "blurb": "A sprite has to have at least one sub-image and this function will return just how many it has. Remember, a sprite sub-image starts being numbered from 0, so if this function returns 3 (the sprite being checked has 3 sub-images) they will be numbered 0, 1 and 2.",
          "syntax": "sprite_get_number(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_speed",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_speed.htm",
          "blurb": "This function can be used to retrieve the sprite speed as defined for the sprite resource in the Sprite Editor. The value returned can then be used, for example, to calculate how many frames may be drawn for different image_speed. Note that the return value will be very different depending on the type of speed\nthat was applied in the Sprite Editor, either Frames Per Second, or Frames Per Game Frame. The following two examples illustrate this:",
          "syntax": "sprite_get_speed(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_speed_type",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_speed_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_speed_type.htm",
          "blurb": "This function can be used to retrieve the sprite animation type as defined for the sprite resource in the Sprite Editor. The value returned will be one of the following constants:",
          "syntax": "sprite_get_speed_type(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_texture",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_texture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm",
          "blurb": "This function returns a special pointer for the sprite texture page. This value can then be used in other draw functions, particularly in the 2D primitive functions, as well as the Shader functions. You can get more information about the returned texture page using the different texture_ functions found here.",
          "syntax": "sprite_get_texture(spr, subimg)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_tpe",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_tpe",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_tpe.htm",
          "blurb": "This function will return a special value that relates to the position of the given sprite and sub-image on the texture page used by your game. In this way you can pass the value to extensions for use outside of the compiled game, effectively bypassing the GameMaker drawing functions and permitting the sprite to be used in DOM content which can then be drawn anywhere within the window that contains the game canvas. This function is of particular interest to those that wish to create buttons and other interactive media outside of the GameMaker canvas element on their host page using the function clickable_add().",
          "syntax": "sprite_get_tpe(sprite, index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_uvs",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_uvs",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm",
          "blurb": "This function returns an array with the UV coordinates and other data for the texture of the sprite sub-image on the texture page. The function returns an array with the following 8 elements:",
          "syntax": "sprite_get_uvs(sprite, subimage)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_width",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_width.htm",
          "blurb": "With this function you can find the width of the base resource sprite, with no transforms, in pixels.",
          "syntax": "sprite_get_width(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_xoffset",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_xoffset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_xoffset.htm",
          "blurb": "When you define a sprite in the sprite editor, you need to set the origin for that sprite. This is the point at which the sprite will be \"attached\" or \"drawn\" when used with an instance. This function returns the relative offset for the x-axis of the origin based on the upper left corner being the 0,0 position, with a +x being right and a -x being left of this. The following image illustrates this:",
          "syntax": "sprite_get_xoffset(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_get_yoffset",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_yoffset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_yoffset.htm",
          "blurb": "When you define a sprite in the sprite editor, you need to set the origin for that sprite. This is the point at which the sprite will be \"attached\" or \"drawn\" when used with an instance. This function returns the relative offset for the y-axis of the origin based on the upper left corner being the 0,0 position, with a +y being down and a -y being up from this. The following image illustrates this:",
          "syntax": "sprite_get_yoffset(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_height",
      "type": "key",
      "topics": [
        {
          "name": "sprite_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_height.htm",
          "blurb": "This read only variable returns the height of the sprite that has been assigned to the instance. This height is returned in pixels and will be dependent on the image_yscale. If you need the un-scaled height you should use sprite_get_height().",
          "syntax": "sprite_height"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_index",
      "type": "key",
      "topics": [
        {
          "name": "sprite_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm",
          "blurb": "This variable returns the index of the current sprite for the instance, or -1 if the instance has no sprite associated with it. You can change it to give the instance a different sprite by giving it the name of a sprite from the resource tree or by using a variable that has an externally loaded sprite indexed in it. Changing the sprite does not change the index of the currently visible frame, so if you change the sprite on frame number 3, the new sprite will be drawn with that frame visible (assuming it has the same number of frames).",
          "syntax": "sprite_index"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_merge",
      "type": "key",
      "topics": [
        {
          "name": "sprite_merge",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_merge.htm",
          "blurb": "This function will merge the sprite indexed in argument 1 (\"ind2\") with that which is indexed in argument 0 (\"ind1\"). The images themselves are NOT merged together, but rather the image indices are merged, with the sub images from sprite \"ind2\" appended onto those of sprite \"ind1\", ie: they are added on at the end. Note that if the sprites are different sizes, then the appended sprites are stretched to fit the image size\nfor \"ind1\".",
          "syntax": "sprite_merge(ind1, ind2)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_nineslice_create",
      "type": "key",
      "topics": [
        {
          "name": "sprite_nineslice_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_nineslice_create.htm",
          "blurb": "Nine Slicing is a technique used to scale rectangular images for preserving details, making them retain their original form after scaling. See this page for information on Nine Slice.",
          "syntax": "sprite_nineslice_create()"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_prefetch",
      "type": "key",
      "topics": [
        {
          "name": "sprite_prefetch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_prefetch.htm",
          "blurb": "This function can be used to prefetch (place into texture memory) a texture page with the given sprite. You supply the sprite index as defined when you created the sprite asset, and the texture page it is on will be loaded into memory. Note that the function will return -1 if prefetch is not supported for the chosen resource or the target platform is HTML5, or it will return 0 if all worked correctly.",
          "syntax": "sprite_prefetch(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_prefetch_multi",
      "type": "key",
      "topics": [
        {
          "name": "sprite_prefetch_multi",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_prefetch_multi.htm",
          "blurb": "This function can be used to prefetch (place into texture memory) a number of texture pages that contain the sprites given. You supply an array populated with the sprite indices (as defined when you created the sprite asset) and the texture pages that they are on will be loaded into memory. Note that the function will return -1 if prefetch is not supported for the chosen resource or the target platform is HTML5, or it will return 0 if all worked correctly.",
          "syntax": "sprite_prefetch_multi"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_replace",
      "type": "key",
      "topics": [
        {
          "name": "sprite_replace",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_replace.htm",
          "blurb": "This function works in almost the exact same manner as sprite_add(), only instead of returning the index of the sprite you are importing, it overwrites a previously created sprite index. When using this function you should use a sprite index that has been created and stored in a variable using other functions like sprite_add() or sprite_create_from_surface(), or even sprite_duplicate(), rather than a resource tree sprite asset. You can replace a sprite from the game assets using this function, but doing so means that you will lose the reference ID for the sprite that you are replacing, regardless of whether you call game_restart() or not, and so is not recommended. Regardless of the sprite being replaced, this function will create a new texture page for the sprite and so care should be taken when using it as it may adversely affect performance by increasing the number of required texture swaps for rendering.",
          "syntax": "sprite_replace(ind, fname, imgnumb, removeback, smooth, xorig, yorig)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_save",
      "type": "key",
      "topics": [
        {
          "name": "sprite_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_save.htm",
          "blurb": "This function can be used to save any sub-image of a sprite to disc, giving it the specified filename. The sprite must have been added at runtime (you cannot save sprites added through the IDE) and the file must be saved with a *.png extension.",
          "syntax": "sprite_save(ind, subimg, fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_save_strip",
      "type": "key",
      "topics": [
        {
          "name": "sprite_save_strip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_save_strip.htm",
          "blurb": "This function will create a strip image from all the sub-images in a sprite, saving it to disc with the specified filename. The sprite must have been added at runtime (you cannot save sprites added through the IDE) and the file must be saved with a *.png extension.",
          "syntax": "sprite_save_strip(ind, filename)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_set_alpha_from_sprite",
      "type": "key",
      "topics": [
        {
          "name": "sprite_set_alpha_from_sprite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_alpha_from_sprite.htm",
          "blurb": "This function uses the value/saturation of one sprite and multiplies it with the alpha of the target sprite. Ideally the sprite being used to generate the new alpha map should be grey-scale, with the white areas having an equivalent alpha value of 1 (opaque), the black areas being equivalent to alpha 0 (transparent), and the grey areas being an alpha in between 0 and 1. The sprite that you are setting the alpha of cannot be a permanent resource, nor can the sprite you use to set the alpha, as this will give an error. This means that you must create two completely new sprites \"on the fly\" in some way for the function to work correctly. This can be achieved by using surfaces, or by creating a sprite from the screen (the code example below shows how the effect can be achieved with surfaces).",
          "syntax": "sprite_set_alpha_from_sprite(ind, spr)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_set_bbox",
      "type": "key",
      "topics": [
        {
          "name": "sprite_set_bbox",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_bbox.htm",
          "blurb": "This function can be used to set the bounding box values for a sprite. You supply the sprite index to use and then the left, top, right and bottom values for the bounding box positions. The positions are absolute values, where the (0, 0) position corresponds to the top left corner of the sprite, regardless of the offset for the sprite, any \"empty\" pixels the sprite may have, or where it is being drawn in the room.",
          "syntax": "sprite_set_bbox(ind, left, top, right, bottom)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_set_bbox_mode",
      "type": "key",
      "topics": [
        {
          "name": "sprite_set_bbox_mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_bbox_mode.htm",
          "blurb": "This function can be used to set the bounding box mode for a sprite. You supply the sprite index and the mode to use, which should be one of the following constants:",
          "syntax": "sprite_set_bbox_mode(ind, mode)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_set_cache_size",
      "type": "key",
      "topics": [
        {
          "name": "sprite_set_cache_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_cache_size.htm",
          "blurb": "When performing image blending, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker has to temporarily save a blended copy of the image and load it in. This function sets how many blended copies of the given sprite can be cached before old ones are overwritten. Default is 4. This is applied to all sub-images of the sprite.",
          "syntax": "sprite_set_cache_size(ind, max)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_set_cache_size_ext",
      "type": "key",
      "topics": [
        {
          "name": "sprite_set_cache_size_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_cache_size_ext.htm",
          "blurb": "When performing image blending, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker has to temporarily save a blended copy of the image and load it in. This function sets how many blended copies of the given sprite can be cached before old ones are overwritten. Default is 4. This is applied to one single given sub-image of the sprite.",
          "syntax": "sprite_set_cache_size_ext(ind, index, max)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_set_nineslice",
      "type": "key",
      "topics": [
        {
          "name": "sprite_set_nineslice",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_nineslice.htm",
          "blurb": "This function is used to apply a Nine Slice struct to a sprite. You supply the sprite index and the Nine Slice struct to apply, which can be retrieved using sprite_nineslice_create() or sprite_get_nineslice().",
          "syntax": "sprite_set_nineslice(ind, nineslice)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_set_offset",
      "type": "key",
      "topics": [
        {
          "name": "sprite_set_offset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_offset.htm",
          "blurb": "This function can be used to set the x and y origin of a sprite, and takes relative values based on the (0,0) position being the upper left corner of the sprite. The following image illustrates this:",
          "syntax": "sprite_set_offset(ind, xoff, yoff)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_set_speed",
      "type": "key",
      "topics": [
        {
          "name": "sprite_set_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_speed.htm",
          "blurb": "This function can be used to set the base animation speed and type as for the sprite resource. This is normally set in the Sprite Editor, but there may be moments when you are required to set this manually for a given sprite resource. You need to supply the sprite index to set, the animation speed and the type of animation speed to apply. The animation speed type can be any one of the following constants:",
          "syntax": "sprite_set_speed(index, speed, type)"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_width",
      "type": "key",
      "topics": [
        {
          "name": "sprite_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_width.htm",
          "blurb": "This read only variable returns the width of the sprite that has been assigned to the instance. This width is returned in pixels and will be dependent on the image_xscale. If you need the un-scaled width you should use sprite_get_width().",
          "syntax": "sprite_width"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_xoffset",
      "type": "key",
      "topics": [
        {
          "name": "sprite_xoffset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_xoffset.htm",
          "blurb": "This read only variable returns the local xoffset (the x component of the origin as defined in the sprite editor) of the sprite that has been assigned to the instance. This xoffset is returned in pixels and will be dependent on the image_xscale, so that (for example) if a square 32x32 sprite is defined as having the x origin at 16, when that sprite is scaled by 2 this variable will return 32. If you need the un-scaled xoffset you should use sprite_get_xoffset().",
          "syntax": "sprite_xoffset"
        }
      ],
      "keys": []
    },
    {
      "name": "sprite_yoffset",
      "type": "key",
      "topics": [
        {
          "name": "sprite_yoffset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_yoffset.htm",
          "blurb": "This read only variable returns the local yoffset (the y component of the origin as defined in the sprite editor) of the sprite that has been assigned to the instance. This yoffset is returned in pixels and will be dependent on the image_yscale, so that (for example) if a square 32x32 sprite is defined as having the y origin at 16, when that sprite is scaled by 2 this variable will return 32. If you need the un-scaled yoffset you should use sprite_get_yoffset().",
          "syntax": "sprite_yoffset"
        }
      ],
      "keys": []
    },
    {
      "name": "spritespeed_framespergameframe",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_speed_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_speed_type.htm",
          "blurb": "This function can be used to retrieve the sprite animation type as defined for the sprite resource in the Sprite Editor. The value returned will be one of the following constants:",
          "syntax": "sprite_get_speed_type(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "spritespeed_framespersecond",
      "type": "key",
      "topics": [
        {
          "name": "sprite_get_speed_type",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_speed_type.htm",
          "blurb": "This function can be used to retrieve the sprite animation type as defined for the sprite resource in the Sprite Editor. The value returned will be one of the following constants:",
          "syntax": "sprite_get_speed_type(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "sqr",
      "type": "key",
      "topics": [
        {
          "name": "sqr",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/sqr.htm",
          "blurb": "Multiplies a number by itself and so returns the square of that number. EG: sqr(5) would return 25 since 5*5=25.",
          "syntax": "sqr(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "sqrt",
      "type": "key",
      "topics": [
        {
          "name": "sqrt",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/sqrt.htm",
          "blurb": "If you multiply a number with itself, you get the square of that number, but sometimes you want to do the reverse and get the square root of a number. So to find what number has been multiplied with itself to get any given positive value we use this function. For example: sqrt(9) will return 3 since 3*3=9.",
          "syntax": "sqrt(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "Static Variables",
      "type": "key",
      "topics": [
        {
          "name": "Static Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Functions/Static_Variables.htm",
          "blurb": "An interesting feature of script functions and method variables is that they can have static variables. A static variable is one that is defined the first time that the function is called and that will maintain its value from then onward. To create a static variable you need to define it using the static keyword, as shown in this simple example:"
        }
      ],
      "keys": []
    },
    {
      "name": "string",
      "type": "key",
      "topics": [
        {
          "name": "string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string.htm",
          "blurb": "With this function you can turn any real number into a string. If the real number is an integer, it will be saved with no decimal places, otherwise, it will be saved with two decimal places. If you require more decimal places, then use the function string_format(). Also note that using this function on a variable storing an array, a data structure, or a struct will convert the contents of these variables into a string which can then be output to the console or saved to a file for debugging.",
          "syntax": "string(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_byte_at",
      "type": "key",
      "topics": [
        {
          "name": "string_byte_at",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_byte_at.htm",
          "blurb": "Returns the raw byte value as a real value at a given position in the given string.",
          "syntax": "string_byte_at(str, index)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_byte_length",
      "type": "key",
      "topics": [
        {
          "name": "string_byte_length",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_byte_length.htm",
          "blurb": "This function returns the number of bytes in a string. Due to their being held as UTF8, this will not be equal to the number of characters in the string.",
          "syntax": "string_byte_length(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_char_at",
      "type": "key",
      "topics": [
        {
          "name": "string_char_at",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_char_at.htm",
          "blurb": "You can use this function to return a specific character at a specific position within a string, with the index starting at 1 for the first character. If no character is found or the string is shorter than the given index value, an empty string \"\" is returned, however if the given index is equal to or smaller than 0, then the first character of the string is returned.",
          "syntax": "string_char_at(str, index)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_copy",
      "type": "key",
      "topics": [
        {
          "name": "string_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_copy.htm",
          "blurb": "With this function you can easily select a number of characters from within a string to be copied to another one. The first character in a string is always indexed as 1 and not 0 as you may expect, so to copy (for example) the first five characters of string you would have string_copy(str, 1, 5). A further example is provided below.",
          "syntax": "string_copy(str, index, count)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_count",
      "type": "key",
      "topics": [
        {
          "name": "string_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_count.htm",
          "blurb": "This function will return the amount of times the given substring appears within a specific string. In this way you can check for how many times a single letter or a phrase is repeated in a section of stored text.",
          "syntax": "string_count(substr, str)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_delete",
      "type": "key",
      "topics": [
        {
          "name": "string_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_delete.htm",
          "blurb": "This function is used to remove a part of the given string. You supply the input string, the starting position within that string to remove characters from (the index starts at 1) and the number of characters to remove. The function will return a new string without that part in it.",
          "syntax": "string_delete(str, index, count)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_digits",
      "type": "key",
      "topics": [
        {
          "name": "string_digits",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_digits.htm",
          "blurb": "You can use this function to parse a given string and get any numbers from it. For example, say you have this text - \"I am 81 years old\". With this function you would get a return string of \"81\".",
          "syntax": "string_digits(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_format",
      "type": "key",
      "topics": [
        {
          "name": "string_format",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_format.htm",
          "blurb": "Turns a real number into a string using your own formatting, where you can choose how many \"places\" are saved to the string and how many decimal places are saved also. Both can be very handy, some games prefer to display a score as a set number of digits, while control over decimal places can be good for a high accuracy the two decimal places of string() cannot provide. If the number of places specified is greater than the value to be shown and/or the number plus the decimal places that have been specified is less than the total places, then spaces will be added before the value to make up the difference (see the example below). Zeros will be added to the right of the decimal point if the value given is less than the total and the number of decimal places to include. The default format is no extra spaces on the left, and only two decimal places on the right, eg \"265.73\".",
          "syntax": "string_format(val, tot, dec)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_hash_to_newline",
      "type": "key",
      "topics": [
        {
          "name": "string_hash_to_newline",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_hash_to_newline.htm",
          "blurb": "This function returns a string where the \"#\" symbol has been converted into a new line. So a string formatted as:",
          "syntax": "string_hash_to_newline(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_height",
      "type": "key",
      "topics": [
        {
          "name": "string_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_height.htm",
          "blurb": "This function will return the height (in pixels) of the input string, taking into account the line separation and any line-breaks the text may have. It is very handy for calculating distances between text elements based on the tallest of the letters that make up the string as it would be drawn with draw_text() using the currently defined font.",
          "syntax": "string_height(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_height_ext",
      "type": "key",
      "topics": [
        {
          "name": "string_height_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_height_ext.htm",
          "blurb": "This function will return the height (in pixels) of the input string, taking into account the line separation and line-break width (which is defined as the number of pixels that the string can occupy before a line break is inserted). It is very handy for calculating distances between text elements based on the tallest of the letters that make up the string as well as the actual string length itself when spread over several lines as it would be drawn with draw_text_ext() using the currently defined font. Separation and width can be set to -1 to get the default spacing.",
          "syntax": "string_height_ext(string, sep, w)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_insert",
      "type": "key",
      "topics": [
        {
          "name": "string_insert",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_insert.htm",
          "blurb": "With this function you can create a new string made up of two strings, where one has been inserted into the other at a given position. It can be useful, for example, to add a user name into a predefined text and so make the player of your game feel more involved in the action. Keep in mind when calculating the position to insert into that strings are indexed from 1, so the first character in a string is 1 and not 0 as you may expect.",
          "syntax": "string_insert(substr, str, index)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_last_pos",
      "type": "key",
      "topics": [
        {
          "name": "string_last_pos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_last_pos.htm",
          "blurb": "This function will return the character position of an instance of a sub-string within a string, searching from the end of the string to the beginning (so the reverse of string_pos(). The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.",
          "syntax": "string_last_pos(substr, str)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_last_pos_ext",
      "type": "key",
      "topics": [
        {
          "name": "string_last_pos_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_last_pos_ext.htm",
          "blurb": "This function will return the character position of an instance of a sub-string within a string, searching backwards through the string from the position given as the starting position. The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.",
          "syntax": "string_last_pos_ext(substr, str, start_pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_length",
      "type": "key",
      "topics": [
        {
          "name": "string_length",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_length.htm",
          "blurb": "This function returns the number of characters comprising a given string. It can be useful for things like working out when to limit a custom text entry's character length (e.g.: capping a player's name to 10 characters). Remember that this is different to string_width() in that it measures the number of characters in the string, not its width as drawn on the screen in pixels.",
          "syntax": "string_length(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_letters",
      "type": "key",
      "topics": [
        {
          "name": "string_letters",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_letters.htm",
          "blurb": "With this function you can remove all characters that are not classed as letters. This is handy for preventing people from entering unwanted characters into a text entry (like entering \"#\" to force a new line).",
          "syntax": "string_letters(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_lettersdigits",
      "type": "key",
      "topics": [
        {
          "name": "string_lettersdigits",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_lettersdigits.htm",
          "blurb": "This function will return a copy of a given string with everything but its letters and digits removed, which means it can be used to remove any unwanted characters (like \"#\" or \"?\") from, for example, a login name or a password.",
          "syntax": "string_lettersdigits(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_lower",
      "type": "key",
      "topics": [
        {
          "name": "string_lower",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_lower.htm",
          "blurb": "With this function you can force a string to contain only lower case characters.",
          "syntax": "string_lower(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_ord_at",
      "type": "key",
      "topics": [
        {
          "name": "string_ord_at",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_ord_at.htm",
          "blurb": "You can use this function to return a specific character code at a specific position within a string, with the index starting at 1 for the first character. If no character is found or the string is shorter than the value given to index, -1 is returned.",
          "syntax": "string_ord_at(str, index)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_pos",
      "type": "key",
      "topics": [
        {
          "name": "string_pos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_pos.htm",
          "blurb": "This function will return the character position of an instance of a sub-string within a string, searching from the beginning of the string (to search from the end, use the function string_last_pos()). The function will return 0 if it's not found at all, or the position of the first character of the sub-string if it is found. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect. One use for this is for filtering words that may be considered offensive, or for finding the correct place to insert some text into another string.",
          "syntax": "string_pos(substr, str)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_pos_ext",
      "type": "key",
      "topics": [
        {
          "name": "string_pos_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_pos_ext.htm",
          "blurb": "This function will return the character position of an instance of a sub-string within a string, searching forwards through the string from the position given as the starting position. The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.",
          "syntax": "string_pos_ext(substr, str, start_pos)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_repeat",
      "type": "key",
      "topics": [
        {
          "name": "string_repeat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_repeat.htm",
          "blurb": "This function simply returns the same string repeated a given number of times over itself.",
          "syntax": "string_repeat(str, count)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_replace",
      "type": "key",
      "topics": [
        {
          "name": "string_replace",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_replace.htm",
          "blurb": "You can use this function to parse a string looking for a specific part, which can then be replaced by the new string that you have specified.",
          "syntax": "string_replace(str, substr, newstr)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_replace_all",
      "type": "key",
      "topics": [
        {
          "name": "string_replace_all",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_replace_all.htm",
          "blurb": "You can use this function to parse a string looking for specific parts, which can then be replaced by the new string that you have specified in all places that they occur.",
          "syntax": "string_replace_all(str, substr, newstr)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_set_byte_at",
      "type": "key",
      "topics": [
        {
          "name": "string_set_byte_at",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_set_byte_at.htm",
          "blurb": "This function sets a byte directly in a string (based on the UTF8 format) and returns a copy of the string with the changes.",
          "syntax": "string_set_byte_at(str, pos, byte)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_upper",
      "type": "key",
      "topics": [
        {
          "name": "string_upper",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_upper.htm",
          "blurb": "With this function you can force a string to contain only upper case characters.",
          "syntax": "string_upper(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_width",
      "type": "key",
      "topics": [
        {
          "name": "string_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_width.htm",
          "blurb": "This function will return the width (in pixels) of the input string, taking into account any line-breaks the text may have. It is very handy for calculating distances between text elements based on the total width of the letters that make up the string as it would be drawn with draw_text() using the currently defined font.",
          "syntax": "string_width(string)"
        }
      ],
      "keys": []
    },
    {
      "name": "string_width_ext",
      "type": "key",
      "topics": [
        {
          "name": "string_width_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Strings/string_width_ext.htm",
          "blurb": "This function will return the maximum width (in pixels) of the input string, taking into account the line separation and line-break width (which is defined as the number of pixels that the string can occupy before a line break is inserted). It is very handy for calculating distances between text elements based on the maximum width of a string that is split over several lines as it would be drawn with draw_text_ext() using the currently defined\nfont. Separation and width can be set to -1 to get the default spacing.",
          "syntax": "string_width_ext(string, sep, w)"
        }
      ],
      "keys": []
    },
    {
      "name": "Struct Forbidden Variables",
      "type": "key",
      "topics": [
        {
          "name": "Struct Forbidden Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Struct_Forbidden_Variables.htm",
          "blurb": "When creating a struct, it is possible to use certain built-in variables as member variable names, for example:"
        }
      ],
      "keys": []
    },
    {
      "name": "Structs",
      "type": "key",
      "topics": [
        {
          "name": "Structs & Constructors",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Structs.htm",
          "blurb": "A struct is a variable that holds a collection of other variables. The variables that a struct holds can be of any data type previously mentioned and these variables can be read from and written to after the initial struct declaration, and you can also add more variables to a struct after it has been declared."
        }
      ],
      "keys": []
    },
    {
      "name": "surface_copy",
      "type": "key",
      "topics": [
        {
          "name": "surface_copy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_copy.htm",
          "blurb": "This function simply takes the image from one surface and copies it onto another one at the specified local position within that surface (where the (0,0) position is the top left corner of the destination surface). If the destination surface already has information this will be overwritten by the copy, and the function does not change the source surface in any way.",
          "syntax": "surface_copy(destination, x, y, source)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_copy_part",
      "type": "key",
      "topics": [
        {
          "name": "surface_copy_part",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_copy_part.htm",
          "blurb": "This function simply takes the image from one surface and copies it onto another one at the specified local position within that surface (where the (0,0) position is the top left corner of the destination surface). You can specify a local x and y position to copy from as well as the width and height of the section. Please note that these are coordinates based on the surface size and not on the position at which the surface is being drawn in the room. If the destination surface already has information this will be overwritten by the copy, and the function does not change the source surface in any way.",
          "syntax": "surface_copy_part(destination, x, y, source, xs, ys, ws, hs)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_create",
      "type": "key",
      "topics": [
        {
          "name": "surface_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_create.htm",
          "blurb": "This function is used to create a surface and will return the index of the surface which should be stored in a variable for future function calls. When the surface is first created, it may contain \"noise\" as basically it is just an area of memory that is put aside for the purpose (and that memory may still contain information), so you may want to clear the surface before use with a function like draw_clear_alpha().",
          "syntax": "surface_create(w, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_create_ext",
      "type": "key",
      "topics": [
        {
          "name": "surface_create_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_create_ext.htm",
          "blurb": "This function allows you to attach a surface to a canvas element that already exists in your web page, meaning that you can effectively split up portions of your game to be drawn at various different places within the page. To that end, you must have defined the canvas element correctly within the *.html page of your game using the correct sizes and names that correspond to the surfaces you wish to create. So, you would have your \"main\" canvas, and then your secondary surface canvas elements, which will be assigned using this function to the correct surfaces. The following image is an example of how a page with three canvas elements would be set up:",
          "syntax": "surface_create_ext(name, w, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_depth_disable",
      "type": "key",
      "topics": [
        {
          "name": "surface_depth_disable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm",
          "blurb": "This function disables the automatic depth buffer generation for all surfaces that are created after it has been disabled. Normally all surfaces have depth buffers so if you draw 3D objects to them then it'll sort them properly by depth in order to maintain functional parity between rendering to surfaces and rendering to the back buffer, however allocating depth buffers essentially doubles the amount of memory required for surfaces, which could be an excessive and unnecessary overhead\nespecially if your game is very memory intensive, and for 2D games they aren't generally required.",
          "syntax": "surface_depth_disable(disable)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_exists",
      "type": "key",
      "topics": [
        {
          "name": "surface_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_exists.htm",
          "blurb": "This function is essential when working with surfaces due to their volatile nature. Surfaces are always held in texture memory which means that they can be destroyed from one moment to the next (for example, when a screensaver starts on windows, or when minimised on an Android device), so you should always check that a surface exists before doing anything with it (this includes drawing it to the screen). The example code below shows a typical use of this command in the draw event of an instance to check for a surface and re-create it if it has been removed (note that the surface will have been originally created in the create event of the object).",
          "syntax": "surface_exists(surface_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_free",
      "type": "key",
      "topics": [
        {
          "name": "surface_free",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_free.htm",
          "blurb": "When you are working with surfaces, you should always use this function whenever you are finished using them. Surfaces take up space in memory and so need to be removed, normally at the end of a room, but it can be done at any time depending on the use you put them to. Failure to do so can cause memory leaks which will eventually slow down and crash your game.",
          "syntax": "surface_free(surface_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_get_depth_disable",
      "type": "key",
      "topics": [
        {
          "name": "surface_get_depth_disable",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_depth_disable.htm",
          "blurb": "This function checks to see if the automatic depth buffer generation for surfaces is enabled. Normally all surfaces have depth buffers so if you draw 3D objects to them then it'll sort them properly by depth, however allocating depth buffers essentially doubles the size of surfaces, which could be an excessive and unnecessary overhead especially if your game is very memory intensive or predominantly 2D. In these cases you can check this using this function and disable the depth buffer for surfaces if required using the function surface_depth_disable().",
          "syntax": "surface_get_depth_disable()"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_get_height",
      "type": "key",
      "topics": [
        {
          "name": "surface_get_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_height.htm",
          "blurb": "This function simply returns the height, in pixels, of the indexed surface. It should be noted that if you call this to check the application_surface immediately after having changed its size using surface_resize() it will not return the new value as the change needs a step or two to be fully processed. After waiting a step it should return the new size correctly.",
          "syntax": "surface_get_height(surface_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_get_target",
      "type": "key",
      "topics": [
        {
          "name": "surface_get_target",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_target.htm",
          "blurb": "With this function you can get the ID of the current surface being targeted for drawing to. If you created that surface using surface_create(), then this will be the positive integer which is the unique ID for that surface",
          "syntax": "surface_get_target()"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_get_target_ext",
      "type": "key",
      "topics": [
        {
          "name": "surface_get_target_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_target_ext.htm",
          "blurb": "This function will retrieve the surface ID assigned to one of the 4 render targets available to surfaces. You supply the index of the render target to check, and the function will return -1 if no surface is assigned, or an integer value >= 0, representing the ID of the surface assigned (as returned by the function surface_create()).",
          "syntax": "surface_get_target_ext(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_get_texture",
      "type": "key",
      "topics": [
        {
          "name": "surface_get_texture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_texture.htm",
          "blurb": "This function returns a special pointer for the surface's texture. This value can then be used in other draw functions, particularly in general 3D and some of the 2D primitive functions.",
          "syntax": "surface_get_texture(surface_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_get_width",
      "type": "key",
      "topics": [
        {
          "name": "surface_get_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_width.htm",
          "blurb": "This function simply returns the width, in pixels, of the indexed surface. It should be noted that if you call this to check the application_surface immediately after having changed its size using surface_resize() it will not return the new value as the change needs a step or two to be fully processed. After waiting a step it should return the new size correctly.",
          "syntax": "surface_get_width(surface_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_getpixel",
      "type": "key",
      "topics": [
        {
          "name": "surface_getpixel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_getpixel.htm",
          "blurb": "This function can be used to get the colour of a specific pixel from a surface, using the local coordinates of the surface where (0,0) is the top left corner. This function should not be used very often as it is extremely slow and may cause a pause in your game.",
          "syntax": "surface_getpixel(surface_id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_getpixel_ext",
      "type": "key",
      "topics": [
        {
          "name": "surface_getpixel_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_getpixel_ext.htm",
          "blurb": "With this function you can get the full abgr 32bit value of any pixel of a (previously created) surface.",
          "syntax": "surface_getpixel_ext(surface_id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_reset_target",
      "type": "key",
      "topics": [
        {
          "name": "surface_reset_target",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_reset_target.htm",
          "blurb": "With this function you reset all further drawing from the target surface back to the screen. Please note that to start drawing to a surface you must first have called the function surface_set_target() and then this one after you have finished, for each surface target that you have set or else nothing will be drawn on the screen as all further drawing (even in other instances) will be done on the surface. You should also realise that nothing will be seen if the surface itself is not drawn on the screen in the draw event of an instance.",
          "syntax": "surface_reset_target()"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_resize",
      "type": "key",
      "topics": [
        {
          "name": "surface_resize",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_resize.htm",
          "blurb": "This function will resize a surface to the given dimensions (in pixels). The \"surface_id\" is that of a surface you have created previously, or the application_suface, and the function will resize that surface. Note that this will neither crop nor stretch the contents of the surface, but rather it destroys the current surface and recreates it with the same handle (surface_id) with the new dimensions, meaning that it will need to be cleared and drawn to again (unless it is the application_surface in which case GameMaker will do this automatically).",
          "syntax": "surface_resize(surface_id, w, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_save",
      "type": "key",
      "topics": [
        {
          "name": "surface_save",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_save.htm",
          "blurb": "This function will save a surface to disc using the given filename. The surface must be saved as a *.png format file.",
          "syntax": "surface_save(surface_id, fname)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_save_part",
      "type": "key",
      "topics": [
        {
          "name": "surface_save_part",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_save_part.htm",
          "blurb": "This function will save a part of a surface to disc using the given filename. The surface must be saved as a *.png format file, and the (x,y) position must be given as local coordinates to the surface, bearing in mind that the top left corner of the surface is always (0,0).",
          "syntax": "surface_save_part(surface_id, fname, x, y, width, height)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_set_target",
      "type": "key",
      "topics": [
        {
          "name": "surface_set_target",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_set_target.htm",
          "blurb": "With this function you set all further drawing to the target surface rather than the screen and in this way you can tell GameMaker to only draw specific things to the specified surface. Please note that if you do not call surface_reset_target() after you have finished, nothing will be drawn on the screen as all further drawing (even in other instances) will be done on the surface. You should also realise that nothing will be seen if the surface itself is not drawn on the screen in the draw event of an instance. You can check the return value of this function too as a debug tool to check whether the surface target was set or not, with a return value of 0 being a failure to set the target and any other positive value being a success.",
          "syntax": "surface_set_target(surface_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "surface_set_target_ext",
      "type": "key",
      "topics": [
        {
          "name": "surface_set_target_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_set_target_ext.htm",
          "blurb": "This function is for use with the Shader Functions and sets the MRT (0 - 3) for native level shaders (DX9, DX11, OpenGL).",
          "syntax": "surface_set_target_ext(index, surface_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "SWF",
      "type": "key",
      "topics": [
        {
          "name": "Non-Bitmap Sprites",
          "type": "topic",
          "url": "Settings/Texture_Information/Non-Bitmap_Sprites.htm",
          "blurb": "GameMaker has support for non-bitmap sprites in the form of vector SWF files or Spine Skeletal Animation files. Both these formats have their pros and cons, and the two sections below explain how to import them into the Sprite Editor as well as a bit of information about how they are drawn."
        }
      ],
      "keys": []
    },
    {
      "name": "switch",
      "type": "key",
      "topics": [
        {
          "name": "switch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/switch.htm",
          "blurb": "In a number of situations you want to let your instances perform different actions depending on a particular value. You can do this using a number of consecutive if / else statements, but when the possible choices gets above two or three it is usually easier to use the switch statement."
        }
      ],
      "keys": []
    },
    {
      "name": "Syntax Errors",
      "type": "key",
      "topics": [
        {
          "name": "Syntax Errors (Feather Messages)",
          "type": "topic",
          "url": "Additional_Information/Errors/Syntax_Errors.htm",
          "blurb": "The first level of error reporting when programming your games in GameMaker is in the code or GML Visual editor, and it's the syntax checker. As you write your code - or add your actions - GameMaker will check that it follows the established syntax for the language, and flag any issues that it finds so you can fix them before it comes to running the game or compiling an executable."
        }
      ],
      "keys": []
    },
    {
      "name": "tag_get_asset_ids",
      "type": "key",
      "topics": [
        {
          "name": "tag_get_asset_ids",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm",
          "blurb": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the type of asset should be one of the following constants:",
          "syntax": "tag_get_asset_ids(tags, asset_type)"
        }
      ],
      "keys": []
    },
    {
      "name": "tag_get_assets",
      "type": "key",
      "topics": [
        {
          "name": "tag_get_assets",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_assets.htm",
          "blurb": "With this function you can retrieve the names of all assets that have been assigned the given tag or tags. You supply either a single tag string or an array, where each item in the array is a tag string. The function will return an array where each entry is the name (as a string) of the asset with the given tag. If you need the unique index for the asset, then you can use the function asset_get_index() along with the returned name. If there are no assets with the given tag(s), or if there is an error (eg: the given tags do not exist), then an empty array will be returned.",
          "syntax": "tag_get_assets(tags)"
        }
      ],
      "keys": []
    },
    {
      "name": "tan",
      "type": "key",
      "topics": [
        {
          "name": "tan",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/tan.htm",
          "blurb": "In a right angled triangle tan(val) = Opposite / Adjacent where val is one of the three angles.",
          "syntax": "tan(val)"
        }
      ],
      "keys": []
    },
    {
      "name": "temp_directory",
      "type": "key",
      "topics": [
        {
          "name": "temp_directory",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_Directories/temp_directory.htm",
          "blurb": "This can be used to return the temporary directory created for your game each time it is run (the root does not contain the final \"\\\"). This directory will hold files and can be accessed while the game is running, but it will be removed (along with all files that it contains) when the game is closed.",
          "syntax": "temp_directory"
        }
      ],
      "keys": []
    },
    {
      "name": "ternary operator",
      "type": "key",
      "topics": [
        {
          "name": "if / else and Conditional Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm",
          "blurb": "A fundamental feature of most programming languages is the ability to ask a simple question that gives a boolean true or false answer, and in GML this is achieved using the if keyword. A simple if condition takes an expression and will perform one or more statements if the expression resolves as true, with the following basic form:"
        }
      ],
      "keys": []
    },
    {
      "name": "Text",
      "type": "key",
      "topics": [
        {
          "name": "Text in Sequences",
          "type": "topic",
          "url": "The_Asset_Editors/Sequence_Properties/Text_in_Sequences.htm",
          "blurb": "Text tracks can be added to a Sequence through the editor. This is done by selecting the  Add a Text Track button from the Canvas Toolbox, and then clicking (and optionally dragging) in the Canvas to create a text track."
        }
      ],
      "keys": []
    },
    {
      "name": "Texture Goups - Non-Bitmap Sprites",
      "type": "key",
      "topics": [
        {
          "name": "Non-Bitmap Sprites",
          "type": "topic",
          "url": "Settings/Texture_Information/Non-Bitmap_Sprites.htm",
          "blurb": "GameMaker has support for non-bitmap sprites in the form of vector SWF files or Spine Skeletal Animation files. Both these formats have their pros and cons, and the two sections below explain how to import them into the Sprite Editor as well as a bit of information about how they are drawn."
        }
      ],
      "keys": []
    },
    {
      "name": "Texture Groups",
      "type": "key",
      "topics": [
        {
          "name": "Texture Groups",
          "type": "topic",
          "url": "Settings/Texture_Groups.htm",
          "blurb": "The Texture Group Manager is available from the Tools Menu in the IDE. Here you can add, delete and rename Texture Groups."
        }
      ],
      "keys": []
    },
    {
      "name": "Texture Groups - Texture Pages",
      "type": "key",
      "topics": [
        {
          "name": "Texture Pages",
          "type": "topic",
          "url": "Settings/Texture_Information/Texture_Pages.htm",
          "blurb": "When you create a game with GameMaker, you will surely have created graphics - Sprites, Tile Sets and Fonts - to go along with it. These graphics are stored on Texture Pages which GameMaker builds for you from all the image assets that your game contains. Below is an example of a complete texture page:"
        }
      ],
      "keys": []
    },
    {
      "name": "Texture Pages",
      "type": "key",
      "topics": [
        {
          "name": "Texture Pages",
          "type": "topic",
          "url": "Settings/Texture_Information/Texture_Pages.htm",
          "blurb": "When you create a game with GameMaker, you will surely have created graphics - Sprites, Tile Sets and Fonts - to go along with it. These graphics are stored on Texture Pages which GameMaker builds for you from all the image assets that your game contains. Below is an example of a complete texture page:"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_debug_messages",
      "type": "key",
      "topics": [
        {
          "name": "texture_debug_messages",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_debug_messages.htm",
          "blurb": "This function can be used to enable or disable texture debug messages. When enabled (set to true), additional information about texture page use will be sent to the output window. Set to false to disable this output again.",
          "syntax": "texture_debug_messages(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_flush",
      "type": "key",
      "topics": [
        {
          "name": "texture_flush",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_flush.htm",
          "blurb": "This function can be used to \"flush\" a texture page or a group of texture pages, i.e.: remove them from VRAM when no longer required. The textures stay in RAM.",
          "syntax": "texture_flush(tex_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_get_height",
      "type": "key",
      "topics": [
        {
          "name": "texture_get_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_height.htm",
          "blurb": "Returns the height of the texture with the given id, which is always a value within the range 0 - 1. This can then be used when mapping textures to models or primitives.",
          "syntax": "texture_get_height(tex)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_get_texel_height",
      "type": "key",
      "topics": [
        {
          "name": "texture_get_texel_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_texel_height.htm",
          "blurb": "A texel, or texture element is the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels, and this function returns the height of a single texel from the texture page of the image asset used.",
          "syntax": "texture_get_texel_height(tex)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_get_texel_width",
      "type": "key",
      "topics": [
        {
          "name": "texture_get_texel_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_texel_width.htm",
          "blurb": "A texel, or texture element is the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels, and this function returns the width of a single texel from the texture page of the image asset used.",
          "syntax": "texture_get_texel_width(tex)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_get_uvs",
      "type": "key",
      "topics": [
        {
          "name": "texture_get_uvs",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_uvs.htm",
          "blurb": "This function returns a 1D array with 4 elements representing the UV coordinates for the given texture pointer, filling in the array with the following values:",
          "syntax": "texture_get_uvs(texid)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_get_width",
      "type": "key",
      "topics": [
        {
          "name": "​texture_get_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_width.htm",
          "blurb": "Returns the width of the texture with the given id, which is always a value within the range 0 - 1. This can then be used when mapping textures to models or primitives."
        }
      ],
      "keys": []
    },
    {
      "name": "texture_global_scale",
      "type": "key",
      "topics": [
        {
          "name": "texture_global_scale",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_global_scale.htm",
          "blurb": "This function allows you to control the scaling of the texture pages on load from the WAD file that is part of your final game executable. The input value must be a power of two value and will work such that:",
          "syntax": "texture_global_scale(pow2integer)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_is_ready",
      "type": "key",
      "topics": [
        {
          "name": "texture_is_ready",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_is_ready.htm",
          "blurb": "This function can be used to check if a specific texture page has been unpacked and is ready for use, or if a group of texture pages have been unpacked and are ready for use. You supply the unique texture page ID (as returned by the texturegroup_* functions) or the texture group ID string (as defined in the Texture Group Editor), and the function will return true if they have been unpacked, or false otherwise.",
          "syntax": "texture_is_ready(tex_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_prefetch",
      "type": "key",
      "topics": [
        {
          "name": "texture_prefetch",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_prefetch.htm",
          "blurb": "This function can be used to \"prefetch\" a texture page or a group of texture pages, ie: load them into VRAM when required. You supply the unique texture page ID (as returned by the texturegroup_* functions) to prefetch a single page, or you can supply a texture group name (as defined in the Texture Group Editor) to prefetch all the texture pages in the group.",
          "syntax": "texture_prefetch(tex_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "texture_set_stage",
      "type": "key",
      "topics": [
        {
          "name": "texture_set_stage",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texture_set_stage.htm",
          "blurb": "This function will set the given stage \"slot\" a texture to be used. The number of stage \"slots\" available will depend on the platform you are compiling to, with a maximum of 8 being available for Windows, Mac and Linux, but on lower end Android devices (for example) this number can be as low as 2. It is also worth noting that the first stage slot (1) is always used automatically by GameMaker.",
          "syntax": "texture_set_stage(stage, tex)"
        }
      ],
      "keys": []
    },
    {
      "name": "texturegroup_get_fonts",
      "type": "key",
      "topics": [
        {
          "name": "texturegroup_get_fonts",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_fonts.htm",
          "blurb": "With this function you can retrieve the font index of each of the fonts assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the font index for a font resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).",
          "syntax": "texturegroup_get_fonts(tex_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "texturegroup_get_sprites",
      "type": "key",
      "topics": [
        {
          "name": "texturegroup_get_sprites",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_sprites.htm",
          "blurb": "With this function you can retrieve the sprite index of each of the sprites assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the sprite index for a sprite resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).",
          "syntax": "texturegroup_get_sprites(tex_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "texturegroup_get_status",
      "type": "key",
      "topics": [
        {
          "name": "texturegroup_get_status",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_status.htm",
          "blurb": "This function returns the status of the given Dynamic Texture Group. The status will be one of the following constants:",
          "syntax": "texturegroup_get_status(groupname)"
        }
      ],
      "keys": []
    },
    {
      "name": "texturegroup_get_textures",
      "type": "key",
      "topics": [
        {
          "name": "texturegroup_get_textures",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_textures.htm",
          "blurb": "This function can be used to retrieve the texture page IDs of the individual pages that make up a texture group. You supply the texture group ID string (as defined in the Texture Group Editor), and the function will return a 1D array, where each entry in the array is a single texture page ID. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).",
          "syntax": "texturegroup_get_textures(tex_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "texturegroup_get_tilesets",
      "type": "key",
      "topics": [
        {
          "name": "texturegroup_get_tilesets",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_tilesets.htm",
          "blurb": "With this function you can retrieve the tileset index of each of the tilesets assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the tileset index for a tileset resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).",
          "syntax": "texturegroup_get_tilesets(tex_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "texturegroup_load",
      "type": "key",
      "topics": [
        {
          "name": "texturegroup_load",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_load.htm",
          "blurb": "This function is used to load a Dynamic Texture Group from disk into RAM.",
          "syntax": "texturegroup_load(groupname, [prefetch=true])"
        }
      ],
      "keys": []
    },
    {
      "name": "texturegroup_set_mode",
      "type": "key",
      "topics": [
        {
          "name": "texturegroup_set_mode",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_set_mode.htm",
          "blurb": "This function allows you to set three things:",
          "syntax": "texturegroup_set_mode(explicit, [debug=false, default_sprite=-1])"
        }
      ],
      "keys": []
    },
    {
      "name": "texturegroup_unload",
      "type": "key",
      "topics": [
        {
          "name": "texturegroup_unload",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_unload.htm",
          "blurb": "This function is used to unload a loaded Dynamic Texture Group from memory back into disk, in its original, compressed form.",
          "syntax": "texturegroup_unload(groupname)"
        }
      ],
      "keys": []
    },
    {
      "name": "tf_anisotropic",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_filter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter.htm",
          "blurb": "With this function you can get the current mip filter mode. The mode value returned by the function will be one of the constants listed below.",
          "syntax": "gpu_get_tex_mip_filter()"
        },
        {
          "name": "gpu_get_tex_mip_filter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter_ext.htm",
          "blurb": "With this function you can get the current mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the mode value constants listed below.",
          "syntax": "gpu_get_tex_mip_filter_ext(sampler_index)"
        },
        {
          "name": "gpu_set_tex_mip_filter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter.htm",
          "blurb": "With this function you can set the current mip filter mode to one of the three types supported. You give the constant that refers to the mip filtering mode that you require, where you can choose between point filtering (default setting, meaning no filtering), linear filtering (this is also known as trilinear filtering) or aniostropic filtering (see the constants table below).",
          "syntax": "gpu_set_tex_mip_filter(filter)"
        },
        {
          "name": "gpu_set_tex_mip_filter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter_ext.htm",
          "blurb": "With this function you can set the mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the mode value constants listed below.",
          "syntax": "gpu_set_tex_mip_filter_ext(sampler_index, filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "tf_linear",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_filter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter.htm",
          "blurb": "With this function you can get the current mip filter mode. The mode value returned by the function will be one of the constants listed below.",
          "syntax": "gpu_get_tex_mip_filter()"
        },
        {
          "name": "gpu_get_tex_mip_filter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter_ext.htm",
          "blurb": "With this function you can get the current mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the mode value constants listed below.",
          "syntax": "gpu_get_tex_mip_filter_ext(sampler_index)"
        },
        {
          "name": "gpu_set_tex_mip_filter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter.htm",
          "blurb": "With this function you can set the current mip filter mode to one of the three types supported. You give the constant that refers to the mip filtering mode that you require, where you can choose between point filtering (default setting, meaning no filtering), linear filtering (this is also known as trilinear filtering) or aniostropic filtering (see the constants table below).",
          "syntax": "gpu_set_tex_mip_filter(filter)"
        },
        {
          "name": "gpu_set_tex_mip_filter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter_ext.htm",
          "blurb": "With this function you can set the mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the mode value constants listed below.",
          "syntax": "gpu_set_tex_mip_filter_ext(sampler_index, filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "tf_point",
      "type": "key",
      "topics": [
        {
          "name": "gpu_get_tex_mip_filter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter.htm",
          "blurb": "With this function you can get the current mip filter mode. The mode value returned by the function will be one of the constants listed below.",
          "syntax": "gpu_get_tex_mip_filter()"
        },
        {
          "name": "gpu_get_tex_mip_filter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter_ext.htm",
          "blurb": "With this function you can get the current mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the mode value constants listed below.",
          "syntax": "gpu_get_tex_mip_filter_ext(sampler_index)"
        },
        {
          "name": "gpu_set_tex_mip_filter",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter.htm",
          "blurb": "With this function you can set the current mip filter mode to one of the three types supported. You give the constant that refers to the mip filtering mode that you require, where you can choose between point filtering (default setting, meaning no filtering), linear filtering (this is also known as trilinear filtering) or aniostropic filtering (see the constants table below).",
          "syntax": "gpu_set_tex_mip_filter(filter)"
        },
        {
          "name": "gpu_set_tex_mip_filter_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter_ext.htm",
          "blurb": "With this function you can set the mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the mode value constants listed below.",
          "syntax": "gpu_set_tex_mip_filter_ext(sampler_index, filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "The Debugger",
      "type": "key",
      "topics": [
        {
          "name": "The Debugger",
          "type": "topic",
          "url": "IDE_Tools/The_Debugger.htm",
          "blurb": "The Debugger is a powerful tool for checking your game, and is especially useful for tracking down errors and bugs in your code, as well as checking that scripts are run when they should be, and that variables and arrays contain the values you expect etc... You can start the Debugger by running your game from GameMaker IDE using the Debug button  at the top of the IDE, or by going to the Build menu and selecting \"Debug\"."
        }
      ],
      "keys": []
    },
    {
      "name": "The File System",
      "type": "key",
      "topics": [
        {
          "name": "The File System",
          "type": "topic",
          "url": "Additional_Information/The_File_System.htm",
          "blurb": "When using the file system functions or included files with GameMaker it is vitally important to know exactly how the file system works and what things are going on behind the scenes. To that end, this section is designed to explain and clarify exactly how things are stored, where they are stored and what possible limits or workarounds there may be to this system."
        }
      ],
      "keys": []
    },
    {
      "name": "The Start Page",
      "type": "key",
      "topics": [
        {
          "name": "The Start Page",
          "type": "topic",
          "url": "Introduction/The_Start_Page.htm",
          "blurb": "When you first open GameMaker, you will be asked to log in to your YoYo or Opera Account (or register for one if you haven't already - see here). Once registered and logged in, the main GameMaker  IDE will open on the Start Page: "
        }
      ],
      "keys": []
    },
    {
      "name": "then",
      "type": "key",
      "topics": [
        {
          "name": "if / else and Conditional Operators",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm",
          "blurb": "A fundamental feature of most programming languages is the ability to ask a simple question that gives a boolean true or false answer, and in GML this is achieved using the if keyword. A simple if condition takes an expression and will perform one or more statements if the expression resolves as true, with the following basic form:"
        }
      ],
      "keys": []
    },
    {
      "name": "throw",
      "type": "key",
      "topics": [
        {
          "name": "throw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/throw.htm",
          "blurb": "The throw runtime statement permits you to generate your own runtime exceptions, ending the game and showing an error message, using the following syntax:"
        }
      ],
      "keys": []
    },
    {
      "name": "Tile Set Editor",
      "type": "key",
      "topics": [
        {
          "name": "Tile Sets",
          "type": "topic",
          "url": "The_Asset_Editors/Tile_Sets.htm",
          "blurb": "A tile set is a graphic resource for drawing levels and other static components of your game. A tile set is comprised of a single image that is then split into different \"cells\" (tiles), and each tile can then be placed into the room editor to create a complete image. Below you can see two example sprites that can be used as tile sets:"
        }
      ],
      "keys": []
    },
    {
      "name": "Tile Sets - Animated Tiles",
      "type": "key",
      "topics": [
        {
          "name": "Animated Tiles",
          "type": "topic",
          "url": "The_Asset_Editors/Tile_Set_Editors/Animated_Tiles.htm",
          "blurb": "Tiles are generally considered to be static cells within the game room, however with GameMaker it is possible to animate them, just as you would a sprite. Why not just use sprites, you ask? Well, sprites have a certain processing overhead due to them being associated with a bounding box and the way in which they are rendered, but tiles have a much lower processing overhead and so are faster to render. This does come at a price however, in that with tile set animations you are limited to\ncreating animations that must be a power of two in length - ie: of 2, 4, 8, 16, etc... frames - and they must obviously be created within the tile grid, and they must all animate at the same speed (on a per-tile set basis). However, even\nwith these limitations, animated tiles are a powerful feature that can be used to add life and colour to otherwise static environments and backgrounds."
        }
      ],
      "keys": []
    },
    {
      "name": "Tile Sets - Autotiles",
      "type": "key",
      "topics": [
        {
          "name": "Auto Tiles",
          "type": "topic",
          "url": "The_Asset_Editors/Tile_Set_Editors/Auto_Tiles.htm",
          "blurb": "The Auto Tile feature is an incredibly powerful tool that can be used to make level building much easier, whether it is for a top down or side on view project. Essentially, you create an auto tile library, and then whenever you lay down a tile from that library it will \"connect\" with those tiles that are around it to create a seamless wall or platform."
        }
      ],
      "keys": []
    },
    {
      "name": "Tile Sets - Brush Builder",
      "type": "key",
      "topics": [
        {
          "name": "Brush Builder",
          "type": "topic",
          "url": "The_Asset_Editors/Tile_Set_Editors/Brush_Builder.htm",
          "blurb": "By default when you \"paint\" tiles onto a tile map layer in the room editor, you select a single tile and paint with that. However, tile sets are almost always designed to have sections that fit together in different ways to form whole areas or items. For example, an RPG tile set may have landscape feature tiles that can be connected to create larger or smaller features - like trees and buildings - depending on the number of tiles\nused. Now, placing multiple features like this on a room layer would require you to go back and forth many times to change tile, which is not good for your workflow. To resolve this, GameMaker enables you to create tile Brushes in\nthe Tile Set editor, available when you click  on the Brush Builder button:"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_flip",
      "type": "key",
      "topics": [
        {
          "name": "draw_tile",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_tile.htm",
          "blurb": "With this function you can draw any given tile from a tile set - compete with rotations, flips and mirrors - setting the frame (if animated) and the position within the room. The tile set ID value is the tile set index as set in the IDE and the tile data is the data \"blob\" that contains all the information about the tile index and the transformations that have been applied. You can use the function tilemap_get() to get the tile data which can then be manipulated using the Tile Functions, or you can construct it yourself using the following tile constants along with the index value of the tile to create:",
          "syntax": "draw_tile(tileset, tiledata, frame, x, y)"
        },
        {
          "name": "tilemap_set_global_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a all tile maps in the game. The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles will have a total of 256 different tiles in each tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_global_mask(mask)"
        },
        {
          "name": "tilemap_set_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a single tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the mask value. The idea is that if you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles in your tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_mask(tilemap_element_id, mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_get_empty",
      "type": "key",
      "topics": [
        {
          "name": "tile_get_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_empty.htm",
          "blurb": "This function can be used to check whether a given set of tile-data is for an empty tile or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is empty, or false if there is a tile index.",
          "syntax": "tile_get_empty(tiledata)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_get_flip",
      "type": "key",
      "topics": [
        {
          "name": "tile_get_flip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_flip.htm",
          "blurb": "This function can be used to check whether in a given set of tile-data the tile has been flipped or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is flipped, or false if not.",
          "syntax": "tile_get_flip(tiledata)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_get_index",
      "type": "key",
      "topics": [
        {
          "name": "tile_get_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_index.htm",
          "blurb": "This function can be used to get the tile index (the position of the tile within the tile set image) from a set of tile-data. You specify the tile-data, which can be retrieved using the function tilemap_get(), and the function will return an integer value for the index.",
          "syntax": "tile_get_index(tiledata)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_get_mirror",
      "type": "key",
      "topics": [
        {
          "name": "tile_get_mirror",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_mirror.htm",
          "blurb": "This function can be used to check whether in a given set of tile-data the tile has been mirrored or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is mirrored, or false if not.",
          "syntax": "tile_get_mirror(tiledata)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_get_rotate",
      "type": "key",
      "topics": [
        {
          "name": "tile_get_rotate",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_rotate.htm",
          "blurb": "This function can be used to check whether in a given set of tile-data the tile has been rotated 90 degrees or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is rotated, or false if not.",
          "syntax": "tile_get_rotate(tiledata)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_index_mask",
      "type": "key",
      "topics": [
        {
          "name": "draw_tile",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_tile.htm",
          "blurb": "With this function you can draw any given tile from a tile set - compete with rotations, flips and mirrors - setting the frame (if animated) and the position within the room. The tile set ID value is the tile set index as set in the IDE and the tile data is the data \"blob\" that contains all the information about the tile index and the transformations that have been applied. You can use the function tilemap_get() to get the tile data which can then be manipulated using the Tile Functions, or you can construct it yourself using the following tile constants along with the index value of the tile to create:",
          "syntax": "draw_tile(tileset, tiledata, frame, x, y)"
        },
        {
          "name": "tilemap_set_global_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a all tile maps in the game. The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles will have a total of 256 different tiles in each tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_global_mask(mask)"
        },
        {
          "name": "tilemap_set_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a single tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the mask value. The idea is that if you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles in your tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_mask(tilemap_element_id, mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_mirror",
      "type": "key",
      "topics": [
        {
          "name": "draw_tile",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_tile.htm",
          "blurb": "With this function you can draw any given tile from a tile set - compete with rotations, flips and mirrors - setting the frame (if animated) and the position within the room. The tile set ID value is the tile set index as set in the IDE and the tile data is the data \"blob\" that contains all the information about the tile index and the transformations that have been applied. You can use the function tilemap_get() to get the tile data which can then be manipulated using the Tile Functions, or you can construct it yourself using the following tile constants along with the index value of the tile to create:",
          "syntax": "draw_tile(tileset, tiledata, frame, x, y)"
        },
        {
          "name": "tilemap_set_global_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a all tile maps in the game. The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles will have a total of 256 different tiles in each tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_global_mask(mask)"
        },
        {
          "name": "tilemap_set_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a single tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the mask value. The idea is that if you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles in your tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_mask(tilemap_element_id, mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_rotate",
      "type": "key",
      "topics": [
        {
          "name": "draw_tile",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_tile.htm",
          "blurb": "With this function you can draw any given tile from a tile set - compete with rotations, flips and mirrors - setting the frame (if animated) and the position within the room. The tile set ID value is the tile set index as set in the IDE and the tile data is the data \"blob\" that contains all the information about the tile index and the transformations that have been applied. You can use the function tilemap_get() to get the tile data which can then be manipulated using the Tile Functions, or you can construct it yourself using the following tile constants along with the index value of the tile to create:",
          "syntax": "draw_tile(tileset, tiledata, frame, x, y)"
        },
        {
          "name": "tilemap_set_global_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a all tile maps in the game. The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles will have a total of 256 different tiles in each tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_global_mask(mask)"
        },
        {
          "name": "tilemap_set_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a single tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the mask value. The idea is that if you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles in your tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_mask(tilemap_element_id, mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_set_empty",
      "type": "key",
      "topics": [
        {
          "name": "tile_set_empty",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_empty.htm",
          "blurb": "This function can be used to set a given set of tile-data to be an empty tile. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is empty, or false if there is a tile index. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.",
          "syntax": "tile_set_empty(tiledata)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_set_flip",
      "type": "key",
      "topics": [
        {
          "name": "tile_set_flip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_flip.htm",
          "blurb": "This function can be used to set a given set of tile-data to flip the tile or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and then set the flip argument to either true if you want the tile flipped, or false if you want the tile to be in its default, un-flipped state. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.",
          "syntax": "tile_set_flip(tiledata, flip)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_set_index",
      "type": "key",
      "topics": [
        {
          "name": "tile_set_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_index.htm",
          "blurb": "This function can be used to set the tile index (the position of the tile within the tile set image) for a set of tile-data. You give the tile-data, which can be retrieved using the function tilemap_get(), and then the integer value that represents the position of the tile (its index) within the tile set. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.",
          "syntax": "tile_set_index(tiledata, index)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_set_mirror",
      "type": "key",
      "topics": [
        {
          "name": "tile_set_mirror",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_mirror.htm",
          "blurb": "This function can be used to set a given set of tile-data to mirror the tile or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and then set the mirror argument to either true if you want the tile mirrored, or false if you want the tile to be in its default, un-mirrored state. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.",
          "syntax": "tile_set_mirror(tiledata, mirror)"
        }
      ],
      "keys": []
    },
    {
      "name": "tile_set_rotate",
      "type": "key",
      "topics": [
        {
          "name": "tile_set_rotate",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_rotate.htm",
          "blurb": "This function can be used to set a given set of tile-data to rotate the tile 90 degrees or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and then set the rotate argument to either true if you want the tile rotated, or false if you want the tile to be in its default, un-rotated state. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.",
          "syntax": "tile_set_rotate(tiledata, rotate)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_clear",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_clear.htm",
          "blurb": "Using this function you can clear/set all the tiles on a given tile-map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then supply the tile data that you wish to clear the layer with. A default value of 0 will clear all the tiles from the layer (essentially making all tiles \"empty\"), while you can use the dedicated tile_* functions to create your own tile data to clear the tile map with.",
          "syntax": "tilemap_clear(tilemap_element_id, tiledata)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get.htm",
          "blurb": "Using this function you can retrieve the tile data from a cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), as well as the cell x and y position and the function will return the tile data \"blob\". This data is essentially a bit mask that contains the tile index, the flip/rotate/mirror booleans and any mask data that has been applied (see tilemap_set_mask() for details), and the resulting data value can then be used in the tile_* functions to change a tiles properties. Note that we are using x/y cell positions based on the size of the tile map grid and not as a position in the room, so \"cell_x\" is a value from 0 to tile map width, and \"cell_y\" is a value from 0 to tile map height. If you need to get the data for a tile at a specific room position then you need to use the function tilemap_get_at_pixel().",
          "syntax": "tilemap_get(tilemap_element_id, cell_x, cell_y)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_at_pixel",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_at_pixel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_at_pixel.htm",
          "blurb": "Using this function you can retrieve the tile data from a position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()) as well as the x and y position in the room to get the tile data from and the function will return the tile data \"blob\". This data is essentially a bit mask that contains the tile index, the flip/rotate/mirror booleans and any mask data that has been applied (see tilemap_set_mask() for details), and the resulting data value can then be used in the tile_* functions to change a tiles properties. If you need to get the tile data from a specific tile cell you should be using the function tilemap_get() instead.",
          "syntax": "tilemap_get_at_pixel(tilemap_element_id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_cell_x_at_pixel",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_cell_x_at_pixel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_cell_x_at_pixel.htm",
          "blurb": "Using this function you can retrieve the x-axis position of an individual tile map cell by giving the relative x-axis position within the room. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), as well as the x and y position within the room and the function will return the x position of the cell within the tile map for that point. Note that if the value is outside of the tile map area, and no cell is available, it will return -1.",
          "syntax": "tilemap_get_cell_x_at_pixel(tilemap_element_id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_cell_y_at_pixel",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_cell_y_at_pixel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_cell_y_at_pixel.htm",
          "blurb": "Using this function you can retrieve the y-axis position of an individual tile map cell by giving the relative y-axis position within the room. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), as well as the x and y position within the room and the function will return the y position of the cell within the tile map for that point. Note that if the value is outside of the tile map area, and no cell is available, it will return -1.",
          "syntax": "tilemap_get_cell_y_at_pixel(tilemap_element_id, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_frame",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_frame",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_frame.htm",
          "blurb": "Since tiles can be animated, it can sometimes be useful to know which frame is currently being drawn and react accordingly, so with this function you can retrieve the current frame index for a given tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the frame index.",
          "syntax": "tilemap_get_frame(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_global_mask",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_global_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_global_mask.htm",
          "blurb": "This function can be used to retrieve the bit mask value for all tile maps, returning the current mask value or -1 if there is an error or 0 if no mask is specified. For further information on global tile map bit masks, see the function tilemap_set_global_mask().",
          "syntax": "tilemap_get_global_mask()"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_height",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_height.htm",
          "blurb": "Using this function you can retrieve the height (in cells) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the height (number of cells wide).",
          "syntax": "tilemap_get_height(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_mask",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_mask.htm",
          "blurb": "This function can be used to retrieve the bit mask value for the given tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the current mask value or -1 if there is an error or 0 if no mask is specified. For further information on tile map bit masks, see the function tilemap_set_mask().",
          "syntax": "tilemap_get_mask(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_tile_height",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_tile_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_tile_height.htm",
          "blurb": "Using this function you can retrieve the height (in pixels) of each tile cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the tile set cell height.",
          "syntax": "tilemap_get_tile_height(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_tile_width",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_tile_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_tile_width.htm",
          "blurb": "Using this function you can retrieve the width (in pixels) of each tile cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the tile set cell width.",
          "syntax": "tilemap_get_tile_width(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_tileset",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_tileset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_tileset.htm",
          "blurb": "Using this function you can retrieve the index value of the Tile Set asset assigned to a given tile map element on a layer. You give the Tile Map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the Tile Set asset index.",
          "syntax": "tilemap_get_tileset(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_width",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_width.htm",
          "blurb": "Using this function you can retrieve the width (in cells) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the width (number of cells wide).",
          "syntax": "tilemap_get_width(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_x",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_x.htm",
          "blurb": "Using this function you can retrieve the x position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the x-axis position.",
          "syntax": "tilemap_get_x(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_get_y",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_get_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_y.htm",
          "blurb": "Using this function you can retrieve the y position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the y-axis position.",
          "syntax": "tilemap_get_y(tilemap_element_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_set",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set.htm",
          "blurb": "This function can be used to set any cell (grid square) within the tile map element on the layer to a new tile. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the tile data to set as well as the position within the tile map. You can retrieve tile data using the function tilemap_get() and then use the tile_ functions to change it before setting the cell using this function. The function will return true if the tile was successfully set and false if there was an issue and it wasn't set.",
          "syntax": "tilemap_set(tilemap_element_id, tiledata, xcell, ycell)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_set_at_pixel",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_set_at_pixel",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_at_pixel.htm",
          "blurb": "This function can be used to set a cell within the tile map element on the layer to a new tile using the actual position of the tile to change within the room. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the tile data to set as well as the position within the room. You can retrieve tile data using the function tilemap_get_at_pixel() and then use the tile_ functions to change it before setting it again using this function. The function will return true if the tile was successfully set and false if there was an issue and it wasn't set.",
          "syntax": "tilemap_set_at_pixel(tilemap_element_id, tiledata, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_set_global_mask",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_set_global_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a all tile maps in the game. The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles will have a total of 256 different tiles in each tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_global_mask(mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_set_height",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_set_height",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_height.htm",
          "blurb": "This function can be used to resize a tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the new height of the tile map in tile cells.",
          "syntax": "tilemap_set_height(tilemap_element_id, height)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_set_mask",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_set_mask",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_mask.htm",
          "blurb": "This function can be used to set the tile bit mask for a single tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the mask value. The idea is that if you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles in your tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
          "syntax": "tilemap_set_mask(tilemap_element_id, mask)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_set_width",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_set_width",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_width.htm",
          "blurb": "This function can be used to resize a tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the new width of the tile map in tile cells.",
          "syntax": "tilemap_set_width(tilemap_element_id, width)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_tileset",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_tileset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_tileset.htm",
          "blurb": "Using this function you can change the tile set asset assigned to a given tile map element on a layer. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then supply a tile set index and the tile map will be given the new sprite.",
          "syntax": "tilemap_tileset(tilemap_element_id, tileset_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_x",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_x.htm",
          "blurb": "This function controls the position along the x-axis of the room of the asset tile map element on the layer. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then set the x value to use (based on the room coordinates).",
          "syntax": "tilemap_x(tilemap_element_id, x)"
        }
      ],
      "keys": []
    },
    {
      "name": "tilemap_y",
      "type": "key",
      "topics": [
        {
          "name": "tilemap_y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_y.htm",
          "blurb": "This function controls the position along the y-axis of the room of the asset tile map element on the layer. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then set the y value to use (based on the room coordinates).",
          "syntax": "tilemap_y(tilemap_element_id, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "tileset_get_name",
      "type": "key",
      "topics": [
        {
          "name": "tileset_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Tilsets/tileset_get_name.htm",
          "blurb": "This function will return the name as a string of the specified tile set asset. This name is the one that has been specified for the tile set in the Asset Browser of the main GameMaker window. Please note that this is only a string and cannot be used to reference the tile set directly - for that you would need the tile set index. You can, however, use this string to get the tile set index using the returned string along with the function asset_get_index().",
          "syntax": "tileset_get_name(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "tileset_get_texture",
      "type": "key",
      "topics": [
        {
          "name": "tileset_get_texture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Tilsets/tileset_get_texture.htm",
          "blurb": "This function returns a special pointer for the tile set texture page. This value can then be used in other draw functions, particularly in the 2D primitive functions, as well as the Shader functions. You can get more information about the returned texture page using the different texture_ functions found here.",
          "syntax": "tileset_get_texture(tileset)"
        }
      ],
      "keys": []
    },
    {
      "name": "tileset_get_uvs",
      "type": "key",
      "topics": [
        {
          "name": "tileset_get_uvs",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Tilsets/tileset_get_uvs.htm",
          "blurb": "This function returns an array with the UV coordinates and other data for the texture of the given tile set on the texture page. The function returns an array with the following 8 elements:",
          "syntax": "tileset_get_uvs(tileset)"
        }
      ],
      "keys": []
    },
    {
      "name": "Time Source",
      "type": "key",
      "topics": [
        {
          "name": "Built-In Time Sources",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Built_In_Time_Sources.htm",
          "blurb": "You can use the Global Time Source or the Game Time Source as a parent for your custom Time Source. Both Time Sources are globally available."
        },
        {
          "name": "Time Source Expiry Types",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_Expiry_Types.htm",
          "blurb": "Time Sources that use seconds as a unit may not always expire on a game frame. They may expire after a game frame has been processed but before a new frame can start processing."
        },
        {
          "name": "Time Source States",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_States.htm",
          "blurb": "A Time Source can have a state, which can be any one of the constants above. The default state for a newly-created Time Source is time_source_state_initial."
        },
        {
          "name": "Time Source Units",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_Units.htm",
          "blurb": "These constants are used in time_source_create() and time_source_reconfigure() to set the units used for the Time Source's period, and are returned by time_source_get_units()."
        },
        {
          "name": "Time Sources",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Sources.htm",
          "blurb": "A \"Time Source\" is a custom timer you create. It runs for a given period of time, and at the end, it expires."
        }
      ],
      "keys": []
    },
    {
      "name": "Time Source Expiry Types",
      "type": "key",
      "topics": [
        {
          "name": "Time Source Expiry Types",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_Expiry_Types.htm",
          "blurb": "Time Sources that use seconds as a unit may not always expire on a game frame. They may expire after a game frame has been processed but before a new frame can start processing."
        }
      ],
      "keys": []
    },
    {
      "name": "Time Source States",
      "type": "key",
      "topics": [
        {
          "name": "Time Source States",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_States.htm",
          "blurb": "A Time Source can have a state, which can be any one of the constants above. The default state for a newly-created Time Source is time_source_state_initial."
        }
      ],
      "keys": []
    },
    {
      "name": "Time Source Units",
      "type": "key",
      "topics": [
        {
          "name": "Time Source Units",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_Units.htm",
          "blurb": "These constants are used in time_source_create() and time_source_reconfigure() to set the units used for the Time Source's period, and are returned by time_source_get_units()."
        }
      ],
      "keys": []
    },
    {
      "name": "time_bpm_to_seconds",
      "type": "key",
      "topics": [
        {
          "name": "time_bpm_to_seconds",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_bpm_to_seconds.htm",
          "blurb": "This function takes a beats-per-minute value, and returns the length of each beat in seconds.",
          "syntax": "time_bpm_to_seconds(bpm)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_seconds_to_bpm",
      "type": "key",
      "topics": [
        {
          "name": "time_seconds_to_bpm",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_seconds_to_bpm.htm",
          "blurb": "This function takes the length of a beat in seconds, and returns a beats-per-minute value.",
          "syntax": "time_seconds_to_bpm(seconds)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_create",
      "type": "key",
      "topics": [
        {
          "name": "time_source_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_create.htm",
          "blurb": "This function creates a new Time Source. Read Time Sources for an overview.",
          "syntax": "time_source_create(parent, period, units, callback, [args, repetitions, expiry_type])"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_destroy",
      "type": "key",
      "topics": [
        {
          "name": "time_source_destroy",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_destroy.htm",
          "blurb": "This function will destroy the given Time Source.",
          "syntax": "time_source_destroy(id, [destroy_tree])"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_exists",
      "type": "key",
      "topics": [
        {
          "name": "time_source_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_exists.htm",
          "blurb": "This function returns whether the given ID is a valid Time Source.",
          "syntax": "time_source_exists(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_expire_after",
      "type": "key",
      "topics": [
        {
          "name": "Time Source Expiry Types",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_Expiry_Types.htm",
          "blurb": "Time Sources that use seconds as a unit may not always expire on a game frame. They may expire after a game frame has been processed but before a new frame can start processing."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_expire_nearest",
      "type": "key",
      "topics": [
        {
          "name": "Time Source Expiry Types",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_Expiry_Types.htm",
          "blurb": "Time Sources that use seconds as a unit may not always expire on a game frame. They may expire after a game frame has been processed but before a new frame can start processing."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_game",
      "type": "key",
      "topics": [
        {
          "name": "Built-In Time Sources",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Built_In_Time_Sources.htm",
          "blurb": "You can use the Global Time Source or the Game Time Source as a parent for your custom Time Source. Both Time Sources are globally available."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_get_children",
      "type": "key",
      "topics": [
        {
          "name": "time_source_get_children",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_get_children.htm",
          "blurb": "For the given Time Source, this function returns an array containing the Time Source IDs of its children.",
          "syntax": "time_source_get_children(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_get_parent",
      "type": "key",
      "topics": [
        {
          "name": "time_source_get_parent",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_get_parent.htm",
          "blurb": "This function returns the Time Source ID of the given Time Source's parent.",
          "syntax": "time_source_get_parent(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_get_period",
      "type": "key",
      "topics": [
        {
          "name": "time_source_get_period",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_get_period.htm",
          "blurb": "This function returns the period value set for the given Time Source.",
          "syntax": "time_source_get_period(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_get_reps_completed",
      "type": "key",
      "topics": [
        {
          "name": "time_source_get_reps_completed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_get_reps_completed.htm",
          "blurb": "This function returns the number of repetitions the given Time Source has completed since its last reset. That would be the number of times it has expired and executed its callback method.",
          "syntax": "time_source_get_reps_completed(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_get_reps_remaining",
      "type": "key",
      "topics": [
        {
          "name": "time_source_get_reps_remaining",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_get_reps_remaining.htm",
          "blurb": "This function returns the number of repetitions the given Time Source has left until it completely stops.",
          "syntax": "time_source_get_reps_remaining(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_get_state",
      "type": "key",
      "topics": [
        {
          "name": "time_source_get_state",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_get_state.htm",
          "blurb": "This function returns the state of the given Time Source.",
          "syntax": "time_source_get_state(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_get_time_remaining",
      "type": "key",
      "topics": [
        {
          "name": "time_source_get_time_remaining",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_get_time_remaining.htm",
          "blurb": "This function returns the time remaining until the given Time Source expires and executes its callback method.",
          "syntax": "time_source_get_time_remaining(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_get_units",
      "type": "key",
      "topics": [
        {
          "name": "time_source_get_units",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_get_units.htm",
          "blurb": "This function returns the units set for the given Time Source. The period value for the Time Source is expressed in these units.",
          "syntax": "time_source_get_units(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_global",
      "type": "key",
      "topics": [
        {
          "name": "Built-In Time Sources",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Built_In_Time_Sources.htm",
          "blurb": "You can use the Global Time Source or the Game Time Source as a parent for your custom Time Source. Both Time Sources are globally available."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_pause",
      "type": "key",
      "topics": [
        {
          "name": "time_source_pause",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_pause.htm",
          "blurb": "This function pauses the given Time Source. The Time Source must be active when this function is called.",
          "syntax": "time_source_pause(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_reconfigure",
      "type": "key",
      "topics": [
        {
          "name": "time_source_reconfigure",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_reconfigure.htm",
          "blurb": "This function is used to modify the core properties of a Time Source, without having to create an entirely new one.",
          "syntax": "time_source_reconfigure(id, period, units, callback, [args, repetitions, expiry_type])"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_reset",
      "type": "key",
      "topics": [
        {
          "name": "time_source_reset",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_reset.htm",
          "blurb": "This function resets the given Time Source, resetting its timer and repetition information.",
          "syntax": "time_source_reset(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_resume",
      "type": "key",
      "topics": [
        {
          "name": "time_source_resume",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_resume.htm",
          "blurb": "This function resumes the given Time Source and its children. The given Time Source must have been previously paused using time_source_pause().",
          "syntax": "time_source_resume(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_start",
      "type": "key",
      "topics": [
        {
          "name": "time_source_start",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_start.htm",
          "blurb": "This function starts the given Time Source, changing its state to time_source_state_active.",
          "syntax": "time_source_start(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_state_active",
      "type": "key",
      "topics": [
        {
          "name": "Time Source States",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_States.htm",
          "blurb": "A Time Source can have a state, which can be any one of the constants above. The default state for a newly-created Time Source is time_source_state_initial."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_state_initial",
      "type": "key",
      "topics": [
        {
          "name": "Time Source States",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_States.htm",
          "blurb": "A Time Source can have a state, which can be any one of the constants above. The default state for a newly-created Time Source is time_source_state_initial."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_state_paused",
      "type": "key",
      "topics": [
        {
          "name": "Time Source States",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_States.htm",
          "blurb": "A Time Source can have a state, which can be any one of the constants above. The default state for a newly-created Time Source is time_source_state_initial."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_state_stopped",
      "type": "key",
      "topics": [
        {
          "name": "Time Source States",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_States.htm",
          "blurb": "A Time Source can have a state, which can be any one of the constants above. The default state for a newly-created Time Source is time_source_state_initial."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_stop",
      "type": "key",
      "topics": [
        {
          "name": "time_source_stop",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/time_source_stop.htm",
          "blurb": "This function stops the given Time Source and resets its timer. You cannot stop a Time Source that has either not started, or is in a finished state.",
          "syntax": "time_source_stop(id)"
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_units_frames",
      "type": "key",
      "topics": [
        {
          "name": "Time Source Units",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_Units.htm",
          "blurb": "These constants are used in time_source_create() and time_source_reconfigure() to set the units used for the Time Source's period, and are returned by time_source_get_units()."
        }
      ],
      "keys": []
    },
    {
      "name": "time_source_units_seconds",
      "type": "key",
      "topics": [
        {
          "name": "Time Source Units",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Time_Sources/Time_Source_Units.htm",
          "blurb": "These constants are used in time_source_create() and time_source_reconfigure() to set the units used for the Time Source's period, and are returned by time_source_get_units()."
        }
      ],
      "keys": []
    },
    {
      "name": "Timeline Editor",
      "type": "key",
      "topics": [
        {
          "name": "Timelines",
          "type": "topic",
          "url": "The_Asset_Editors/Timelines.htm",
          "blurb": "In most games you will want certain things to happen at precise moments in time. Now, you can try to achieve this by using the alarm events but when things get too complicated this won't work any more, especially as you are limited to only twelve alarms. That's why we have the timeline asset. In a timeline you specify which actions must happen at certain moments in game time, and you can use all the actions that are also available for an object in its different events or code to define this. Once you create a time line you can then assign it to an object, and the instance of that object will then execute the actions at the indicated moments of time when placed or created within a room."
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_add",
      "type": "key",
      "topics": [
        {
          "name": "timeline_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_add.htm",
          "blurb": "With this function you can add a new (empty) timeline asset into your game. the function returns the index of this new time line which should be stored in a variable for use in all further function calls that involve this new time line. You should also be sure to use the function timeline_delete() whenever you no longer wish to use the time line (like at the end of the room) so as to prevent any possible memory leaks that could slow down or crash your game. To add moments to a timeline created in this way, see the function timeline_moment_add_script().",
          "syntax": "timeline_add()"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_clear",
      "type": "key",
      "topics": [
        {
          "name": "timeline_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_clear.htm",
          "blurb": "With this function you can clear a specific time line of \"moments\", removing all codes and actions for that time line and leaving it empty.",
          "syntax": "timeline_clear(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_delete",
      "type": "key",
      "topics": [
        {
          "name": "timeline_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_delete.htm",
          "blurb": "With this function you can delete any time line from your game. if this time line was created in the GameMaker Asset Browser, please note that it is removed completely from the game and trying to call the indexed time line again after using this function will cause an error. If the time line was created dynamically using the timeline_add() function, then this function should be used the moment that the time line is no longer needed to prevent any memory leaks that could slow down (and eventually crash) your game.",
          "syntax": "timeline_delete(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_exists",
      "type": "key",
      "topics": [
        {
          "name": "timeline_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_exists.htm",
          "blurb": "With this function you can check and see whether a time line exists (returns true) or not (returns false). This is particularly useful when creating Timelines dynamically using the timeline_add() function, but you should note that if you search for an uninitialised variable (that would otherwise be assigned to a time line's index) an error will be thrown.",
          "syntax": "timeline_exists(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_get_name",
      "type": "key",
      "topics": [
        {
          "name": "timeline_get_name",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_get_name.htm",
          "blurb": "This function can be used to get the name of a time line as a string. if the time line has been created dynamically using the timeline_add() function, the name returned will have the format \"__newtimelineN\" where \"N\" is the number of the time line (starting from 0). Please note that this is only a string and cannot be used to reference the timeline directly - for\nthat you would need the timeline index. You can, however, use this string to get the timeline index using the returned string along with the function asset_get_index().",
          "syntax": "timeline_get_name(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_index",
      "type": "key",
      "topics": [
        {
          "name": "timeline_index",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_index.htm",
          "blurb": "This variable holds the index of the timeline currently associated with the instance. You can set this to a particular time line to use that one, or set it to -1 to stop using a time line for the instance (if no time line is defined for the instance, -1 is returned too). Note that this does not start the time line - for that use the variable timeline_running.",
          "syntax": "timeline_index"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_loop",
      "type": "key",
      "topics": [
        {
          "name": "timeline_loop",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_loop.htm",
          "blurb": "This variable will return whether the time line is looping (true) or not (false). You can change this variable to switch looping on or off and it works with a negative time line speed (if the time line position goes below 0 it will start again at the last defined moment).",
          "syntax": "timeline_loop"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_max_moment",
      "type": "key",
      "topics": [
        {
          "name": "timeline_max_moment",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_max_moment.htm",
          "blurb": "This function will return the value of the moment in which the timeline performs its final action. So, if you have a timeline with 8 different actions placed 20 moments apart, this function would return the moment value of the last action in that timeline, which would be 160. This function is a good way to test whether a timeline has passed the last active moment when running, since the timeline position will continue incrementing every step of the game whether there are further actions or not.",
          "syntax": "timeline_max_moment(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_moment_add_script",
      "type": "key",
      "topics": [
        {
          "name": "timeline_moment_add_script",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_moment_add_script.htm",
          "blurb": "With this function you can dynamically add a script function to Timelines at any given \"moment\" within that time line, where a \"moment\" is the equivalent of one game tick (or step). In this way you can create a new time line using the timeline_add() function and add different behaviours at any point, or simply modify a previously created time line resource with new behaviours. Note that the function cannot require any additional arguments when using this function, and if you use it to modify a Timeline asset present in the Asset Browser, then all instances that use this timeline will be affected, and the change will last until the end of the game (calling game_restart() will not reset the change either).",
          "syntax": "timeline_moment_add_script(ind, step, script)"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_moment_clear",
      "type": "key",
      "topics": [
        {
          "name": "timeline_moment_clear",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_moment_clear.htm",
          "blurb": "With this function you can clear a specific moment of any previously defined time line of all codes and actions.",
          "syntax": "timeline_moment_clear(ind, step)"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_position",
      "type": "key",
      "topics": [
        {
          "name": "timeline_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_position.htm",
          "blurb": "This variable holds the current position (moment) a time line is currently at. You can change this value to skip parts of the time line, or to repeat parts or to start the time line again from the beginning.",
          "syntax": "timeline_position"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_running",
      "type": "key",
      "topics": [
        {
          "name": "timeline_running",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_running.htm",
          "blurb": "This variable holds current state of the assigned time line and will return true if it is running and false if it is not. You can also set this variable to either true or false to start and stop the time line at any time. it should be noted that a stopped time line is not reset, and so starting it again at a later time will start it from the exact moment that it was stopped at.",
          "syntax": "timeline_running"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_size",
      "type": "key",
      "topics": [
        {
          "name": "timeline_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_size.htm",
          "blurb": "With this function you can get the total number of active moments for a timeline (an \"active\" moment is one which has code or GML Visual added to it). This can be handy when creating dynamic timelines using the timeline_moment_add_script() and timeline_moment_clear() functions, as you can check to see if a given timeline has the correct number of active moments or none at all.",
          "syntax": "timeline_size(ind)"
        }
      ],
      "keys": []
    },
    {
      "name": "timeline_speed",
      "type": "key",
      "topics": [
        {
          "name": "timeline_speed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_speed.htm",
          "blurb": "Normally, in each step the position in the time line is increased by 1, however you can change this amount by setting this variable to a different value. You can use real numbers (like 0.5, or 2.4 for example) and if the value is larger than one, several moments can happen within the same time step (they will all be performed in the same order as defined for the time line, so no actions will be skipped).",
          "syntax": "timeline_speed"
        }
      ],
      "keys": []
    },
    {
      "name": "timezone_local",
      "type": "key",
      "topics": [
        {
          "name": "date_get_timezone",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_timezone.htm",
          "blurb": "This function gets the base time zone being used for all the rest of the date and time functions. This time zone can either be local (as set by the system) or UTC, and the function will return one of the following constants:",
          "syntax": "date_get_timezone()"
        },
        {
          "name": "date_set_timezone",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_set_timezone.htm",
          "blurb": "Sets the base time zone to use for all the rest of the date and time functions. This time zone can either be local (as set by the system) or UTC, and you would use one of the following constants to define which is being used (by default this is local time):",
          "syntax": "date_set_timezone(timezone)"
        }
      ],
      "keys": []
    },
    {
      "name": "timezone_utc",
      "type": "key",
      "topics": [
        {
          "name": "date_get_timezone",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_timezone.htm",
          "blurb": "This function gets the base time zone being used for all the rest of the date and time functions. This time zone can either be local (as set by the system) or UTC, and the function will return one of the following constants:",
          "syntax": "date_get_timezone()"
        },
        {
          "name": "date_set_timezone",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_set_timezone.htm",
          "blurb": "Sets the base time zone to use for all the rest of the date and time functions. This time zone can either be local (as set by the system) or UTC, and you would use one of the following constants to define which is being used (by default this is local time):",
          "syntax": "date_set_timezone(timezone)"
        }
      ],
      "keys": []
    },
    {
      "name": "tm_countvsyncs",
      "type": "key",
      "topics": [
        {
          "name": "display_set_timing_method",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_timing_method.htm",
          "blurb": "This function can be used to set the timing method to be used for rendering your game. The method can be one of the following constants:",
          "syntax": "display_set_timing_method(method)"
        }
      ],
      "keys": []
    },
    {
      "name": "tm_sleep",
      "type": "key",
      "topics": [
        {
          "name": "display_set_timing_method",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_timing_method.htm",
          "blurb": "This function can be used to set the timing method to be used for rendering your game. The method can be one of the following constants:",
          "syntax": "display_set_timing_method(method)"
        }
      ],
      "keys": []
    },
    {
      "name": "true",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        },
        {
          "name": "Maths And Numbers",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Maths_And_Numbers/Maths_And_Numbers.htm",
          "blurb": "GameMaker contains a large number functions to deal with different areas of mathematics, numbers of all types and the date and time. Most of these functions can be found in the sections listed below:"
        }
      ],
      "keys": []
    },
    {
      "name": "try",
      "type": "key",
      "topics": [
        {
          "name": "try / catch / finally",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/try_catch_finally.htm",
          "blurb": "The try, catch and finally statements can be used in your game for error checking and permit you to test out blocks of code and control what happens if any runtime exceptions occur. Using these will prevent the exception ending the game and showing the standard error message to the user, but this means that you will have to handle what happens next in that case, like saving out log files - for example - and ending the game gracefully (note that if you choose to do nothing, your game may become unstable and not perform correctly)."
        }
      ],
      "keys": []
    },
    {
      "name": "ty_real",
      "type": "key",
      "topics": [
        {
          "name": "external_define",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
          "blurb": "This function can be used to define an external function call to a specific dll (for Windows) or dylib (for Mac). This file can be either an included file or part of an extension.",
          "syntax": "external_define(dll, name, calltype, restype, argnumb, argtype[0], argtype[1], ...argtype[10])"
        }
      ],
      "keys": []
    },
    {
      "name": "ty_string",
      "type": "key",
      "topics": [
        {
          "name": "external_define",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
          "blurb": "This function can be used to define an external function call to a specific dll (for Windows) or dylib (for Mac). This file can be either an included file or part of an extension.",
          "syntax": "external_define(dll, name, calltype, restype, argnumb, argtype[0], argtype[1], ...argtype[10])"
        }
      ],
      "keys": []
    },
    {
      "name": "Type Tables",
      "type": "key",
      "topics": [
        {
          "name": "Type Tables",
          "type": "topic",
          "url": "Additional_Information/Type_Tables.htm",
          "blurb": "This page shows the all the different results that you may get when performing arithmetic operations on the different data types in GML."
        }
      ],
      "keys": []
    },
    {
      "name": "typeof",
      "type": "key",
      "topics": [
        {
          "name": "typeof",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/typeof.htm",
          "blurb": "This function returns the data type of any given variable as a string. The possible return values are listed in the table below:",
          "syntax": "typeof(variable)"
        }
      ],
      "keys": []
    },
    {
      "name": "undefined",
      "type": "key",
      "topics": [
        {
          "name": "Constants",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Constants.htm",
          "blurb": "A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values cannot be changed after they have been declared. This makes them ideal for holding values that are used throughout the game to identify special data."
        }
      ],
      "keys": []
    },
    {
      "name": "until",
      "type": "key",
      "topics": [
        {
          "name": "do / until",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/do___until.htm",
          "blurb": "A do function is another way of iterating over one or more statements multiple times, and is really a \"do... until\" statement as you cannot have one without the other since you are telling GameMaker to do something until a specific expression returns true. It has this form:"
        }
      ],
      "keys": []
    },
    {
      "name": "Updating Guide",
      "type": "key",
      "topics": [
        {
          "name": "Updating Guide",
          "type": "topic",
          "url": "Setting_Up_And_Version_Information/Updating_Guide.htm",
          "blurb": "The GameMaker IDE will periodically check for updates and then download them automatically. Some of these updates will be optional and you can choose not to install them if you don't wish to or think that some of the changes may break a project that you are about to publish. However there are some updates that include important fixes or improvements that cannot be skipped and GameMaker will force an update in these cases."
        }
      ],
      "keys": []
    },
    {
      "name": "url_get_domain",
      "type": "key",
      "topics": [
        {
          "name": "url_get_domain",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/url_get_domain.htm",
          "blurb": "You can use this to get the domain where your HTML5 game is being played.",
          "syntax": "url_get_domain()"
        }
      ],
      "keys": []
    },
    {
      "name": "url_open",
      "type": "key",
      "topics": [
        {
          "name": "url_open",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/url_open.htm",
          "blurb": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser.",
          "syntax": "url_open(url)"
        }
      ],
      "keys": []
    },
    {
      "name": "url_open_ext",
      "type": "key",
      "topics": [
        {
          "name": "url_open_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/url_open_ext.htm",
          "blurb": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser. The \"target\" parameter that you specify is the same as the standard JavaScript \"name\" value when you use the open() method, and you should be aware that all but \"_self\" may result in the browser blocking, or asking the user if they wish to allow it.",
          "syntax": "url_open_ext(url, target)"
        }
      ],
      "keys": []
    },
    {
      "name": "url_open_full",
      "type": "key",
      "topics": [
        {
          "name": "url_open_full",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/url_open_full.htm",
          "blurb": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser. The \"target\" parameter that you specify is the same as the standard JavaScript \"name\" value when you use the open() method (be aware that all but \"_self\" may result in the browser blocking, or asking the user if they wish to allow it) and the \"options\" is the same as the JavaScript \"specs\" parameter for controlling what properties the new window/tab should display (not all browsers may support all features).",
          "syntax": "url_open_full(url, target, options)"
        }
      ],
      "keys": []
    },
    {
      "name": "var",
      "type": "key",
      "topics": [
        {
          "name": "Local Variables",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables/Local_Variables.htm",
          "blurb": "A local variable is one that we create for a specific event or function only and then discard when the event or function has finished. If it is created in a custom function then the local variable is only available to the function and then discarded when the function has finished. Why would we need them? Well, variables take up space in memory and it may be that we are only going to use them for one operation or function in which case we only need to have it in memory for that short time that it's used. This keeps your code base clean and tidy as well as keeping memory space optimised for the things that really need it. To declare a local variable we use the var operator like this:"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_global_exists",
      "type": "key",
      "topics": [
        {
          "name": "variable_global_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_global_exists.htm",
          "blurb": "With this function you can check whether a global scope variable exists or not. You supply the global variable name to check for as a string (see example code below) and the function will return true if a global variable with the given name exists or false otherwise.",
          "syntax": "variable_global_exists(name)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_global_get",
      "type": "key",
      "topics": [
        {
          "name": "variable_global_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_global_get.htm",
          "blurb": "With this function you can get the value from a given named global variable. You supply the name of the global variable to get the value of as a string (see example code below) and the function will return the value held by the global variable or undefined if the variable does not exist.",
          "syntax": "variable_global_get(name)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_global_set",
      "type": "key",
      "topics": [
        {
          "name": "variable_global_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_global_set.htm",
          "blurb": "With this function you can set the value of a given global variable. You supply the name of the global variable to set the value of as a string (see example code below), and then the value to set (can be any valid data type). If the global variable does not exist already in the game it will be created and then assigned the value.",
          "syntax": "variable_global_set(name, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_instance_exists",
      "type": "key",
      "topics": [
        {
          "name": "variable_instance_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_exists.htm",
          "blurb": "With this function you can check whether an instance scope variable exists or not. You supply the unique instance ID value (which can be found from the Instance Properties in the room editor, or is returned when you call the function instance_create_layer()) as well as the variable name to check for as a string (see example code below). The function will return true if a variable with the given name exists for the instance and false otherwise.",
          "syntax": "variable_instance_exists(instance_id, name)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_instance_get",
      "type": "key",
      "topics": [
        {
          "name": "variable_instance_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_get.htm",
          "blurb": "With this function you can get the value from a given named variable. You supply the unique instance ID value (which can be found from the Instance Properties in the room editor, or is returned when you call the function instance_create_layer()) as well as the name of the variable to get the value of as a string (see example code below). The function will return the value held by the variable, or undefined if the variable does not exist.",
          "syntax": "variable_instance_get(instance_id, name)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_instance_get_names",
      "type": "key",
      "topics": [
        {
          "name": "variable_instance_get_names",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_get_names.htm",
          "blurb": "With this function you can retrieve an array populated with the instance variable names for an instance, or the global variables for a game. When you pass in an instance ID value, each entry in the array will be a string of the variable name that corresponds to an instance scope variable that has been created in the instance. However if you pass in the keyword global, each entry in the array will be a string of the variable name that corresponds to an global scope variable.",
          "syntax": "variable_instance_get_names(instance_id/global)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_instance_names_count",
      "type": "key",
      "topics": [
        {
          "name": "variable_instance_names_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_names_count.htm",
          "blurb": "With this function you can find the total number number of variables defined for an instance. You supply the instance ID to check, and the function will return an integer value for the number of variables encountered, or (if no instance of the given ID exists) -1.",
          "syntax": "variable_instance_names_count(instance_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_instance_set",
      "type": "key",
      "topics": [
        {
          "name": "variable_instance_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_set.htm",
          "blurb": "With this function you can set the value of a given variable in an instance. You supply the unique instance ID value (which can be found from the Instance Properties in the room editor, or is returned when you call the function instance_create_layer()) as well as the name of the variable to set the value of as a string (see example code below), and then finally the value to set (can be any valid data type). If the variable does not exist already in the instance it will be created and then assigned the value.",
          "syntax": "variable_instance_set(instance_id, name, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_struct_exists",
      "type": "key",
      "topics": [
        {
          "name": "variable_struct_exists",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_exists.htm",
          "blurb": "With this function you can check whether a variable exists within the given struct or not. You supply the struct reference to use as well as the variable name to check for as a string (see example code below). The function will return true if a variable with the given name exists for the struct and false otherwise.",
          "syntax": "variable_struct_exists(struct, name)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_struct_get",
      "type": "key",
      "topics": [
        {
          "name": "variable_struct_get",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_get.htm",
          "blurb": "With this function you can get the value from a given named variable within a struct. You supply the struct reference as well as the name of the variable to get the value of as a string (see example code below). The function will return the value held by the variable or undefined if the named variable does not exist.",
          "syntax": "variable_struct_get(struct, name)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_struct_get_names",
      "type": "key",
      "topics": [
        {
          "name": "variable_struct_get_names",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_get_names.htm",
          "blurb": "With this function you can retrieve an array populated with the variable names from a struct. You pass in the struct reference to check, and each entry in the array will be a string of the variable names that the struct contains.",
          "syntax": "variable_struct_get_names(struct)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_struct_names_count",
      "type": "key",
      "topics": [
        {
          "name": "variable_struct_names_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_names_count.htm",
          "blurb": "With this function you can find the total number number of variables defined for a struct. You supply the struct ID to check, and the function will return an integer value for the number of variables encountered, or (if no struct of the given ID exists) -1.",
          "syntax": "variable_struct_names_count(struct_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_struct_remove",
      "type": "key",
      "topics": [
        {
          "name": "variable_struct_remove",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_remove.htm",
          "blurb": "With this function you can remove a variable from a struct. You supply the struct ID to remove the variable from and the string name of the variable to be removed.",
          "syntax": "variable_struct_remove(struct, name)"
        }
      ],
      "keys": []
    },
    {
      "name": "variable_struct_set",
      "type": "key",
      "topics": [
        {
          "name": "variable_struct_set",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_set.htm",
          "blurb": "With this function you can set the value of a given variable in a struct. You supply the struct reference as well as the name of the variable to set the value of as a string (see example code below), and then finally the value to set (can be any valid data type). If the variable does not exist already in the struct it will be created and then assigned the value.",
          "syntax": "variable_struct_set(struct, name, val)"
        }
      ],
      "keys": []
    },
    {
      "name": "Variables And Variable Scope",
      "type": "key",
      "topics": [
        {
          "name": "Variables And Variable Scope",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm",
          "blurb": "Like any programming language GML uses variables as the basic unit for most programming operations. Variables are used to store information in the devices memory for later (or instant) use, and they are given a name so that you can refer to them in runtime and script functions. A variable in GML can store many different data types, like a real number (eg: 100, 2.456575, -56 etc...), a string (eg: \"Hello world!\"), an integer (eg: 1, 556, -7), or a boolean (true or false), as well as other things:"
        }
      ],
      "keys": []
    },
    {
      "name": "Vectors",
      "type": "key",
      "topics": [
        {
          "name": "Vectors",
          "type": "topic",
          "url": "Additional_Information/Vectors.htm",
          "blurb": "At some point when creating a game of any complexity you will probably have to deal with vectors. They are used in physics, in AI, in trigonometry and many other situations, but what is a vector? Well, to put it simply, a vector is a directed quantity. Let's start by looking at a 1 dimensional vector - which is just the same as a single number - by drawing a numbered line with an arrow starting at zero and ending at 5. This is the vector \"a\" which is equal to 5 and if we draw another arrow starting at the 5 and ending at the 8 we have vector \"b\" which is equal to 3:"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_argb",
      "type": "key",
      "topics": [
        {
          "name": "vertex_argb",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_argb.htm",
          "blurb": "This function will set the ARGB values for the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the red, green, blue and alpha values that you wish to use as a single 32-bit unsigned integer - alpha sample in the highest 8 bits, followed by the red sample, green sample and finally the blue sample in the lowest 8 bits. You can use hex notation ($AARRGGBB) a real number or use any of the make_colour_*() functions to define the colour value.",
          "syntax": "vertex_argb(buffer, argb)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_begin",
      "type": "key",
      "topics": [
        {
          "name": "vertex_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_begin.htm",
          "blurb": "With this function you begin the definition of a custom primitive. You assign a buffer to write the primitive to, and the vertex format to use (previously defined using the vertex format functions). You would then define the necessary points for each vertex of the primitive before calling vertex_end() to finalise the primitive creation.",
          "syntax": "vertex_begin(buffer, format)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_color",
      "type": "key",
      "topics": [
        {
          "name": "vertex_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_colour.htm",
          "blurb": "If your defined vertex format takes a colour value you can use this function to add that data to the vertex being defined for the current primitive. The function needs a buffer to store the data in and will take either a colour constant, or a hex value (using the standard GameMaker format of BGR, eg: $FF0000 for blue) as well as an alpha value from 0 (transparent) to 1 (fully opaque).",
          "syntax": "vertex_colour(buffer, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_colour",
      "type": "key",
      "topics": [
        {
          "name": "vertex_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_colour.htm",
          "blurb": "If your defined vertex format takes a colour value you can use this function to add that data to the vertex being defined for the current primitive. The function needs a buffer to store the data in and will take either a colour constant, or a hex value (using the standard GameMaker format of BGR, eg: $FF0000 for blue) as well as an alpha value from 0 (transparent) to 1 (fully opaque).",
          "syntax": "vertex_colour(buffer, colour, alpha)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_create_buffer",
      "type": "key",
      "topics": [
        {
          "name": "vertex_create_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer.htm",
          "blurb": "With this function you can create a new vertex buffer. This is a special grow buffer created by GameMaker which is pre-formatted for use when building primitives (for use with shaders, for example). The function will return an index for the buffer which should then be used in all further calls to it.",
          "syntax": "vertex_create_buffer()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_create_buffer_ext",
      "type": "key",
      "topics": [
        {
          "name": "vertex_create_buffer_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer_ext.htm",
          "blurb": "As with the function vertex_create_buffer(), this function will create a new vertex buffer. This is a special grow buffer created by GameMaker which is pre-formatted for use when building primitives for use with shaders. You can specify an initial starting size for the buffer (in bytes) and it will return an index for the buffer which should then be used in all further calls to the buffer.",
          "syntax": "vertex_create_buffer_ext(size)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_create_buffer_from_buffer",
      "type": "key",
      "topics": [
        {
          "name": "vertex_create_buffer_from_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer_from_buffer.htm",
          "blurb": "As with the function vertex_create_buffer(), this function will create a new vertex buffer, only now the vertex data it stores is copied from the regular buffer that is specified as the source. The buffer created is a special grow buffer which is pre-formatted with the vertex format for building primitives for use with (for example) shaders. This function requires that you supply the pointer to a previously created regular buffer, and a vertex format that should be applied to the copied data.",
          "syntax": "vertex_create_buffer_from_buffer(buffer, format)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_create_buffer_from_buffer_ext",
      "type": "key",
      "topics": [
        {
          "name": "vertex_create_buffer_from_buffer_ext",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer_from_buffer_ext.htm",
          "blurb": "As with the function vertex_create_buffer(), this function will create a new vertex buffer, only now the vertex data it stores is copied from the regular buffer that is specified as the source. The buffer is pre-formatted with the vertex format for building primitives for use with (for example) shaders, and you can also supply an offset within the source buffer to copy from and the number of vertices that the final buffer should have. Note that if the number of vertices does not match those being copied you may get corrupted vertex data.",
          "syntax": "vertex_create_buffer_from_buffer_ext(buffer, format, src_offset, vert_num)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_delete_buffer",
      "type": "key",
      "topics": [
        {
          "name": "vertex_delete_buffer",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_delete_buffer.htm",
          "blurb": "This function can be used to remove a previously created vertex buffer (see vertex_create_buffer()) from system memory. This will also remove all vertex data for any custom primitives that it contained.",
          "syntax": "vertex_delete_buffer(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_end",
      "type": "key",
      "topics": [
        {
          "name": "vertex_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_end.htm",
          "blurb": "With this function you end the building of the custom primitive. Once you call this command the primitive can be used in the vertex_submit() function for use in a shader or you can freeze the buffer (making the vertex buffer used read-only and much faster) using vertex_freeze().",
          "syntax": "vertex_end(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_float1",
      "type": "key",
      "topics": [
        {
          "name": "vertex_float1",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_float1.htm",
          "blurb": "This function will add a floating point value to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.",
          "syntax": "vertex_float1(buffer, float)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_float2",
      "type": "key",
      "topics": [
        {
          "name": "vertex_float2",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_float2.htm",
          "blurb": "This function will add two floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.",
          "syntax": "vertex_float2(buffer, float, float)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_float3",
      "type": "key",
      "topics": [
        {
          "name": "vertex_float3",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_float3.htm",
          "blurb": "This function will add three floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.",
          "syntax": "vertex_float3(buffer, float, float, float)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_float4",
      "type": "key",
      "topics": [
        {
          "name": "vertex_float4",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_float4.htm",
          "blurb": "This function will add four floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.",
          "syntax": "vertex_float4(buffer, float, float, float, float)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_add_color",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm",
          "blurb": "Tell GameMaker to accept colour data as part of the new vertex format being created.",
          "syntax": "vertex_format_add_colour()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_add_colour",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_colour",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm",
          "blurb": "Tell GameMaker to accept colour data as part of the new vertex format being created.",
          "syntax": "vertex_format_add_colour()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_add_custom",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_add_normal",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_normal",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_normal.htm",
          "blurb": "Tell GameMaker to accept surface normal data (nx, ny and nz) as part of the new vertex format being created.",
          "syntax": "vertex_format_add_normal()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_add_position",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm",
          "blurb": "Tell GameMaker to accept 2D positional data (x and y) as part of the new vertex format being created.",
          "syntax": "vertex_format_add_position()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_add_position_3d",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_position_3d",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm",
          "blurb": "Tell GameMaker to accept 3D positional data (x, y and z) as part of the new vertex format being created.",
          "syntax": "vertex_format_add_position_3d()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_add_texcoord",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_texcoord",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm",
          "blurb": "Tell GameMaker to accept texture position data (u and v) as part of the new vertex format being created.",
          "syntax": "vertex_format_add_texcoord()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_begin",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_begin",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_begin.htm",
          "blurb": "Before you can define your new vertex format you must tell GameMaker that you're doing so using this function. You must call this first, then define the format values using the appropriate functions, and finally call vertex_format_end() to finish the definition and return the new format \"handle\".",
          "syntax": "vertex_format_begin()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_delete",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm",
          "blurb": "This function must be called whenever you are finished using any created vector formats. You provide the format ID value (as returned by the function vector_format_end()), and this function will free the memory associated with it. Note that if you try to use this format again after calling this function, you will get an error.",
          "syntax": "vertex_format_delete(formatID)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_format_end",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_end",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_end.htm",
          "blurb": "This function must be called after defining any new vertex format. It returns the new format \"handle\" (index) which must be used in all further vertex functions that refer to this new format.",
          "syntax": "vertex_format_end()"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_freeze",
      "type": "key",
      "topics": [
        {
          "name": "vertex_freeze",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_freeze.htm",
          "blurb": "This function can be used to \"freeze\" a vertex buffer. This buffer becomes read-only, meaning that should you need to change it, you would have to delete the whole buffer and re-create it. A frozen buffer can be submitted to the shader faster than a normal, dynamic buffer and is recommended for those effects that require an unchanging custom primitive for the duration of a level or the game.",
          "syntax": "vertex_freeze(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_get_buffer_size",
      "type": "key",
      "topics": [
        {
          "name": "vertex_get_buffer_size",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_get_buffer_size.htm",
          "blurb": "With this function you can get the size of the given vertex buffer in bytes.",
          "syntax": "vertex_get_buffer_size(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_get_number",
      "type": "key",
      "topics": [
        {
          "name": "vertex_get_number",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_get_number.htm",
          "blurb": "With this function you can find out the number of individual vertices defined in any given vertex buffer.",
          "syntax": "vertex_get_number(buffer)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_normal",
      "type": "key",
      "topics": [
        {
          "name": "vertex_normal",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_normal.htm",
          "blurb": "This function will add surface normal data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x, y and z component parts of the normal.",
          "syntax": "vertex_normal(buffer, nx, ny, nz)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_position",
      "type": "key",
      "topics": [
        {
          "name": "vertex_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_position.htm",
          "blurb": "This function will add 2D position data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x and y position for drawing.",
          "syntax": "vertex_position(buffer, x, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_position_3d",
      "type": "key",
      "topics": [
        {
          "name": "vertex_position_3d",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_position_3d.htm",
          "blurb": "This function will add 3D position data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x, y and z position for drawing.",
          "syntax": "vertex_position_3d(buffer, x, y, z)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_submit",
      "type": "key",
      "topics": [
        {
          "name": "vertex_submit",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
          "blurb": "You can use this function to submit the contents of a vertex buffer to the graphics pipeline for use with a shader. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.",
          "syntax": "vertex_submit(buffer, primitive, texture)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_texcoord",
      "type": "key",
      "topics": [
        {
          "name": "vertex_texcoord",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_texcoord.htm",
          "blurb": "This function will set the texture coordinates to use for the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the UV position within the texture to use.",
          "syntax": "vertex_texcoord(buffer, u, v)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_type_colour",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_type_float1",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_type_float2",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_type_float3",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_type_float4",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_type_ubyte4",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_ubyte4",
      "type": "key",
      "topics": [
        {
          "name": "vertex_ubyte4",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_ubyte4.htm",
          "blurb": "This function will add four unsigned byte values (0 - 255) to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.",
          "syntax": "vertex_ubyte4(buffer, byte, byte, byte, byte)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_binormal",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_blendindices",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_blendweight",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_colour",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_depth",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_fog",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_normal",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_position",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_sample",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_tangent",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "vertex_usage_textcoord",
      "type": "key",
      "topics": [
        {
          "name": "vertex_format_add_custom",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
          "blurb": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
          "syntax": "vertex_format_add_custom(type, usage)"
        }
      ],
      "keys": []
    },
    {
      "name": "video_close",
      "type": "key",
      "topics": [
        {
          "name": "video_close",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_close.htm",
          "blurb": "This function closes the video file that is currently loaded. Ensure that this is only called after a video_open() call, otherwise it will not do anything.",
          "syntax": "video_close()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_draw",
      "type": "key",
      "topics": [
        {
          "name": "video_draw",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_draw.htm",
          "blurb": "This function draws the current frame of the opened video to a surface (or two surfaces). It returns the surface(s) as part of its return array, which can be drawn manually.",
          "syntax": "video_draw()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_enable_loop",
      "type": "key",
      "topics": [
        {
          "name": "video_enable_loop",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_enable_loop.htm",
          "blurb": "This function enables or disables looping for the currently loaded video. Set the enable argument to true to enable looping, and false to disable it.",
          "syntax": "video_enable_loop(enable)"
        }
      ],
      "keys": []
    },
    {
      "name": "video_get_duration",
      "type": "key",
      "topics": [
        {
          "name": "video_get_duration",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_get_duration.htm",
          "blurb": "This function returns the duration of the currently loaded video, in milliseconds.",
          "syntax": "video_get_duration()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_get_format",
      "type": "key",
      "topics": [
        {
          "name": "video_get_format",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_get_format.htm",
          "blurb": "This function returns the colour format of the currently loaded video. This can be any one of the following constants:",
          "syntax": "video_get_format()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_get_position",
      "type": "key",
      "topics": [
        {
          "name": "video_get_position",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_get_position.htm",
          "blurb": "This function returns the current position of the loaded video, in milliseconds. This indicates how much the video has played, out of its whole duration.",
          "syntax": "video_get_position()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_get_status",
      "type": "key",
      "topics": [
        {
          "name": "video_get_status",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_get_status.htm",
          "blurb": "This function returns the status of the currently loaded video. The status can be any one of the following constants:",
          "syntax": "video_get_status()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_get_volume",
      "type": "key",
      "topics": [
        {
          "name": "video_get_volume",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_get_volume.htm",
          "blurb": "This function returns the volume of the currently loaded video, which is a value between 0 and 1. You can change the volume of the loaded video using video_set_volume().",
          "syntax": "video_get_volume()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_is_looping",
      "type": "key",
      "topics": [
        {
          "name": "video_is_looping",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_is_looping.htm",
          "blurb": "This function returns whether the currently loaded video is set to loop (true) or not (false). You can set a video to loop by calling video_enable_loop().",
          "syntax": "video_is_looping()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_open",
      "type": "key",
      "topics": [
        {
          "name": "video_open",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_open.htm",
          "blurb": "This function opens a video file using the path specified. The path can refer to a file in the Included Files of your project, a file locally present on the user's device, or a URL for loading a file from the internet (which may not work on all platforms).",
          "syntax": "video_open(path)"
        }
      ],
      "keys": []
    },
    {
      "name": "video_pause",
      "type": "key",
      "topics": [
        {
          "name": "video_pause",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_pause.htm",
          "blurb": "This function pauses the video file that is currently loaded. You can resume it by calling video_resume() any time after this function.",
          "syntax": "video_pause()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_resume",
      "type": "key",
      "topics": [
        {
          "name": "video_resume",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_resume.htm",
          "blurb": "This function resumes the video file that is currently loaded. It must have been paused with video_pause() before calling this function.",
          "syntax": "video_resume()"
        }
      ],
      "keys": []
    },
    {
      "name": "video_seek_to",
      "type": "key",
      "topics": [
        {
          "name": "video_seek_to",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_seek_to.htm",
          "blurb": "This function allows you to seek to the given position in the currently loaded video. You specify the time value to seek to, which is in milliseconds.",
          "syntax": "video_seek_to(time)"
        }
      ],
      "keys": []
    },
    {
      "name": "video_set_volume",
      "type": "key",
      "topics": [
        {
          "name": "video_set_volume",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/video_set_volume.htm",
          "blurb": "This function changes the audio volume of the video that is currently loaded. It takes a value between 0 and 1, where 0 is silent and 1 is the maximum volume.",
          "syntax": "video_set_volume(value)"
        }
      ],
      "keys": []
    },
    {
      "name": "videos",
      "type": "key",
      "topics": [
        {
          "name": "Video Playback",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/Videos.htm",
          "blurb": "Follow these steps to load videos at runtime and play them:"
        }
      ],
      "keys": []
    },
    {
      "name": "view_camera",
      "type": "key",
      "topics": [
        {
          "name": "view_camera",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_camera.htm",
          "blurb": "This array holds the unique camera ID assigned to the given view port, and can be set to a new camera or read to get the current camera, returning -1 if no camera is assigned. You can have up to 8 view ports active in a room (array values 0 through 7), and can assign a camera to any of them by simply setting this variable to the camera ID value (as returned by the functions camera_create() or camera_create_view()). If you have set the camera to a view port through the Room Editor, this variable will hold the camera ID for that port.",
          "syntax": "view_camera[0 ... 7]"
        }
      ],
      "keys": []
    },
    {
      "name": "view_current",
      "type": "key",
      "topics": [
        {
          "name": "view_current",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_current.htm",
          "blurb": "This read only variable is only valid in the Draw Event and returns the current view port being rendered. The return value will change during the draw event when you have various views as the draw event is called once for each view port in succession. So when (for example) you are using view port[0] and view port[1] in your game room, the draw event for ALL instances will be run twice, once for each port, and with this variable you can check to see what view is currently being drawn. In general, this is used to only render specific details to a single port when multiple view ports are visible in the room at the same time. See the example code below.",
          "syntax": "view_current"
        }
      ],
      "keys": []
    },
    {
      "name": "view_enabled",
      "type": "key",
      "topics": [
        {
          "name": "view_enabled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_enabled.htm",
          "blurb": "This variable controls whether any view ports that are visible within the room are enabled or not. If you have view ports set to visible and then disable this option, the whole room will be drawn to the screen scaled to the window size instead of the different cameras being drawn through the view ports.",
          "syntax": "view_enabled"
        }
      ],
      "keys": []
    },
    {
      "name": "view_get_camera",
      "type": "key",
      "topics": [
        {
          "name": "view_get_camera",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_camera.htm",
          "blurb": "This function can be used to retrieve the unique camera ID value for the camera assigned to the given view port (from 0 - 7). If no camera is assigned, the function will return -1.",
          "syntax": "view_get_camera(view_port)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_get_hport",
      "type": "key",
      "topics": [
        {
          "name": "view_get_hport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_hport.htm",
          "blurb": "This function can be used to retrieve the height of the given view port.",
          "syntax": "view_get_hport(view_port)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_get_surface_id",
      "type": "key",
      "topics": [
        {
          "name": "view_get_surface_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_surface_id.htm",
          "blurb": "This function can be used to retrieve the unique ID value for the surface assigned to the given view port (will return -1 if no surface has been assigned).",
          "syntax": "view_get_surface_id(view_port)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_get_visible",
      "type": "key",
      "topics": [
        {
          "name": "view_get_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_visible.htm",
          "blurb": "This function can be used to check the visibility of the given view port. The function will return true if it is visible and false if it is not.",
          "syntax": "view_get_visible(view_port)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_get_wport",
      "type": "key",
      "topics": [
        {
          "name": "view_get_wport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_wport.htm",
          "blurb": "This function can be used to retrieve the width of the given view port.",
          "syntax": "view_get_wport(view_port)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_get_xport",
      "type": "key",
      "topics": [
        {
          "name": "view_get_xport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_xport.htm",
          "blurb": "This function can be used to retrieve the x position of the given view port.",
          "syntax": "view_get_xport(view_port)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_get_yport",
      "type": "key",
      "topics": [
        {
          "name": "view_get_yport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_yport.htm",
          "blurb": "This function can be used to retrieve the y position of the given view port.",
          "syntax": "view_get_yport(view_port)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_hport",
      "type": "key",
      "topics": [
        {
          "name": "view_hport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_hport.htm",
          "blurb": "This variable can be used to get or to set the height of the specified view port. The height of the view port (or combined view ports if more than one are active) define the height of the game window or background canvas at the start of the game, so changing this value after the game has started will have no visible effect on the game window size unless called along with the function window_set_size(). If you have a larger or smaller\nport size than that assigned to the camera, then the camera view will be scaled down - or up - to fit, as illustrated by the image below.",
          "syntax": "view_hport[0 ... 7]"
        }
      ],
      "keys": []
    },
    {
      "name": "view_set_camera",
      "type": "key",
      "topics": [
        {
          "name": "view_set_camera",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_camera.htm",
          "blurb": "This function will set a camera to a specific view port. You give the view port to set (from 0 to 7), and supply the unique camera ID value (as returned by the camera_create() functions or when you use view_get_camera()). If you give a value of -1 as the camera ID then you are removing a camera from the view port and note that if that view port is enabled and visible you may get some unpredictable results.",
          "syntax": "view_set_camera(view_port, camera_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_set_hport",
      "type": "key",
      "topics": [
        {
          "name": "view_set_hport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_hport.htm",
          "blurb": "This function can be used to set the height of the given view port. You give the view port index (from 0 to 7) and the new height to use.",
          "syntax": "view_set_hport(view_port, h)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_set_surface_id",
      "type": "key",
      "topics": [
        {
          "name": "view_set_surface_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_surface_id.htm",
          "blurb": "With this variable you can set the contents of a view port to draw to a surface. When working with surfaces, it is often required to capture the whole visible region of the screen to the surface, and so you would assign it to a view port using this function. This means that everything that is shown in the chosen view port will now be drawn to the assigned surface and the contents of that view port will no longer be displayed, meaning that you will need to either:",
          "syntax": "view_set_surface_id(view_port, surf)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_set_visible",
      "type": "key",
      "topics": [
        {
          "name": "view_set_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_visible.htm",
          "blurb": "This function can be used to set the visibility of the given view port. The function takes the view port index (from 0 to 7) and a boolean true if it is visible and false if it is not.",
          "syntax": "view_set_visible(view_port, visible)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_set_wport",
      "type": "key",
      "topics": [
        {
          "name": "view_set_wport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_wport.htm",
          "blurb": "This function can be used to set the width of the given view port. You give the view port index (from 0 to 7) and the new width to use.",
          "syntax": "view_set_wport(view_port, w)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_set_xport",
      "type": "key",
      "topics": [
        {
          "name": "view_set_xport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_xport.htm",
          "blurb": "This function can be used to set the x position of the given view port. You give the view port index (from 0 to 7) and the new position to place it at.",
          "syntax": "view_set_xport(view_port, x)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_set_yport",
      "type": "key",
      "topics": [
        {
          "name": "view_set_yport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_yport.htm",
          "blurb": "This function can be used to set the y position of the given view port. You give the view port index (from 0 to 7) and the new position to place it at.",
          "syntax": "view_set_yport(view_port, y)"
        }
      ],
      "keys": []
    },
    {
      "name": "view_surface_id",
      "type": "key",
      "topics": [
        {
          "name": "view_surface_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_surface_id.htm",
          "blurb": "With this variable you can set the contents of a given view port to draw to a surface, or get the current surface id if one has been assigned to a view port. When working with surfaces, it is often required that you capture the whole visible region of the screen to the surface, and so you would assign it to a view port using this variable. This means that everything that is shown in the chosen view will now be drawn to the assigned surface. The view will now not be drawn to the screen, meaning that you will need to either:",
          "syntax": "view_surface_id[0...7]"
        }
      ],
      "keys": []
    },
    {
      "name": "view_visible",
      "type": "key",
      "topics": [
        {
          "name": "view_visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_visible.htm",
          "blurb": "This variable can be used to find out if a particular view port is currently visible or not. You can also set this variable to effectively turn \"on\" or \"off\" a view by setting the value to true (visible) or false (invisible). Note that even if you have a view port set to visible, if view ports are not enabled (using the built-in variable view_enabled or enabling them in the Room Editor) then they will not be drawn to the screen.",
          "syntax": "view_visible[0 ... 7]"
        }
      ],
      "keys": []
    },
    {
      "name": "view_wport",
      "type": "key",
      "topics": [
        {
          "name": "view_wport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_wport.htm",
          "blurb": "This variable can be used to get or to set the width of the specified view port. The width of the view port (or combined view ports if more than one are active) define the width of the game window or background canvas at the start of the game, so changing this value after the game has started will have no visible effect on the game window size unless called along with the function window_set_size(). If you have a larger or smaller\nport size than that assigned to the camera, then the camera view will be scaled down - or up - to fit, as illustrated by the image below.",
          "syntax": "view_wport[0 ... 7]"
        }
      ],
      "keys": []
    },
    {
      "name": "view_xport",
      "type": "key",
      "topics": [
        {
          "name": "view_xport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm",
          "blurb": "With this built in array you can get or set the x position of the given view port. The view port is the area on the screen where the view is drawn, and you can have up to 8 active at any one time (the array is values from 0 to 7 inclusive to give 8 ports). Now, the default for GameMaker is that the game window (or background canvas) is the same size as the room, however when you activate view ports and cameras, this behaviour changes and the total size of the bounding box for all view ports is used. So, if you have two different view ports at two different positions, the total area that they cover defines the size of the game window. The following image illustrates this:",
          "syntax": "view_xport[0 .. 7]"
        }
      ],
      "keys": []
    },
    {
      "name": "view_yport",
      "type": "key",
      "topics": [
        {
          "name": "view_yport",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_yport.htm",
          "blurb": "With this built in array you can get or set the y position of the given view port. The view port is the area on the screen where the view is drawn, and you can have up to 8 active at any one time (the array is values from 0 to 7 inclusive to give 8 ports). Now, the default for GameMaker is that the game window (or background canvas) is the same size as the room, however when you activate view ports and cameras, this behaviour changes and the total size of the bounding box for all view ports is used. So, if you have two different view ports at two different positions, the total area that they cover defines the size of the game window. The following image illustrates this:",
          "syntax": "view_yport[0 .. 7]"
        }
      ],
      "keys": []
    },
    {
      "name": "virtual_key_add",
      "type": "key",
      "topics": [
        {
          "name": "virtual_key_add",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/virtual_key_add.htm",
          "blurb": "This function enables you to map \"touches\" of a screen area to keyboard events. This means that once you have assigned an area to a virtual key, all touches on that area will trigger the keyboard event corresponding to the key you have mapped to the area. You can assign each virtual key you define to a variable too, which can then be used in the further virtual key functions to show, hide and delete them. These keys are assigned on a per room basis and will be automatically removed by GameMaker when changing rooms."
        }
      ],
      "keys": []
    },
    {
      "name": "virtual_key_delete",
      "type": "key",
      "topics": [
        {
          "name": "virtual_key_delete",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/virtual_key_delete.htm",
          "blurb": "If your game has different rooms or instances to control menus and game-play and other things, then it is probable that you will need to change the position and key maps of your virtual keys at some point. For that you can use this function to delete the old ones before creating the new ones (if necessary). The function requires that you supply the ID of the virtual key to delete - as returned by virtual_key_add()."
        }
      ],
      "keys": []
    },
    {
      "name": "virtual_key_hide",
      "type": "key",
      "topics": [
        {
          "name": "virtual_key_hide",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/virtual_key_hide.htm",
          "blurb": "Once you have created your virtual key for your devices, you may need to debug and test that it is correctly positioned and working properly and for that you would call the function virtual_key_show(). However, you may need to toggle this view on and off, so you can also hide the virtual key with this function, using the index of the virtual key that you want to hide (previously created and stored using virtual_key_add()). Once you are happy with things it is recommended that you create and place your own graphic in its area."
        }
      ],
      "keys": []
    },
    {
      "name": "virtual_key_show",
      "type": "key",
      "topics": [
        {
          "name": "virtual_key_show",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/virtual_key_show.htm",
          "blurb": "Once you have created your virtual key for your devices, you may need to debug and test that it is correctly positioned and working properly. For that you would call this function, using the index of the virtual key that you want to see (previously created and stored using virtual_key_add()) which will draw a coloured rectangle to represent the key on the screen. Once you are happy with things it is recommended that you create and place your own graphic in its area."
        }
      ],
      "keys": []
    },
    {
      "name": "visible",
      "type": "key",
      "topics": [
        {
          "name": "visible",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/visible.htm",
          "blurb": "An instance can be flagged as visible or not by setting this variable to true (visible) or false (invisible). This works by telling GameMaker to skip the draw event for this instance, so care must be taken when using this as it means that no code placed in the draw event will be run while the instance is not visible. Also note that if the layer that the instance is assigned to is flagged as invisible, setting this variable to true will have no effect until the layer itself is flagged as visible too.",
          "syntax": "visible"
        }
      ],
      "keys": []
    },
    {
      "name": "vk_add",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_alt",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_anykey",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_backspace",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_control",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_decimal",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_delete",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_divide",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_down",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_end",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_enter",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_escape",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f1",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f10",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f11",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f12",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f2",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f3",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f4",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f5",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f6",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f7",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f8",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_f9",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_home",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_insert",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_lalt",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_lcontrol",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_left",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_lshift",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_multiply",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_nokey",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad0",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad1",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad2",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad3",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad4",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad5",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad6",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad7",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad8",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_numpad9",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_pagedown",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_pageup",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_pause",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_printscreen",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_ralt",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_rcontrol",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_right",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_rshift",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_shift",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_space",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_subtract",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_tab",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vk_up",
      "type": "key",
      "topics": [
        {
          "name": "Keyboard Input",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
          "blurb": "When dealing with the keyboard in GameMaker you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely."
        }
      ],
      "keys": []
    },
    {
      "name": "vspeed",
      "type": "key",
      "topics": [
        {
          "name": "vspeed",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/vspeed.htm",
          "blurb": "vspeed is one of the \"built in\" properties that all instances have and defines the vertical movement speed (along the y-axis) of the instance in pixels per step. So, a vspeed of 3 means 3 pixels of movement to the bottom (+y) every step, and a vspeed of -3 would mean 3 pixels of movement to the top (-y) every step.",
          "syntax": "vspeed"
        }
      ],
      "keys": []
    },
    {
      "name": "weak_ref_alive",
      "type": "key",
      "topics": [
        {
          "name": "weak_ref_alive",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/weak_ref_alive.htm",
          "blurb": "With this function you can check the weak reference to a struct to see if it is still \"alive\" or not. You supply the weak reference to check (as returned by the function weak_ref_create()), and the function will return true if the struct is still being referenced somewhere or false if it's not and has been garbage collected. Note that if you supply a value that is not a weak reference, the function will return undefined.",
          "syntax": "weak_ref_alive(weak_ref)"
        }
      ],
      "keys": []
    },
    {
      "name": "weak_ref_any_alive",
      "type": "key",
      "topics": [
        {
          "name": "weak_ref_any_alive",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/weak_ref_any_alive.htm",
          "blurb": "With this function you can check the weak reference to various structs to see if it they are still \"alive\" or not. You supply an array of weak references to check (each weak reference should have been created using the function weak_ref_create()), and the function will return true if any of the structs are still being referenced somewhere or false if they are not and have been garbage collected. Note that if you supply an array where any of the values are not a weak references, the function will return undefined.",
          "syntax": "weak_ref_any_alive(array, [index], [length])"
        }
      ],
      "keys": []
    },
    {
      "name": "weak_ref_create",
      "type": "key",
      "topics": [
        {
          "name": "weak_ref_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Garbage_Collection/weak_ref_create.htm",
          "blurb": "With this function you can create a weak reference to a struct which can then be used to check if the struct is still \"alive\" (referenced) or not in the game. You supply the reference to the struct you want to track, and the function will return another struct which is a weak reference to that struct. Note that you can check whether a reference is \"strong\" or \"weak\" by using the function instanceof(), as a strong reference will return either \"struct\" or the name of the constructor function that created the struct, or \"weakref\" if it's a weak reference. Also note that the weak reference struct will have a variable \"ref\" which can be accessed to get the strong reference to the struct in question, unless it has been garbage collected, in which case it will return undefined.",
          "syntax": "weak_ref_create(struct_to_track)"
        }
      ],
      "keys": []
    },
    {
      "name": "webgl_enabled",
      "type": "key",
      "topics": [
        {
          "name": "webgl_enabled",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Web_And_HTML5/webgl_enabled.htm",
          "blurb": "This read-only variable will return whether WebGL is enabled (true) or not (false) for your game. It will only work for those games running through a browser (ie: HTML5), and for all other platforms it will return true.",
          "syntax": "webgl_enabled"
        }
      ],
      "keys": []
    },
    {
      "name": "while",
      "type": "key",
      "topics": [
        {
          "name": "while",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/while.htm",
          "blurb": "The GameMaker Language has a number of ways that you can perform loops, one of the most important is the while loop. This loop function has the form:"
        }
      ],
      "keys": []
    },
    {
      "name": "with",
      "type": "key",
      "topics": [
        {
          "name": "with",
          "type": "topic",
          "url": "GameMaker_Language/GML_Overview/Language_Features/with.htm",
          "blurb": "As indicated in the section Addressing Variables in Other Instances, it is possible to read and change the value of variables in instances and structs other than the one currently executing any given code. However, in a number of cases you want to do a lot more than just change a single variable within those other instances, and may want to perform more complex code actions that require multiple functions and lines of code. For example, imagine that you want to move all the instances of a ball object in your game 8 pixels down. You may think that this is achieved simply by the following piece of code:"
        }
      ],
      "keys": []
    },
    {
      "name": "working_directory",
      "type": "key",
      "topics": [
        {
          "name": "working_directory",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/File_Directories/working_directory.htm",
          "blurb": "Working_directory can actually return two different values depending on what you are using it for.",
          "syntax": "working_directory"
        }
      ],
      "keys": []
    },
    {
      "name": "Workspaces",
      "type": "key",
      "topics": [
        {
          "name": "Workspaces",
          "type": "topic",
          "url": "Introduction/Workspaces.htm",
          "blurb": "After logging in and starting a new project, GameMaker will take you to the initial workspace with some basic windows docked to the IDE. In general, the workspace is simply an area where you can organise the different assets for your game while you are working:"
        }
      ],
      "keys": []
    },
    {
      "name": "x",
      "type": "key",
      "topics": [
        {
          "name": "x",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/x.htm",
          "blurb": "The x value of an instance is the horizontal position in the current room, measured in pixels. This value can be either 0, positive or minus, where 0 is the left hand side of the room and moving right increases x, moving left decreases x (a negative value for x means that the instance has gone outside the left side of the room). You can even give x a real value like 12.345, but as you cannot get .345 of a pixel, the instance may not appear to have moved, although these values will be maintained\nand used internally by GameMaker and are perfectly valid.",
          "syntax": "x"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_achievements_set_progress",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_achievements_set_progress",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievements_set_progress.htm",
          "blurb": "This function can be used to update the progress of an achievement. You supply the user ID as returned, for example, by the function xboxlive_get_user(), and then the achievement string (this is the achievement id as assigned in the XDP/Windows Dev Center when it was created). Finally you set the progress value to to a value from 0 to 100. Note that the achievement system will refuse updates that are lower than the current progress\nvalue.",
          "syntax": "xboxlive_achievements_set_progress(user_id, achievement, progress)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_agegroup_adult",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_agegroup_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
          "blurb": "This function will return one of four constants (shown below) to indicate the age-range assigned to the specified user ID pointer.",
          "syntax": "xboxlive_agegroup_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_agegroup_child",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_agegroup_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
          "blurb": "This function will return one of four constants (shown below) to indicate the age-range assigned to the specified user ID pointer.",
          "syntax": "xboxlive_agegroup_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_agegroup_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_agegroup_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
          "blurb": "This function will return one of four constants (shown below) to indicate the age-range assigned to the specified user ID pointer.",
          "syntax": "xboxlive_agegroup_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_agegroup_teen",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_agegroup_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
          "blurb": "This function will return one of four constants (shown below) to indicate the age-range assigned to the specified user ID pointer.",
          "syntax": "xboxlive_agegroup_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_agegroup_unknown",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_agegroup_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
          "blurb": "This function will return one of four constants (shown below) to indicate the age-range assigned to the specified user ID pointer.",
          "syntax": "xboxlive_agegroup_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_fileerror_noerror",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_file_error",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_file_error.htm",
          "blurb": "This function will return a constant (shown below) to help debug why a file function failed so that you can take appropriate action in your game code. When one of the file functions fails you can call the function to find out exactly what the error was.",
          "syntax": "xboxlive_get_file_error()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_fileerror_outoflocalstorage",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_file_error",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_file_error.htm",
          "blurb": "This function will return a constant (shown below) to help debug why a file function failed so that you can take appropriate action in your game code. When one of the file functions fails you can call the function to find out exactly what the error was.",
          "syntax": "xboxlive_get_file_error()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_fileerror_quotaexceeded",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_file_error",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_file_error.htm",
          "blurb": "This function will return a constant (shown below) to help debug why a file function failed so that you can take appropriate action in your game code. When one of the file functions fails you can call the function to find out exactly what the error was.",
          "syntax": "xboxlive_get_file_error()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_fire_event",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_fire_event",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_fire_event.htm",
          "blurb": "This function can be used to fire a stat event. The \"event_name\" argument is the name of the event to be fired as defined in the XDP console for your game, and the following additional parameters will also depend on what you have a set up for the stat. The function will return 0 if the event was sent (and should be received/processed by the server) or -1 if there was an error (ie: your event was not setup as the event manifest file included in the project says another number).",
          "syntax": "xboxlive_fire_event(event_name, [stat_parameters...])"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_gamedisplayname_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_gamedisplayname_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_gamedisplayname_for_user.htm",
          "blurb": "With this function you can retrieve the display name - as a string - from the user ID pointer given. Note that if the user is local then the returned value is simply a string of the their display name, but if it is a remote user then the string will be their gamertag which can then be used, for example, for muting/unmuting in voice chat.",
          "syntax": "xboxlive_gamedisplayname_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_gamerscore_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_gamerscore_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_gamerscore_for_user.htm",
          "blurb": "This function will return the XBox Live gamerscore for the given user ID pointer.",
          "syntax": "xboxlive_gamerscore_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_gamertag_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_gamertag_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_gamertag_for_user.htm",
          "blurb": "This function will get the Gamer Tag for the currently signed-in user. Note that this function is only valid if a user is signed in and as such you should do a check for this using the function xboxlive_user_is_signed_in() before requesting the Gamer Tag. If you call this function when no user is signed in you will get an empty string\"\" returned.",
          "syntax": "xboxlive_gamertag_for_user()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_generate_player_session_id",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_generate_player_session_id",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_generate_player_session_id.htm",
          "blurb": "This function will generate a unique string (containing a GUID) for the current player session. This can then be used with the function xboxlive_fire_event().",
          "syntax": "xboxlive_generate_player_session_id()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_get_activating_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_activating_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_get_activating_user.htm",
          "blurb": "With this function you can retrieve the user ID pointer for the user that launched the game from the console.",
          "syntax": "xboxlive_get_activating_user()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_get_file_error",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_file_error",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_file_error.htm",
          "blurb": "This function will return a constant (shown below) to help debug why a file function failed so that you can take appropriate action in your game code. When one of the file functions fails you can call the function to find out exactly what the error was.",
          "syntax": "xboxlive_get_file_error()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_get_savedata_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_savedata_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_savedata_user.htm",
          "blurb": "This function returns the user ID pointer currently associated with file saving (or the constant pointer_null if no user ID is currently being used). See xboxlive_set_savedata_user() for further details.",
          "syntax": "xboxlive_get_savedata_user()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_get_stats_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_stats_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_get_stats_for_user.htm",
          "blurb": "This function can be used to retrieve data about specific stats from the Xbox Live servers. You supply the user ID as returned by the function xboxlive_get_user(), then your games Service Configuration ID (as shown on the XDP console), and finally the stats required. You can request up to a maximum of 14 stats, but this does not guarantee that you will get 14 stat results, as there is a limit to the total length of the request and therefore the maximum stat count depends on the length of the names of the stats themselves.",
          "syntax": "xboxlive_get_stats_for_user(user_id, serviceconfig_id, statname1, …)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_get_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_get_user.htm",
          "blurb": "With this function you can retrieve the user ID pointer for the indexed user. If the user does not exist, the function will return the constant pointer_null instead. You can find the number of users currently logged in with the function xboxlive_get_user_count().",
          "syntax": "xboxlive_get_user(index)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_get_user_count",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_get_user_count",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_get_user_count.htm",
          "blurb": "With this function you can find the total number of users currently signed in to the XBox system. The return value will be an integer value, from 0 - N, where N is the number of signed in users -1.",
          "syntax": "xboxlive_get_user_count()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_match_visibility_open",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm",
          "blurb": "This function will create a multi-player session using the Session Template, matchmaking hopper and Secure Device Association template, which you should have created beforehand in the XDP dashboard. The user ID you can retrieve for a particular game pad by calling the xboxlive_user_for_pad() function and visibility will be one of the following constants:",
          "syntax": "xboxlive_matchmaking_create(user_id, visibility, template, hopper, sdatemplate, [matchattributes])"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_match_visibility_private",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm",
          "blurb": "This function will create a multi-player session using the Session Template, matchmaking hopper and Secure Device Association template, which you should have created beforehand in the XDP dashboard. The user ID you can retrieve for a particular game pad by calling the xboxlive_user_for_pad() function and visibility will be one of the following constants:",
          "syntax": "xboxlive_matchmaking_create(user_id, visibility, template, hopper, sdatemplate, [matchattributes])"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_match_visibility_usetemplate",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm",
          "blurb": "This function will create a multi-player session using the Session Template, matchmaking hopper and Secure Device Association template, which you should have created beforehand in the XDP dashboard. The user ID you can retrieve for a particular game pad by calling the xboxlive_user_for_pad() function and visibility will be one of the following constants:",
          "syntax": "xboxlive_matchmaking_create(user_id, visibility, template, hopper, sdatemplate, [matchattributes])"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_create",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_create",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm",
          "blurb": "This function will create a multi-player session using the Session Template, matchmaking hopper and Secure Device Association template, which you should have created beforehand in the XDP dashboard. The user ID you can retrieve for a particular game pad by calling the xboxlive_user_for_pad() function and visibility will be one of the following constants:",
          "syntax": "xboxlive_matchmaking_create(user_id, visibility, template, hopper, sdatemplate, [matchattributes])"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_find",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_find",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_find.htm",
          "blurb": "This function will search for a multi-player session using the Session Template, matchmaking hopper and Secure Device Association template, which you should have created beforehand in the XDP dashboard. The user ID you can retrieve for a particular game pad by calling the xboxlive_user_for_pad() function. The function will return a unique Request ID value, which can then be used to identify the correct Social Asynchronous Event for this function. This event will be triggered when the session has been created and will contain a DS Map in the variable async_load with the following key/value pairs:",
          "syntax": "xboxlive_matchmaking_find(user_id, template, hopper, sdatemplate, [matchattributes])"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_join_invite",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_join_invite",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_join_invite.htm",
          "blurb": "This function can be called to process a join invitation once you have successfully called xboxlive_matchmaking_start(). You supply the local UserID and the the invitation values (ID and host ID) which were returned when the invitation was received, along with the name of the Session Template that you created (a string). It will then join the user to the session they've been invited to, and you will receive Social Asynchronous Events as\nif you had called xboxlive_matchmaking_find().",
          "syntax": "xboxlive_matchmaking_join_invite(user_who_received_invite, invitation_id, invitation_host, sda_template_name)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_join_session",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_join_session",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_join_session.htm",
          "blurb": "This function permits you to join a specific session via a session handle. This is similar to joining a session invite but is useful when you have your own server performing the matchmaking rather than relying on xbox live matchmaking.",
          "syntax": "xboxlive_matchmaking_join_session(user_id, session_handle, sdatemplate)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_send_invites",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_send_invites",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_send_invites.htm",
          "blurb": "This function brings up the Xbox Live system dialog to allow a user to send invitations to their game. You specify the local user who should control the dialog (and who's friends list will be used by the dialog), the unique session ID value for the session they want to invite people to, and some default text to show in the dialog. You get the session ID from the async_load DS map generated by the function xboxlive_matchmaking_create().",
          "syntax": "xboxlive_matchmaking_send_invites(from_user, session_to_invite_into, text_to_add_to_invite)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_session_get_users",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_session_get_users",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_session_get_users.htm",
          "blurb": "This function will create and populate a DS map with the details of the users in the specified session, or -1 if there is an error. You can get the session ID pointer from the async_load DS map that is returned in the Asynchronous Social Event when you created or found a session (see xboxlive_matchmaking_create() for more details). The returned DS map will have the following key/value pairs:",
          "syntax": "xboxlive_matchmaking_session_get_users(session_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_session_leave",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_session_leave",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_session_leave.htm",
          "blurb": "This function causes the user who created or found the specified session to leave it. You can get the session ID pointer from the async_load DS map that is returned in the Asynchronous Social Event when you created or found a session (see xboxlive_matchmaking_create() for more details).",
          "syntax": "xboxlive_matchmaking_session_leave(session_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_set_joinable_session",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_set_joinable_session",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_set_joinable_session.htm",
          "blurb": "This function sets a (previously created) session to be available for other users to join through the system UI. A user only has one joinable session at once, and when they leave the session (or the session ends) this will be cleared, however you can clear it manually by passing -1 in for the session argument.",
          "syntax": "xboxlive_matchmaking_set_joinable_session(local_user, session_that_is_joinable)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_start",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_start",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_start.htm",
          "blurb": "This function must be called before you can start any multi-player session for the user. It takes the User ID pointer, which you can retrieve for a particular game pad by calling the xboxlive_user_for_pad() function, and will initialise the multi-player API.",
          "syntax": "xboxlive_matchmaking_start(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_matchmaking_stop",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_matchmaking_stop",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_stop.htm",
          "blurb": "This function can be used to end a matchmaking session for the given user.",
          "syntax": "xboxlive_matchmaking_stop(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_pad_count_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_pad_count_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_pad_count_for_user.htm",
          "blurb": "With this function you can find out how many pad \"slots\" are active for the current user (see xboxlive_pad_for_user() for further details).",
          "syntax": "xboxlive_pad_count_for_user(user_id, slot)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_pad_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_pad_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_pad_for_user.htm",
          "blurb": "Xbox users can have various pads assigned to their user ID, with each one filling a \"slot\". These slots are numbered from 0, and can hold any pad index, so slot 0 could be assigned to pad 3 and slot 1 could be assigned to pad 2. This function can be used to get the pad that is assigned to any given slot, and is particularly useful should a user leave a gamepad without input for a certain length of time as it will switch itself off, so you can check any given User ID using this function to make sure that they have an active gamepad, and if they do not then react accordingly by (for example) pausing your game. If the pad its active, it's index value will be returned, but if not then the function will return -1.",
          "syntax": "xboxlive_pad_for_user(user_id, slot)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_read_player_leaderboard",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_read_player_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
          "blurb": "The function will return leaderboard information for the given user name. The leaderboard must have been created previously on the XDP dashboard for your game, and callin the function will trigger a callback Social Asynchronous Event which contains the async_load map populated with the relevant key/value pairs. The \"id\" key of this DS map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and IT will be paired with the constant achievement_leaderboard_info as well as a number of other key/value pairs. The exact contents of the map are shown below:",
          "syntax": "xboxlive_read_player_leaderboard(leaderboard_name, user_name, num_items, friend_filter)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_reputation_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_reputation_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_reputation_for_user.htm",
          "blurb": "With this function you can retrieve the Xbox Live reputation score for the given user ID pointer.",
          "syntax": "xboxlive_reputation_for_user(requesting_user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_set_rich_presence",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_set_rich_presence",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_set_rich_presence.htm",
          "blurb": "This function will set the rich presence string for the given user. A Rich Presence string shows a user's in-game activity after the name of the game that the user is playing, separated by a hyphen. This string is displayed under a player's Gamertag in the \"Friends & Clubs\" list as well as in the player's Xbox Live user profile.",
          "syntax": "xboxlive_set_rich_presence(user_id, is_user_active, rich_presence_string, [service_config_id])"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_set_savedata_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_set_savedata_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_set_savedata_user.htm",
          "blurb": "This function specifies that future file operations which operate in the save game area (i.e. all file writes, and reads from files that aren't in the bundle area) will be associated with the specified user ID pointer. This can be called as often as necessary to redirect save data to the appropriate user, or you can use the constant pointer_null to save to the generic machine storage area.",
          "syntax": "xboxlive_set_savedata_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_show_account_picker",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_show_account_picker",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_show_account_picker.htm",
          "blurb": "The function will open the XBox Account Picker screen so that the user can sign-in if they are not already signed in (if they are then the function will do nothing). Note that this function is only applicable when using the UWP build on PC and not Xbox, as to launch a game on Xbox the user has to have signed in already.",
          "syntax": "xboxlive_show_account_picker()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_show_profile_card_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_show_profile_card_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_show_profile_card_for_user.htm",
          "blurb": "With this function you can request that the XBox shows the profile card for the target user ID pointer. The function requires both the user ID pointer for the user that is requesting the information as well as the user ID pointer of the user to target and get the profile card of.",
          "syntax": "xboxlive_show_profile_card_for_user(requesting_user_id, target_user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_sponsor_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_sponsor_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_sponsor_for_user.htm",
          "blurb": "This function retrieves the ID of the given user's sponsor.",
          "syntax": "xboxlive_sponsor_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_sprite_add_from_gamerpicture",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_sprite_add_from_gamerpicture",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_sprite_add_from_gamerpicture.htm",
          "blurb": "With this function you can get the gamer picture for a given user ID pointer. The function works asynchronously, and will trigger an Image Loaded asynchronous event to inform you that the function is finished (like with HTML5/URL calls to sprite_add()). The Asynchronous Image Loaded event will have a DS map stored in the built in variable async_load. The map contains the following information:",
          "syntax": "xboxlive_sprite_add_from_gamerpicture(user_id, imagesize, xorig, yorig)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_add_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_add_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_add_user.htm",
          "blurb": "This function can be used to add a given user ID pointer to the statistics manager. This must be done before using any of the other stats functions to automatically sync the game with the XBox Live server and retrieve the latest values. You supply the user ID as returned by (for example) the function xboxlive_get_user(), and the function will will return -1 if there was an error or if the user ID is invalid, or any other value if the function was successfully called.",
          "syntax": "xboxlive_stats_add_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_delete_stat",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_delete_stat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_delete_stat.htm",
          "blurb": "This function can be used to delete a stat from the stat manager for the given user ID. You supply the user ID as returned by (for example) the function xboxlive_get_user(), then the stat string to delete. This clears the stat value and removed it from the stat manager, meaning it will no longer be returned by the functions xboxlive_stats_get_stat_names() or xboxlive_stats_get_stat().",
          "syntax": "xboxlive_stats_delete_stat(user_id, stat)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_flush_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_flush_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_flush_user.htm",
          "blurb": "This function can be used to flush the stats data for a given user from the statistics manager, to the live server, ensuring that the server is up to date with the current values. According to XBox documentation, developers should be careful not to call this too often as the XBox will rate-limit the requests, and the XBox OS will also automatically flush stats approximately every 5 minutes automatically anyway.",
          "syntax": "xboxlive_stats_flush_user(user_id, priority)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_get_leaderboard",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_get_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_leaderboard.htm",
          "blurb": "This function can be used to retrieve a global leaderboard of ranks for a given statistic. You supply the user ID (as returned, for example, by the function xboxlive_get_user()), the stat string (as defined when you registered it as a \"Featured Stat\"), and then you specify a number of details about what leaderboard information you want to retrieve. Note that you can only retrieve a global leaderboard for int or real stats, but not for string stats.",
          "syntax": "xboxlive_stats_get_leaderboard(user_id, stat, num_entries, start_rank, start_at_user, ascending)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_get_social_leaderboard",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_get_social_leaderboard",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_social_leaderboard.htm",
          "blurb": "This function can be used to retrieve a social leaderboard of ranks for a given statistic. You supply the user ID (as returned, for example, by the function xboxlive_get_user()), the stat string (as defined when you created it using the xboxlive_stats_set_stat_* functions), and then you specify a number of details about what leaderboard information you want to retrieve. Note that you can only retrieve a social leaderboard for int or real stats, but not for string stats, and that if you flag the \"favourites_only\" argument as true, then the results will only contain data for those friends that are marked by the user as \"favourites\".",
          "syntax": "xboxlive_stats_get_social_leaderboard(user_id, stat, num_entries, start_rank, start_at_user, favourites_only)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_get_stat",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_get_stat",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_stat.htm",
          "blurb": "This function can be used to retrieve a single stat value from the stat manager for a given user. You supply the user ID as returned by (for example) the function xboxlive_get_user(), and then the stat string as defined when you created it using the one of the xboxlive_stats_set_stat_* functions. The return value can be either a string or a real (depending on the stat being checked) or the GML constant undefined if the stat does not exist or there has been an error.",
          "syntax": "xboxlive_stats_get_stat(user_id, stat)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_get_stat_names",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_get_stat_names",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_stat_names.htm",
          "blurb": "This function can be used to retrieve all the defined stats from the stat manager for a given user. You supply the user ID as returned by (for example) the function xboxlive_get_user(), and the function will return an array of strings containing the statistics for the user. If an error occurs or the user has no stats the array will still be returned but will have an element count of 0.",
          "syntax": "xboxlive_stats_get_stat_names(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_remove_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_remove_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_remove_user.htm",
          "blurb": "This function can be used to remove (unregister) a given user from the statistics manager, performing a flush of the stat data to the live server. According to the XBox documentation the game does not have to remove the user from the stats manager, as the XBox OS will periodically flush the stats anyway. You supply the user ID as returned by (for example) the function xboxlive_get_user(), and the function will will return -1 if there was an error or if the user ID is invalid, or any other value if the function was successfully called.",
          "syntax": "xboxlive_stats_remove_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_set_stat_int",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_set_stat_int",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_set_stat_int.htm",
          "blurb": "This function can be used to set the value of a stat for the given user ID. You supply the user ID as returned by (for example) the function xboxlive_get_user(), then the stat string to set (if the stat string does not already exist then a new stat will be created and set to the given value) and a value (an integer) to set the stat to. Note that the stat name must be alphanumeric only, with no symbols or spaces.",
          "syntax": "xboxlive_stats_set_stat_int(user_id, stat, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_set_stat_real",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_set_stat_real",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_set_stat_real.htm",
          "blurb": "This function can be used to set the value of a stat for the given user ID. You supply the user ID as returned by (for example) the function xboxlive_get_user(), then the stat string to set (if the stat string does not already exist then a new stat will be created and set to the given value) and a value (a real) to set the stat to. Note that the stat name must be alphanumeric only, with no symbols or spaces.",
          "syntax": "xboxlive_stats_set_stat_real(user_id, stat, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_set_stat_string",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_set_stat_string",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_set_stat_string.htm",
          "blurb": "This function can be used to set a stat to a string for the given user ID. You supply the user ID as returned by (for example) the function xboxlive_get_user(), then the stat string to set (if the stat string does not already exist then a new stat will be created and set to the given value) and then the string to set the stat to. Note that the stat name must be alphanumeric only, with no symbols or spaces, but the string value you are setting can have spaces and special characters.",
          "syntax": "xboxlive_stats_set_stat_string(user_id, stat, value)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_stats_setup",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_stats_setup",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_setup.htm",
          "blurb": "This function needs to be called before you can use any of the other Xbox Live stat functions, and simply initialises the required libraries on the system. The \"user_id\" argument is the raw user ID as returned by the function xboxlive_get_user(), while the \"service_config\" and \"title_id\" is the unique ID for your game on the Xbox Live Dev Center.",
          "syntax": "xboxlive_stats_setup(user_id, service_config_id, title_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_user_for_pad",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_user_for_pad",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_for_pad.htm",
          "blurb": "This function will return the User ID pointer associated with the given gamepad index value, or pointer_null if no user is associated with it. Note that this function should only be used with gamepad indices, and not with xboxlive_get_user_count().",
          "syntax": "xboxlive_user_for_pad(pad_index)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_user_id_for_user",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_user_id_for_user",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_id_for_user.htm",
          "blurb": "This function converts the User ID pointer into a string.",
          "syntax": "xboxlive_user_id_for_user(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_user_is_active",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_user_is_active",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_active.htm",
          "blurb": "With this function you can check whether the given user ID is in the list of users currently using the console, and the function will return true if they are, or false otherwise. You can get a User ID pointer with the function xboxlive_get_user().",
          "syntax": "xboxlive_user_is_active(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_user_is_guest",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_user_is_guest",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_guest.htm",
          "blurb": "This function will return true if the given user ID pointer is a guest user and false if they are not. You can get a User ID pointer with the function xboxlive_get_user().",
          "syntax": "xboxlive_user_is_guest(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_user_is_remote",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_user_is_remote",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_remote.htm",
          "blurb": "This function will check the given user ID and return true if the player is a remote player, or false otherwise.",
          "syntax": "xboxlive_user_is_remote(user_id)"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_user_is_signed_in",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_user_is_signed_in",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_signed_in.htm",
          "blurb": "The function will check to see if a user is signed-in and return true if there is and false otherwise. If no user is signed in then you can call the function xboxlive_show_account_picker() to open the account picker and prompt them to sign-in.",
          "syntax": "xboxlive_user_is_signed_in()"
        }
      ],
      "keys": []
    },
    {
      "name": "xboxlive_user_is_signing_in",
      "type": "key",
      "topics": [
        {
          "name": "xboxlive_user_is_signing_in",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_signing_in.htm",
          "blurb": "The function will check to see if a user is in the process of signing-in and return true if that is the case and false otherwise.",
          "syntax": "xboxlive_user_is_signing_in()"
        }
      ],
      "keys": []
    },
    {
      "name": "xprevious",
      "type": "key",
      "topics": [
        {
          "name": "xprevious",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/xprevious.htm",
          "blurb": "This built-in variable returns the previous x position for the instance. This variable will be set just before the start of the begin step event but it can also be set through code at any time, meaning you can give it your own custom value should that be necessary.",
          "syntax": "xprevious"
        }
      ],
      "keys": []
    },
    {
      "name": "xstart",
      "type": "key",
      "topics": [
        {
          "name": "xstart",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/xstart.htm",
          "blurb": "This variable stores the initial x position of the instance when it is first created in the room. This is not a read-only variable and can be set as well as read.",
          "syntax": "xstart"
        }
      ],
      "keys": []
    },
    {
      "name": "y",
      "type": "key",
      "topics": [
        {
          "name": "y",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/y.htm",
          "blurb": "The y value of an instance is the vertical position in the current room, measured in pixels. This value can be either 0, positive or minus, where 0 is the top of the room and moving down increases y, moving up decreases y (a negative value for y means that the instance has gone outside the top of the room). You can even give y a real value like 12.345, but as you cannot get .345 of a pixel, the instance may not appear to have moved, although these values will be maintained and used internally by\nGameMaker and are perfectly valid.",
          "syntax": "y"
        }
      ],
      "keys": []
    },
    {
      "name": "yoyo compiler",
      "type": "key",
      "topics": [
        {
          "name": "YoYo Compiler",
          "type": "topic",
          "url": "Settings/YoYo_Compiler.htm",
          "blurb": "The YoYo Compiler (YYC) is a special compiler for creating executable packages that use machine code instead of interpreted code and a runner (which is what the GameMaker VM compile uses). Compiled code is faster to run, but takes more time to compile the executable."
        }
      ],
      "keys": []
    },
    {
      "name": "YoYo Games Knowledge Base",
      "type": "key",
      "topics": [
        {
          "name": "Our Knowledge Base",
          "type": "topic",
          "url": "Introduction/Our_Knowledge_Base.htm",
          "blurb": "The GameMaker manual that you are reading now has all the information that you need to use the product and start making games. However, it does not include information on setting up for the various different platforms that GameMaker can make games for, nor does it include any guides or help for the various extensions that are available to extend functionality for some platforms. It also doesn't contain any last-minute information that may be relevant to the product or to specific platforms that hasn't been able to be included in this manual. However, all this information and more is available from the GameMaker Knowledge Base and below you can find links to various sections of the website that you may find useful:"
        }
      ],
      "keys": []
    },
    {
      "name": "YoYo Games Social Links",
      "type": "key",
      "topics": [
        {
          "name": "Our Social Links",
          "type": "topic",
          "url": "Introduction/Our_Social_Links.htm",
          "blurb": "Apart from technical information here in the manual and on the Knowledge Base, GameMaker also has a number of social media and support and information pages where you can find the latest news, offers and other information regarding GameMaker. You can find links to these sites below:"
        }
      ],
      "keys": []
    },
    {
      "name": "yprevious",
      "type": "key",
      "topics": [
        {
          "name": "yprevious",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/yprevious.htm",
          "blurb": "This built-in variable returns the previous y position for the instance. This variable will be set to the current x position just before the start of the begin step event but it can also be set through code at any time, meaning you can give it your own custom value should that be necessary.",
          "syntax": "yprevious"
        }
      ],
      "keys": []
    },
    {
      "name": "ystart",
      "type": "key",
      "topics": [
        {
          "name": "ystart",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/ystart.htm",
          "blurb": "This variable stores the initial y position of the instance when it is first created in the room. This is not a read-only variable and can be set as well as read.",
          "syntax": "ystart"
        }
      ],
      "keys": []
    },
    {
      "name": "yuv videos",
      "type": "key",
      "topics": [
        {
          "name": "YUV Videos",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/Drawing/Videos/YUV_Videos.htm",
          "blurb": "Platforms that use the YUV colour format for videos require extra steps for drawing those videos. This involves using a shader to draw two surfaces on a primitive quad."
        }
      ],
      "keys": []
    },
    {
      "name": "yyc",
      "type": "key",
      "topics": [
        {
          "name": "YoYo Compiler",
          "type": "topic",
          "url": "Settings/YoYo_Compiler.htm",
          "blurb": "The YoYo Compiler (YYC) is a special compiler for creating executable packages that use machine code instead of interpreted code and a runner (which is what the GameMaker VM compile uses). Compiled code is faster to run, but takes more time to compile the executable."
        }
      ],
      "keys": []
    },
    {
      "name": "zip_unzip",
      "type": "key",
      "topics": [
        {
          "name": "zip_unzip",
          "type": "topic",
          "url": "GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/zip_unzip.htm",
          "blurb": "This function will open a stored zip file and extract its contents to the given directory. Note that if you do not supply a full path to the ZIP directory then the current drive root will be used, and if you want to place it in a relative path to the game bundle working directory then you should use the working_directory variable as part of the path (relative paths using \".\" or \"..\" will not work as expected so should be avoided). Note too that the zip must be either part of the game bundle (ie: an Included File) or have been downloaded to the storage area using http_get_file().",
          "syntax": "zip_unzip(zip_file, target_directory)"
        }
      ],
      "keys": []
    }
  ]
}